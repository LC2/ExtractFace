#!/usr/bin/perl
# Perl - v: 5.16.3
#------------------------------------------------------------------------------#
# Tool name     : ExtractFace
# Description   : Dump Facebook stuff for analysis or reporting purposes
# WebSite				: http://le-tools.com/ExtractFace.html
# Documentation	: http://le-tools.com/ExtractFaceDoc.html
# CodePlex			: https://extractface.codeplex.com
# GitHub				: https://github.com/arioux/ExtractFace
# Creation      : 2015-08-01
# Modified      : 2017-07-06
my $VERSION     = "5.2.6";
# Author        : Alain Rioux (admin@le-tools.com)
#
# Copyright (C) 2015-2017  Alain Rioux (le-tools.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#------------------------------------------------------------------------------#
# Modules
#------------------------------------------------------------------------------#
use strict;
use utf8;
use arybase;
use Encode qw(encode decode);
use Excel::Writer::XLSX;
use File::Copy::Recursive qw(rcopy);
use File::Path qw(remove_tree);
use Firefox::Application::API40;
use Firefox::Application;
use HTML::Entities;
use Image::Info qw(image_info dim);
use LWP::UserAgent;
use Module::Pluggable::Fast;
use MozRepl::Client;
use MozRepl::Log;
use MozRepl::RemoteObject;
use MozRepl;
use threads;
use threads::shared;
use Time::Local;
use Time::HiRes qw(usleep);
use DateTime;
use DateTime::Format::Strptime;
use URI::Escape::JavaScript qw(unescape);
use Win32::API();
use Win32::GUI;
use Win32::GUI qw( WS_POPUP WS_CAPTION WS_THICKFRAME WS_EX_TOPMOST );
use Win32::GUI::BitmapInline();
use Win32::GUI::Grid;
use Win32::Process;
use WWW::Mechanize::Firefox;
require "ExtractFaceGraph.pl";
require "ExtractFaceLang.pl";

#------------------------------------------------------------------------------#
# Graphic elements
#------------------------------------------------------------------------------#
my ($winICO, $logoBmp, $albumBmp, $friendsBmp, $eventBmp, $contribBmp, $chatBmp,
    $configBmp, $browseBmp, $explorerBmp, $refresh16) = &loadGraph();
  
#------------------------------------------------------------------------------#
# Global variables
#------------------------------------------------------------------------------#
my $PROGDIR = $0;                                                              # Program path
while (chop($PROGDIR) ne "\\") { }                                             # Dir only
my $USERDIR;                                                                   # User path
if (-d "$ENV{'APPDATA'}\\ExtractFace") { $USERDIR = "$ENV{'APPDATA'}\\ExtractFace"; }
else                                   { $USERDIR = $PROGDIR;                       }
my $CONFIG_FILE  = "$USERDIR\\ExtractFace.ini";                                # Configuration file
my $DEBUG_FILE   = "$USERDIR\\debug.log";                                      # Debug log file
my $LANG_FILE    = "$USERDIR\\Lang.ini";                                       # Langage file
my $URL_DOC      = "http://le-tools.com/ExtractFaceDoc.html";                  # Online documentation
my $URL_TOOL     = 'http://le-tools.com/ExtractFace.html#Download';            # Url of the tool (download)
my $URL_VER      = 'http://www.le-tools.com/download/ExtractFaceVer.txt';      # Url of the version file
my %CONFIG;                                                                    # Configuration
my %STR;                                                                       # Strings for GUI
my $ARROW       :shared;                                                       # Arrow pointer
my $HOURGLASS   :shared;                                                       # Hourglass pointer
my $START       = 0;                                                           # Indicate when program is started
my $THR;                                                                       # Thread

#------------------------------------------------------------------------------#
# Strings
#------------------------------------------------------------------------------#
&loadDefaultStr(\%STR); # Load default language (en)
if (-e $LANG_FILE and -T $LANG_FILE) { &loadStr(\%STR, $LANG_FILE); } # If language file, load translated strings

#------------------------------------------------------------------------------#
# Splash window
#------------------------------------------------------------------------------#
my $splash = new Win32::GUI::Window ( -name       => 'Splash'                  ,
                                      -text       => 'Splash'                  ,
                                      -size       => [128,128]                 ,
                                      -pos        => [100,100]                 ,
                                      -addstyle   => WS_POPUP                  ,
                                      -popstyle   => WS_CAPTION | WS_THICKFRAME,
                                      -addexstyle => WS_EX_TOPMOST             , );
$splash->AddLabel(                    -name       => 'Bitmap'                  ,
                                      -size       => [128,128]                 ,
                                      -pos        => [  0,  0]                 ,
                                      -bitmap     => $logoBmp                  , );

#------------------------------------------------------------------------------#
# Main window
#------------------------------------------------------------------------------#
my $screen    = Win32::GUI::GetDesktopWindow(); # Screen resolution
my $scrnX     = Win32::GUI::Width($screen);     # Width
my $scrnY     = Win32::GUI::Height($screen);    # Height
my $winWidth  = 520;
my $winHeight = 195;
my $winPosX   = ($scrnX - $winWidth)  / 2;
my $winPosY   = ($scrnY - $winHeight) / 2;
my $win = Win32::GUI::Window->new(-name       => 'main'               ,
																	-title      => 'ExtractFace'        ,
																	-background => [255, 255, 255]      ,
																	-width      => $winWidth            ,
																	-height     => $winHeight           ,
																	-pos        => [$winPosX, $winPosY] ,
																	-resizable  => 0                    ,
																	-hasmaximize=> 0                    , );
$win->SetIcon($winICO);
# Fonts
sub LOGPIXELSX() {88}
sub getDPI { return(Win32::GUI::DC->new()->GetDeviceCaps(LOGPIXELSX)); }
my $DPI = &getDPI();
my $fontGB;
my $fontGB2;
my $font8;
my $font10;
my $font10t;
# Larger size (125% and 150%)
if ($DPI >= 120) {
  $fontGB  = new Win32::GUI::Font(-name => 'Arial', -size => 10, -bold => 1);
  $fontGB2 = new Win32::GUI::Font(-name => 'Arial', -size => 10, -bold => 1, -underline => 1);
  $font8   = new Win32::GUI::Font(-name => 'Arial', -size =>  6);
  $font10  = new Win32::GUI::Font(-name => 'Arial', -size =>  8);
  $font10t = new Win32::GUI::Font(-name => 'Arial', -size =>  8, -underline => 1);
# Normal size
} else {
  $fontGB  = new Win32::GUI::Font(-name => 'Arial', -size => 12, -bold => 1);
  $fontGB2 = new Win32::GUI::Font(-name => 'Arial', -size => 12, -bold => 1, -underline => 1);
  $font8   = new Win32::GUI::Font(-name => 'Arial', -size =>  8);
  $font10  = new Win32::GUI::Font(-name => 'Arial', -size => 10);
  $font10t = new Win32::GUI::Font(-name => 'Arial', -size => 10, -underline => 1);
}
# Load Pointers
my $loadImage = new Win32::API('user32', 'LoadImage', ['N','N','I','I','I','I'],'N');
$HOURGLASS    = $loadImage->Call(0, 32514, 2, 0, 0, 0x8040);
$ARROW        = $loadImage->Call(0, 32512, 2, 0, 0, 0x8040);
# Taskbar
$win->AddNotifyIcon(-name    => "Tray"           , 
                    -icon    => $winICO          ,
                    -tip     => 'ExtractFace'    ,
                    -balloon => 1                , );
# Main section
$win->AddLabel(   -name        => 'lblLogo'           ,
                  -size        => [128,128]           ,
                  -pos         => [  0,  5]           ,
                  -bitmap      => $logoBmp            ,
                  -background  => [255, 255, 255]     , );
$win->AddLabel(   -name        => 'lblText1'          ,
                  -size        => [ 90, 65]           ,
                  -pos         => [135, 10]           ,
                  -font        => $font10             ,
                  -foreground  => [0  , 0  , 102]     ,
                  -background  => [255, 255, 255]     ,
                  -text        => $STR{'update4'}.":\n".$STR{'website'}.":\n".$STR{'author'}.":\n".$STR{'translatedBy'}.':', );
$win->AddLabel(   -name        => 'lblText2'          ,
                  -size        => [270, 65]           ,
                  -pos         => [230, 10]           ,
                  -font        => $font10             ,
                  -foreground  => [185, 154,   0]     ,
                  -background  => [255, 255, 255]     ,
                  -text        =>  "$VERSION\nhttp://www.le-tools.com/\nAlain Rioux (admin\@le-tools.com)\n$STR{'translatorName'}", );
$win->AddLabel(   -name        => 'lblText3'          ,
                  -size        => [300, 20]           ,
                  -pos         => [135, 80]           ,
                  -font        => $font10             ,
                  -foreground  => [0  , 0  , 102]     ,
                  -background  => [255, 255, 255]     ,
                  -text        => '© Copyright 2015-2016 Alain Rioux', );
$win->AddLabel(   -name        => 'lblText4'          ,
                  -size        => [340, 22]           ,
                  -pos         => [180,110]           ,
                  -font        => $font10             ,
                  -foreground  => [255,   0,   0]     ,
                  -background  => [255, 255, 255]     ,
                  -text        => '>> '.$STR{'lblText4'}.' <<', );
$win->AddCheckbox(-name        => 'chStartMinimized'  ,
                  -size        => [300, 22]           ,
                  -pos         => [ 10,140]           ,
                  -text        => $STR{'chStartMinimized'},
                  -background  => [255, 255, 255]     ,
                  -font        => $font10             , );
# Load taskbar menu
my $trayMenu = Win32::GUI::Menu->new(
 	"SysTray"             => "SysTray",
  ">$STR{'menu1'}"      => { -name => "ScrollExpand" , -onClick => \&scrollExpand           },
  ">$STR{'menu2'}"      => { -name => "Scrolling"    , -onClick => \&scroll                 },
  ">$STR{'menu3'}"      => { -name => "Expand"       , -onClick => \&expand                 },
  " > -"                => 0,
  ">$STR{'menu21'}..."  => { -name => "PID"       	 , -onClick => \&winPID                 },
  ">$STR{'menu5'}..."   => { -name => "Albums"       , -onClick => \&winAlbumsNormal        },
  ">$STR{'menu6'}..."   => { -name => "Friends"      , -onClick => \&winFriends             },
  ">$STR{'menu7'}..."   => { -name => "Events"       , -onClick => \&winEvent               },
  ">$STR{'menu17'}..."  => { -name => "Contributors" , -onClick => \&winContrib             },
	">$STR{'chat'}"     	=> 0,
	">>$STR{'menu18'}"    	=> { -name => "ScrollContacts", -onClick => \&scrollContacts       },
  ">>$STR{'menu8'}"      	=> { -name => "ScrollChat"    , -onClick => \&scrollChat           },
  ">>$STR{'menu9'}"      	=> { -name => "LoadOldMsg"    , -onClick => \&loadOldMsg           },
  ">>$STR{'menu10'}"     	=> { -name => "LoadNewMsg"    , -onClick => \&loadNewMsg           },
  ">>$STR{'menu11'}..."  	=> { -name => "Chat"          , -onClick => \&winChat              },
  ">>$STR{'menu20'}..."  	=> { -name => "VocalMessage"  , -onClick => \&winVocalMsg          },
  ">$STR{'menu4'}"      => 1,
  ">>$STR{'menu5'}..."   	=> { -name => "GroupAlbums"   , -onClick => \&winGroupAlbums       },
  ">>$STR{'menu19'}..."  	=> { -name => "GroupMembers"  , -onClick => \&winGroupMembers      },
  " > -"                => 0,
  ">$STR{'menu12'}..."  => { -name => "Config"       , -onClick => \&winConfig              },
  " > -"                => 0,
  ">$STR{'menu14'}..."  => { -name => "Help"         , -onClick => \&help                   },
  ">$STR{'menu15'}..."  => { -name => "About"        , -onClick => \&Tray_DblClick          },
  ">$STR{'menu16'}"     => { -name => "Quit"         , -onClick => \&main_Quit              },
);

#------------------------------------------------------------------------------#
# Get profile ID window
#------------------------------------------------------------------------------#
my $winPID = Win32::GUI::DialogBox->new( 		-name        => 'winPID'           		,
                                            -parent      => $win                  ,
                                            -text        => $STR{'menu21'}		    ,
                                            -pos         => [$winPosX, $winPosY]	,
                                            -size        => [300,100]             ,
                                            -background  => [255, 255, 255]       ,
                                            -hasmaximize => 0                     ,
                                            -hasminimize => 1                     ,
                                            -helpbutton  => 0                     ,
                                            -resizable   => 0                     ,
                                            -topmost     => 1                     ,
                                            -dialogui    => 1                     , );
$winPID->SetIcon($winICO);
$winPID->AddLabel(			-name         => 'lblPIDTitle'				,
												-size         => [ 80, 22]						,
												-pos          => [  5, 13]						,
												-text         => $STR{'profilID'}.':'	,
												-background   => [255, 255, 255]			,
												-font         => $font10							, );
$winPID->AddTextfield(	-name         => 'tfPIDTitle'					,
												-size         => [168, 22]						,
												-pos          => [ 90, 10]						, );
$winPID->AddButton(			-name         => 'btnPIDRefresh'			,
												-size         => [ 22, 22]            ,
												-pos          => [260, 10]            ,
												-bitmap       => $refresh16           ,
												-tip          => $STR{'btnRefreshTip'},
												-tabstop      => 1                    , );
$winPID->AddButton(			-name         => 'btnPIDOk'						,
												-size         => [ 50, 25]						,
												-pos          => [125, 40]						,
												-text         => $STR{'ok'}						,
												-font         => $font10							,
												-ok           => 1										,
												-default      => 1										, );

#------------------------------------------------------------------------------#
# Dump albums window
#------------------------------------------------------------------------------#
my $winAlbums = Win32::GUI::DialogBox->new( -name        => 'winAlbums'           ,
                                            -parent      => $win                  ,
                                            -text        => $STR{'winAlbums'}			,
                                            -pos         => [$winPosX, $winPosY]	,
                                            -size        => [790,390]             ,
																						-minsize		 => [790,390]             ,
                                            -background  => [255, 255, 255]       ,
                                            -hasmaximize => 1                     ,
                                            -hasminimize => 1                     ,
                                            -helpbutton  => 0                     ,
                                            -resizable   => 1                     ,
                                            -topmost     => 1                     ,
                                            -dialogui    => 1                     , );
$winAlbums->SetIcon($winICO);
$winAlbums->AddLabel(             -name         => 'lblLogo'                      ,
                                  -size         => [128,128]                      ,
                                  -pos          => [  5,  5]                      ,
                                  -bitmap       => $albumBmp                      ,
                                  -background   => [255, 255, 255]                , );
$winAlbums->AddLabel(             -name         => 'lblAlbumTitle'                ,
                                  -size         => [ 75, 22]                      ,
                                  -pos          => [140, 18]                      ,
                                  -text         => $STR{'file'}.':'               ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        , );
$winAlbums->AddTextfield(         -name         => 'tfAlbumTitle'                 ,
                                  -size         => [440, 22]                      ,
                                  -pos          => [220, 15]                      , );
$winAlbums->AddCheckbox(          -name         => 'chAlbumGroup'                 ,
                                  -size         => [200, 20]                      ,
                                  -pos          => [665, 15]                      ,
                                  -text         => $STR{'group'}                  ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        ,
                                  -visible      => 0                              , );
$winAlbums->AddLabel(             -name         => 'lblDirSaveAlbums'             ,
                                  -size         => [ 75, 22]                      ,
                                  -pos          => [140, 48]                      ,
                                  -text         => $STR{'dir'}.':'                ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        , );
$winAlbums->AddTextfield(         -name         => 'tfDirSaveAlbums'              ,
                                  -size         => [440, 22]                      ,
                                  -pos          => [220, 45]                      , );
$winAlbums->AddButton(            -name         => 'btnDirSaveAlbums'             ,
                                  -size         => [ 22, 22]                      ,
                                  -pos          => [662, 45]                      ,
                                  -bitmap       => $browseBmp                     , );
$winAlbums->AddButton(            -name         => 'btnBrowseDirSaveAlbums'       ,
                                  -size         => [ 22, 22]                      ,
                                  -pos          => [685, 45]                      ,
                                  -bitmap       => $explorerBmp                   ,
                                  -tip          => $STR{'browseFolder'}           , );
$winAlbums->AddCheckbox(          -name         => 'chSaveAlbumDir'               ,
                                  -size         => [200, 20]                      ,
                                  -pos          => [220, 73]                      ,
                                  -text         => $STR{'remDir'}                 ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        ,
                                  -checked      => 0                              , );
$winAlbums->AddLabel(             -name         => 'lblInProgress'                ,
                                  -size         => [256, 22]                      ,
                                  -pos          => [490, 74]                      ,
                                  -font         => $font10                        ,
                                  -foreground   => [0, 153, 0]                    ,
                                  -background   => [255, 255, 255]                ,
                                  -visible      => 1                              , );
$winAlbums->AddButton(            -name         => 'btnAlbumsRefresh'             ,
                                  -size         => [ 22, 22]                      ,
                                  -pos          => [748, 76]                      ,
                                  -bitmap       => $refresh16                     ,
                                  -tip          => $STR{'btnRefreshTip'}          ,
                                  -tabstop      => 1                              , );
$winAlbums->AddGrid (             -name         => 'GridAlbums'                   ,
                                  -pos          => [140,100]                      ,
                                  -size         => [630,145]                      ,
                                  -fixedrows    => 1                              ,
                                  -fixedcolumns => 0                              ,
                                  -editable     => 0                              , );
$winAlbums->GridAlbums->SetListMode(1);
$winAlbums->AddLabel(             -name         => 'lblAlbumsOpt'                 ,
                                  -size         => [ 75, 22]                      ,
                                  -pos          => [140,250]                      ,
                                  -text         => $STR{'lblOptions'}.':'         ,
                                  -font         => $font10                        ,
                                  -background   => [255, 255, 255]                , );
$winAlbums->AddCheckbox(          -name         => 'chPublishDate'                ,
                                  -size         => [190, 20]                      ,
                                  -pos          => [220,250]                      ,
                                  -text         => $STR{'chPublishDate'}          ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        , );
$winAlbums->AddCheckbox(          -name         => 'chAlbumsOpenHTML'             ,
                                  -size         => [180, 20]                      ,
                                  -pos          => [415,250]                      ,
                                  -text         => $STR{'openHTML'}               ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        , );
$winAlbums->AddCheckbox(          -name         => 'chAlbumsOpenDir'              ,
                                  -size         => [170, 20]                      ,
                                  -pos          => [600,250]                      ,
                                  -text         => $STR{'openAlbumDir'}           ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        , );
$winAlbums->AddLabel(             -name         => 'lblPicturesSize'              ,
                                  -size         => [100, 22]                      ,
                                  -pos          => [220,283]                      ,
                                  -text         => $STR{'picSize'}.':'            ,
                                  -font         => $font10                        ,
                                  -background   => [255, 255, 255]                , );
$winAlbums->AddCombobox(          -name         => 'cbPicturesSize'               ,
                                  -size         => [ 80,100]                      ,
                                  -pos          => [325,280]                      ,
                                  -font         => $font10                        ,
                                  -dropdownlist => 1                              ,
                                  -vscroll      => 1                              , );
$winAlbums->cbPicturesSize->Add( $STR{'small'}, $STR{'medium'}, $STR{'full'},);
$winAlbums->cbPicturesSize->SetCurSel(2);
$winAlbums->AddButton(            -name         => 'btnAlbumsOk'                  ,
                                  -size         => [ 85, 30]                      ,
                                  -pos          => [355,310]                      ,
                                  -text         => $STR{'dump'}                   ,
                                  -font         => $font10                        ,
                                  -disabled     => 1                              ,
                                  -ok           => 1                              ,
                                  -default      => 1                              , );

#------------------------------------------------------------------------------#
# Dump friends window
#------------------------------------------------------------------------------#
my $winFriends = Win32::GUI::DialogBox->new(-name        => 'winFriends'          ,
                                            -parent      => $win                  ,
                                            -text        => $STR{'winFriends'}		,
                                            -pos         => [$winPosX, $winPosY]	,
                                            -size        => [800,315]             ,
																						-minsize		 => [800,315]             ,
                                            -background  => [255, 255, 255]       ,
                                            -hasmaximize => 1                     ,
                                            -hasminimize => 1                     ,
                                            -helpbutton  => 0                     ,
                                            -resizable   => 1                     ,
                                            -topmost     => 1                     ,
                                            -dialogui    => 1                     , );
$winFriends->SetIcon($winICO);
$winFriends->AddLabel(              -name       => 'lblLogo'                      ,
                                    -size       => [128,128]                      ,
                                    -pos        => [  0,  5]                      ,
                                    -bitmap     => $friendsBmp                    ,
                                    -background => [255, 255, 255]                , );
$winFriends->AddLabel(              -name       => 'lblFriendName'                ,
                                    -size       => [ 75, 22]                      ,
                                    -pos        => [140, 18]                      ,
                                    -text       => $STR{'file'}.':'               ,
                                    -font       => $font10                        ,
                                    -background => [255, 255, 255]                , );
$winFriends->AddTextfield(          -name       => 'tfFriendName'                 ,
                                    -size       => [332, 22]                      ,
                                    -pos        => [220, 15]                      ,
                                    -tabstop    => 1                              , );
$winFriends->AddCombobox(           -name       => 'cbFriendsFormat'              ,
                                    -size       => [ 55, 22]                      ,
                                    -pos        => [555, 15]                      ,
                                    -dropdownlist => 1                            ,
                                    -vscroll    => 1                              ,
                                    -tabstop    => 1                              , );
$winFriends->cbFriendsFormat->Add(  'XLSX', 'HTML', 'TXT'                         , );
$winFriends->cbFriendsFormat->SetCurSel(0);
$winFriends->AddCheckbox(           -name       => 'chFriendsOpenOutput'          ,
                                    -size       => [165, 22]                      ,
                                    -pos        => [615, 15]                      ,
                                    -text       => $STR{'chOpenOutput'}           ,
                                    -background => [255, 255, 255]                ,
                                    -font       => $font10                        ,
                                    -tabstop    => 1                              , );
$winFriends->AddLabel(              -name       => 'lblDirSaveFriends'            ,
                                    -size       => [ 75, 22]                      ,
                                    -pos        => [140, 48]                      ,
                                    -text       => $STR{'dir'}.':'                ,
                                    -font       => $font10                        ,
                                    -background => [255, 255, 255]                , );
$winFriends->AddTextfield(          -name       => 'tfDirSaveFriends'             ,
                                    -size       => [342, 22]                      ,
                                    -pos        => [220, 45]                      ,
                                    -tabstop    => 1                              , );
$winFriends->AddButton(             -name       => 'btnDirSaveFriends'            ,
                                    -size       => [ 22, 22]                      ,
                                    -pos        => [564, 45]                      ,
                                    -bitmap     => $browseBmp                     ,
                                    -tabstop    => 1                              , );
$winFriends->AddButton(             -name       => 'btnBrowseDirSaveFriends'      ,
                                    -size       => [ 22, 22]                      ,
                                    -pos        => [588, 45]                      ,
                                    -bitmap     => $explorerBmp                   ,
                                    -tip        => $STR{'browseFolder'}           ,
                                    -tabstop    => 1                              , );
$winFriends->AddCheckbox(           -name       => 'chSaveFriendsDir'             ,
                                    -size       => [200, 20]                      ,
                                    -pos        => [615, 45]                      ,
                                    -text       => $STR{'remDir'}                 ,
                                    -background => [255, 255, 255]                ,
                                    -font       => $font10                        ,
                                    -tabstop    => 1                              , );
$winFriends->AddLabel(              -name       => 'lblFriendsOpt'                ,
                                    -size       => [ 75, 22]                      ,
                                    -pos        => [140, 76]                      ,
                                    -text       => $STR{'lblOptions'}.':'         ,
                                    -font       => $font10                        ,
                                    -background => [255, 255, 255]                , );
$winFriends->AddCheckbox(           -name       => 'chFriendsProfileIcons'        ,
                                    -size       => [170, 20]                      ,
                                    -pos        => [220, 75]                      ,
                                    -text       => $STR{'chIncludeIcons'}         ,
                                    -background => [255, 255, 255]                ,
                                    -font       => $font10                        ,
                                    -tabstop    => 1                              , );
$winFriends->AddLabel(              -name       => 'lblInProgress'                ,
                                    -size       => [200, 22]                      ,
                                    -pos        => [556, 76]                      ,
                                    -font       => $font10                        ,
                                    -foreground => [0, 153, 0]                    ,
                                    -background => [255, 255, 255]                ,
                                    -visible    => 1                              , );
$winFriends->AddButton(             -name       => 'btnFriendsRefresh'            ,
                                    -size       => [ 22, 22]                      ,
                                    -pos        => [758, 76]                      ,
                                    -bitmap     => $refresh16                     ,
                                    -tip        => $STR{'btnRefreshTip'}          ,
                                    -tabstop    => 1                              , );
$winFriends->AddGrid (              -name         => 'GridFriends'                ,
                                    -pos          => [140,100]                    ,
                                    -size         => [640,137]                    ,
                                    -fixedrows    => 1                            ,
                                    -fixedcolumns => 0                            ,
                                    -editable     => 0                            , );
$winFriends->GridFriends->SetListMode(1);
$winFriends->AddButton(             -name       => 'btnFriendsOk'                 ,
                                    -size       => [ 90, 30]                      ,
                                    -pos        => [350,242]                      ,
                                    -text       => $STR{'dump'}                   ,
                                    -font       => $font10                        ,
                                    -disabled   => 1                              ,
                                    -tabstop    => 1                              ,
                                    -ok         => 1                              ,
                                    -default    => 1                              , );

#------------------------------------------------------------------------------#
# Dump Event members window
#------------------------------------------------------------------------------#
my $winEvent = Win32::GUI::DialogBox->new( -name        => 'winEvent'           ,
                                           -parent      => $win                 ,
                                           -text        => $STR{'winEvent'}			,
                                           -pos         => [$winPosX, $winPosY] ,
                                           -size        => [745,380]            ,
                                           -background  => [255, 255, 255]      ,
                                           -hasmaximize => 0                    ,
                                           -hasminimize => 1                    ,
                                           -helpbutton  => 0                    ,
                                           -resizable   => 0                    ,
                                           -topmost     => 1                    ,
                                           -dialogui    => 1                    , );
$winEvent->SetIcon($winICO);
$winEvent->AddLabel(              -name         => 'lblLogo'                      ,
                                  -size         => [128,128]                      ,
                                  -pos          => [  0,  5]                      ,
                                  -bitmap       => $eventBmp                      ,
                                  -background   => [255, 255, 255]                , );
$winEvent->AddLabel(              -name         => 'lblEventName'                 ,
                                  -size         => [ 75, 22]                      ,
                                  -pos          => [140, 18]                      ,
                                  -text         => $STR{'file'}.':'               ,
                                  -font         => $font10                        ,
                                  -background   => [255, 255, 255]                , );
$winEvent->AddTextfield(          -name         => 'tfEventName'                  ,
                                  -size         => [260, 22]                      ,
                                  -pos          => [220, 15]                      ,
                                  -tabstop      => 1                              , );
$winEvent->AddLabel(              -name         => 'lblDirSaveEvent'              ,
                                  -size         => [ 75, 22]                      ,
                                  -pos          => [140, 48]                      ,
                                  -text         => $STR{'dir'}.':'                ,
                                  -font         => $font10                        , 
                                  -background   => [255, 255, 255]                ,);
$winEvent->AddTextfield(          -name         => 'tfDirSaveEvent'               ,
                                  -size         => [340, 22]                      ,
                                  -pos          => [220, 45]                      ,
                                  -tabstop      => 1                              , );
$winEvent->AddButton(             -name         => 'btnDirSaveEvent'              ,
                                  -size         => [ 22, 22]                      ,
                                  -pos          => [562, 45]                      ,
                                  -bitmap       => $browseBmp                     ,
                                  -tabstop      => 1                              , );
$winEvent->AddButton(             -name         => 'btnBrowseDirSaveEvent'        ,
                                  -size         => [ 22, 22]                      ,
                                  -pos          => [585, 45]                      ,
                                  -bitmap       => $explorerBmp                   ,
                                  -tip          => $STR{'browseFolder'}           ,
                                  -tabstop      => 1                              , );
$winEvent->AddCheckbox(           -name         => 'chSaveEventDir'               ,
                                  -size         => [200, 20]                      ,
                                  -pos          => [220, 73]                      ,
                                  -text         => $STR{'remDir'}                 ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        ,
                                  -tabstop      => 1                              ,
                                  -checked      => 0                              , );
$winEvent->AddLabel(              -name         => 'lblEventsOpt'                 ,
                                  -size         => [ 75, 22]                      ,
                                  -pos          => [140,101]                      ,
                                  -text         => $STR{'lblOptions'}.':'         ,
                                  -font         => $font10                        ,
                                  -background   => [255, 255, 255]                , );
$winEvent->AddCheckbox(           -name         => 'chEventProfileIcons'          ,
                                  -size         => [170, 22]                      ,
                                  -pos          => [220,100]                      ,
                                  -text         => $STR{'chIncludeIcons'}         ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        ,
                                  -tabstop      => 1                              ,
                                  -checked      => 0                              , );
$winEvent->AddCheckbox(           -name         => 'chEventOpenXLSX'              ,
                                  -size         => [170, 22]                      ,
                                  -pos          => [395,100]                      ,
                                  -text         => $STR{'openXLSX'}               ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        ,
                                  -tabstop      => 1                              ,
                                  -checked      => 0                              , );
# Event Details
$winEvent->AddLabel(              -name         => 'lblEventDetailsT'             ,
                                  -size         => [590, 22]                      ,
                                  -pos          => [140,135]                      ,
                                  -text         => $STR{'lblEventDetailsT'}       ,
                                  -font         => $fontGB                        ,
                                  -background   => [206, 221, 255]                , );
$winEvent->AddLabel(              -name         => 'lblEventID'                   ,
                                  -size         => [115, 22]                      ,
                                  -pos          => [140,168]                      ,
                                  -text         => $STR{'lblEventID'}.':'         ,
                                  -font         => $font10                        ,
                                  -background   => [255, 255, 255]                , );
$winEvent->AddTextfield(          -name         => 'tfEventID'                    ,
                                  -size         => [220, 22]                      ,
                                  -pos          => [260,165]                      ,
                                  -tabstop      => 1                              ,
                                  -readonly     => 1                              , );
$winEvent->AddLabel(              -name         => 'lblInProgress'                ,
                                  -size         => [216, 22]                      ,
                                  -pos          => [490,168]                      ,
                                  -font         => $font10                        ,
                                  -foreground   => [0, 153, 0]                    ,
                                  -background   => [255, 255, 255]                ,
                                  -visible      => 1                              , );
$winEvent->AddButton(             -name         => 'btnEventRefresh'              ,
                                  -size         => [ 22, 22]                      ,
                                  -pos          => [708,166]                      ,
                                  -bitmap       => $refresh16                     ,
                                  -tip          => $STR{'btnRefreshTip'}          ,
                                  -tabstop      => 1                              , );
$winEvent->AddLabel(              -name         => 'lblAuthorID'                  ,
                                  -size         => [115, 22]                      ,
                                  -pos          => [140,198]                      ,
                                  -text         => $STR{'lblAuthorID'}.':'        ,
                                  -font         => $font10                        ,
                                  -background   => [255, 255, 255]                , );
$winEvent->AddTextfield(          -name         => 'tfAuthorID'                   ,
                                  -size         => [220, 22]                      ,
                                  -pos          => [260,195]                      ,
                                  -tabstop      => 1                              ,
                                  -readonly     => 1                              , );
$winEvent->AddLabel(              -name         => 'lblDataURL'                   ,
                                  -size         => [115, 22]                      ,
                                  -pos          => [140,228]                      ,
                                  -text         => $STR{'lblDataURL'}.':'         ,
                                  -font         => $font10                        ,
                                  -background   => [255, 255, 255]                , );
$winEvent->AddTextfield(          -name         => 'tfDataURL'                    ,
                                  -size         => [470, 22]                      ,
                                  -pos          => [260,225]                      ,
                                  -tabstop      => 1                              ,
                                  -readonly     => 1                              , );
$winEvent->AddLabel(              -name         => 'lblGuestLists'                ,
                                  -size         => [ 75, 22]                      ,
                                  -pos          => [140,258]                      ,
                                  -text         => $STR{'lblGuestLists'}.':'      ,
                                  -font         => $font10                        ,
                                  -background   => [255, 255, 255]                , );
$winEvent->AddCheckbox(           -name         => 'chGoing'                      ,
                                  -size         => [160, 20]                      ,
                                  -pos          => [260,255]                      ,
                                  -text         => 'Going'                        ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        ,
                                  -tabstop      => 1                              ,
                                  -checked      => 0                              , );
$winEvent->AddCheckbox(           -name         => 'chMaybe'                      ,
                                  -size         => [160, 20]                      ,
                                  -pos          => [425,255]                      ,
                                  -text         => 'Maybe'                        ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        ,
                                  -tabstop      => 1                              ,
                                  -checked      => 0                              , );
$winEvent->AddCheckbox(           -name         => 'chInvited'                    ,
                                  -size         => [160, 20]                      ,
                                  -pos          => [260,278]                      ,
                                  -text         => 'Invited'                      ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        ,
                                  -tabstop      => 1                              ,
                                  -checked      => 0                              , );
$winEvent->AddCheckbox(           -name         => 'chDeclined'                   ,
                                  -size         => [160, 20]                      ,
                                  -pos          => [425,278]                      ,
                                  -text         => 'Declined'                     ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        ,
                                  -tabstop      => 1                              ,
                                  -checked      => 0                              , );
$winEvent->AddButton(             -name         => 'btnEventOk'                   ,
                                  -size         => [ 90, 30]                      ,
                                  -pos          => [360,310]                      ,
                                  -text         => $STR{'dump'}                   ,
                                  -font         => $font10                        ,
                                  -disabled     => 1                              ,
                                  -tabstop      => 1                              ,
                                  -ok           => 1                              ,
                                  -default      => 1                              , );

#------------------------------------------------------------------------------#
# Dump Contributors window
#------------------------------------------------------------------------------#
my $winContrib = Win32::GUI::DialogBox->new(  -name        => 'winContrib'          ,
                                              -parent      => $win                  ,
                                              -text        => $STR{'menu17'}				,
                                              -pos         => [$winPosX, $winPosY]	,
                                              -size        => [625,320]             ,
                                              -background  => [255, 255, 255]       ,
                                              -hasmaximize => 0                     ,
                                              -hasminimize => 1                     ,
                                              -helpbutton  => 0                     ,
                                              -resizable   => 0                     ,
                                              -topmost     => 1                     ,
                                              -dialogui    => 1                     , );
$winContrib->SetIcon($winICO);
$winContrib->AddLabel(            -name       => 'lblLogo'                      ,
                                  -size       => [128,128]                      ,
                                  -pos        => [  0,  5]                      ,
                                  -bitmap     => $contribBmp                    ,
                                  -background => [255, 255, 255]                , );
$winContrib->AddLabel(            -name       => 'lblContribName'               ,
                                  -size       => [ 70, 22]                      ,
                                  -pos        => [140, 18]                      ,
                                  -text       => $STR{'file'}.':'               ,
                                  -font       => $font10                        ,
                                  -background => [255, 255, 255]                , );
$winContrib->AddTextfield(        -name       => 'tfContribName'                ,
                                  -size       => [260, 22]                      ,
                                  -pos        => [220, 15]                      ,
                                  -tabstop    => 1                              , );
$winContrib->AddLabel(            -name       => 'lblDirSaveContrib'            ,
                                  -size       => [ 70, 22]                      ,
                                  -pos        => [140, 48]                      ,
                                  -text       => $STR{'dir'}.':'                ,
                                  -font       => $font10                        ,
                                  -background => [255, 255, 255]                , );
$winContrib->AddTextfield(        -name       => 'tfDirSaveContrib'             ,
                                  -size       => [342, 22]                      ,
                                  -pos        => [220, 45]                      ,
                                  -tabstop    => 1                              , );
$winContrib->AddButton(           -name       => 'btnDirSaveContrib'            ,
                                  -size       => [ 22, 22]                      ,
                                  -pos        => [564, 45]                      ,
                                  -bitmap     => $browseBmp                     ,
                                  -tabstop    => 1                              , );
$winContrib->AddButton(           -name       => 'btnBrowseDirSaveContrib'      ,
                                  -size       => [ 22, 22]                      ,
                                  -pos        => [587, 45]                      ,
                                  -bitmap     => $explorerBmp                   ,
                                  -tip        => $STR{'browseFolder'}           ,
                                  -tabstop    => 1                              , );
$winContrib->AddCheckbox(         -name       => 'chSaveContribDir'             ,
                                  -size       => [200, 20]                      ,
                                  -pos        => [220, 72]                      ,
                                  -text       => $STR{'remDir'}                 ,
                                  -background => [255, 255, 255]                ,
                                  -font       => $font10                        ,
                                  -tabstop    => 1                              ,
                                  -checked    => 0                              , );

# Types section
$winContrib->AddLabel(            -name       => 'lblContribCat'                ,
                                  -size       => [470, 22]                      ,
                                  -pos        => [140,102]                      ,
                                  -text       => $STR{'lblContribTypes'}        ,
                                  -font       => $fontGB                        ,
                                  -background => [206, 221, 255]                , );
$winContrib->AddCheckbox(         -name       => 'chContribComments'            ,
                                  -size       => [105, 20]                      ,
                                  -pos        => [140,132]                      ,
                                  -text       => $STR{'chContribComments'}      ,
                                  -background => [255, 255, 255]                ,
                                  -font       => $font10                        ,
                                  -tabstop    => 1                              ,
                                  -checked    => 0                              , );
$winContrib->AddCheckbox(         -name       => 'chContribLikes'               ,
                                  -size       => [ 80, 20]                      ,
                                  -pos        => [250,132]                      ,
                                  -text       => $STR{'chContribLikes'}         ,
                                  -background => [255, 255, 255]                ,
                                  -font       => $font10                        ,
                                  -tabstop    => 1                              ,
                                  -checked    => 0                              , );
$winContrib->AddCheckbox(         -name       => 'chContribVPosts'              ,
                                  -size       => [250, 20]                      ,
                                  -pos        => [335,132]                      ,
                                  -text       => $STR{'chContribVPosts'}        ,
                                  -background => [255, 255, 255]                ,
                                  -font       => $font10                        ,
                                  -tabstop    => 1                              ,
                                  -checked    => 0                              , );
# Options section
$winContrib->AddLabel(            -name       => 'lblContribOpt'                ,
                                  -size       => [470, 22]                      ,
                                  -pos        => [140,162]                      ,
                                  -text       => $STR{'lblOptions'}             ,
                                  -font       => $fontGB                        ,
                                  -background => [206, 221, 255]                , );
$winContrib->AddCheckbox(         -name       => 'chContribProfileIcons'        ,
                                  -size       => [170, 22]                      ,
                                  -pos        => [140,192]                      ,
                                  -text       => $STR{'chIncludeIcons'}         ,
                                  -background => [255, 255, 255]                ,
                                  -font       => $font10                        ,
                                  -checked    => 0                              , );
$winContrib->AddCheckbox(         -name       => 'chContribOpenXLSX'            ,
                                  -size       => [210, 22]                      ,
                                  -pos        => [325,192]                      ,
                                  -text       => $STR{'openXLSX'}               ,
                                  -background => [255, 255, 255]                ,
                                  -font       => $font10                        ,
                                  -checked    => 0                              , );
$winContrib->AddCheckbox(         -name       => 'chContribDontScrollVPosts'    ,
                                  -size       => [300, 22]                      ,
                                  -pos        => [140,217]                      ,
                                  -text       => $STR{'dontScrollVPosts'}       ,
                                  -background => [255, 255, 255]                ,
                                  -font       => $font10                        ,
                                  -checked    => 0                              ,
                                  -disabled   => 1                              , );
$winContrib->AddButton(           -name       => 'btnContribOk'                 ,
                                  -size       => [ 85, 30]                      ,
                                  -pos        => [310,250]                      ,
                                  -text       => $STR{'dump'}                   ,
                                  -font       => $font10                        ,
                                  -disabled   => 1                              ,
                                  -tabstop    => 1                              ,
                                  -ok         => 1                              ,
                                  -default    => 1                              , );

#------------------------------------------------------------------------------#
# Dump Group Members window
#------------------------------------------------------------------------------#
my $winGroupMembers = Win32::GUI::DialogBox->new( -name        => 'winGroupMembers'       ,
																									-parent      => $win                    ,
																									-text        => $STR{'winGroupMembers'} ,
																									-pos         => [$winPosX, $winPosY]		,
																									-size        => [800,315]               ,
																									-background  => [255, 255, 255]         ,
																									-hasmaximize => 0                       ,
																									-hasminimize => 1                       ,
																									-helpbutton  => 0                       ,
																									-resizable   => 0                       ,
																									-topmost     => 1                       ,
																									-dialogui    => 1                       , );
$winGroupMembers->SetIcon($winICO);
$winGroupMembers->AddLabel(         -name       => 'lblLogo'                      ,
                                    -size       => [128,128]                      ,
                                    -pos        => [  0,  5]                      ,
                                    -bitmap     => $eventBmp               				,
                                    -background => [255, 255, 255]                , );
$winGroupMembers->AddLabel(         -name       => 'lblGroupMembersName'          ,
                                    -size       => [ 75, 22]                      ,
                                    -pos        => [140, 18]                      ,
                                    -text       => $STR{'file'}.':'               ,
                                    -font       => $font10                        ,
                                    -background => [255, 255, 255]                , );
$winGroupMembers->AddTextfield(     -name       => 'tfGroupMembersName'           ,
                                    -size       => [332, 22]                      ,
                                    -pos        => [220, 15]                      ,
                                    -tabstop    => 1                              , );
$winGroupMembers->AddCombobox(      -name       => 'cbGroupMembersFormat'         ,
                                    -size       => [ 55, 22]                      ,
                                    -pos        => [555, 15]                      ,
                                    -dropdownlist => 1                            ,
                                    -vscroll    => 1                              ,
                                    -tabstop    => 1                              , );
$winGroupMembers->cbGroupMembersFormat->Add('XLSX', 'HTML', 'TXT', );
$winGroupMembers->cbGroupMembersFormat->SetCurSel(0);
$winGroupMembers->AddCheckbox(      -name       => 'chGroupMembersOpenOutput'     ,
                                    -size       => [165, 22]                      ,
                                    -pos        => [615, 15]                      ,
                                    -text       => $STR{'chOpenOutput'}           ,
                                    -background => [255, 255, 255]                ,
                                    -font       => $font10                        ,
                                    -tabstop    => 1                              , );
$winGroupMembers->AddLabel(         -name       => 'lblDirSaveGroupMembers'       ,
                                    -size       => [ 75, 22]                      ,
                                    -pos        => [140, 48]                      ,
                                    -text       => $STR{'dir'}.':'                ,
                                    -font       => $font10                        ,
                                    -background => [255, 255, 255]                , );
$winGroupMembers->AddTextfield(     -name       => 'tfDirSaveGroupMembers'        ,
                                    -size       => [342, 22]                      ,
                                    -pos        => [220, 45]                      ,
                                    -tabstop    => 1                              , );
$winGroupMembers->AddButton(        -name       => 'btnDirSaveGroupMembers'       ,
                                    -size       => [ 22, 22]                      ,
                                    -pos        => [564, 45]                      ,
                                    -bitmap     => $browseBmp                     ,
                                    -tabstop    => 1                              , );
$winGroupMembers->AddButton(        -name       => 'btnBrowseDirSaveGroupMembers' ,
                                    -size       => [ 22, 22]                      ,
                                    -pos        => [588, 45]                      ,
                                    -bitmap     => $explorerBmp                   ,
                                    -tip        => $STR{'browseFolder'}           ,
                                    -tabstop    => 1                              , );
$winGroupMembers->AddCheckbox(      -name       => 'chSaveGroupMembersDir'        ,
                                    -size       => [200, 20]                      ,
                                    -pos        => [615, 45]                      ,
                                    -text       => $STR{'remDir'}                 ,
                                    -background => [255, 255, 255]                ,
                                    -font       => $font10                        ,
                                    -tabstop    => 1                              , );
$winGroupMembers->AddLabel(         -name       => 'lblGroupMembersOpt'           ,
                                    -size       => [ 75, 22]                      ,
                                    -pos        => [140, 76]                      ,
                                    -text       => $STR{'lblOptions'}.':'         ,
                                    -font       => $font10                        ,
                                    -background => [255, 255, 255]                , );
$winGroupMembers->AddCheckbox(      -name       => 'chGroupMembersProfileIcons'   ,
                                    -size       => [170, 20]                      ,
                                    -pos        => [220, 75]                      ,
                                    -text       => $STR{'chIncludeIcons'}         ,
                                    -background => [255, 255, 255]                ,
                                    -font       => $font10                        ,
                                    -tabstop    => 1                              , );
$winGroupMembers->AddButton(        -name       => 'btnGroupMembersRefresh'       ,
                                    -size       => [ 22, 22]                      ,
                                    -pos        => [763, 73]                      ,
                                    -bitmap     => $refresh16                     ,
                                    -tip        => $STR{'btnRefreshTip'}          ,
                                    -tabstop    => 1                              , );
$winGroupMembers->AddGrid (         -name         => 'GridGroupMembers'           ,
																		-pos          => [140,100]                    ,
																		-size         => [645,145]                    ,
																		-fixedrows    => 1                            ,
																		-fixedcolumns => 0                            ,
																		-editable     => 0                            , );
$winGroupMembers->GridGroupMembers->SetListMode(1);
$winGroupMembers->AddButton(        -name       => 'btnGroupMembersOk'            ,
                                    -size       => [ 90, 30]                      ,
                                    -pos        => [355,250]                      ,
                                    -text       => $STR{'dump'}                   ,
                                    -font       => $font10                        ,
                                    -disabled   => 1                              ,
                                    -tabstop    => 1                              ,
                                    -ok         => 1                              ,
                                    -default    => 1                              , );

#------------------------------------------------------------------------------#
# Dump Chat window
#------------------------------------------------------------------------------#
my $winChat = Win32::GUI::DialogBox->new(  -name        => 'winChat'            ,
                                           -parent      => $win									,
                                           -text        => $STR{'winChat'}			,
                                           -pos         => [$winPosX, $winPosY]	,
                                           -size        => [665,305]            ,
                                           -background  => [255, 255, 255]      ,
                                           -hasmaximize => 0                    ,
                                           -hasminimize => 1                    ,
                                           -helpbutton  => 0                    ,
                                           -resizable   => 0                    ,
                                           -topmost     => 1                    ,
                                           -dialogui    => 1                    , );
$winChat->SetIcon($winICO);
$winChat->AddLabel(               -name       => 'lblLogo'                      ,
                                  -size       => [128,128]                      ,
                                  -pos        => [  0,  5]                      ,
                                  -bitmap     => $chatBmp                       ,
                                  -background => [255, 255, 255]                , );
$winChat->AddLabel(               -name       => 'lblChatName'                  ,
                                  -size       => [ 70, 22]                      ,
                                  -pos        => [140, 18]                      ,
                                  -text       => $STR{'file'}.':'               ,
                                  -font       => $font10                        ,
                                  -background => [255, 255, 255]                , );
$winChat->AddTextfield(           -name       => 'tfChatName'                   ,
                                  -size       => [260, 22]                      ,
                                  -pos        => [220, 15]                      ,
                                  -tabstop    => 1                              , );
$winChat->AddLabel(               -name       => 'lblDirSaveChat'               ,
                                  -size       => [ 70, 22]                      ,
                                  -pos        => [140, 48]                      ,
                                  -text       => $STR{'dir'}.':'                ,
                                  -font       => $font10                        ,
                                  -background => [255, 255, 255]                , );
$winChat->AddTextfield(           -name       => 'tfDirSaveChat'                ,
                                  -size       => [383, 22]                      ,
                                  -pos        => [220, 45]                      ,
                                  -tabstop    => 1                              , );
$winChat->AddButton(              -name       => 'btnDirSaveChat'               ,
                                  -size       => [ 22, 22]                      ,
                                  -pos        => [605, 45]                      ,
                                  -bitmap     => $browseBmp                     ,
                                  -tabstop    => 1                              , );
$winChat->AddButton(              -name       => 'btnBrowseDirSaveChat'         ,
                                  -size       => [ 22, 22]                      ,
                                  -pos        => [628, 45]                      ,
                                  -bitmap     => $explorerBmp                   ,
                                  -tip        => $STR{'browseFolder'}           ,
                                  -tabstop    => 1                              , );
$winChat->AddCheckbox(            -name       => 'chSaveChatDir'                ,
                                  -size       => [200, 20]                      ,
                                  -pos        => [220, 72]                      ,
                                  -text       => $STR{'remDir'}                 ,
                                  -background => [255, 255, 255]                ,
                                  -font       => $font10                        ,
                                  -tabstop    => 1                              ,
                                  -checked    => 0                              , );
# Options
$winChat->AddLabel(               -name       => 'lblChatOpt'                   ,
                                  -size       => [510, 22]                      ,
                                  -pos        => [140,100]                      ,
                                  -text       => $STR{'lblOptions'}             ,
                                  -font       => $fontGB                        ,
                                  -background => [206, 221, 255]                , );
$winChat->AddRadioButton(         -name       => 'rbChatNormalMode'             ,
                                  -size       => [125, 22]                      ,
                                  -pos        => [140,125]                      ,
                                  -background => [255, 255, 255]                ,
                                  -text       => $STR{'rbChatNormalMode'}       ,
                                  -font       => $font10                        ,
                                  -tabstop    => 1                              ,
                                  -checked    => 1                              ,
                                  -group      => 1                              , );
$winChat->AddRadioButton(         -name       => 'rbChatSafeMode'               ,
                                  -size       => [140, 22]                      ,
                                  -pos        => [270,125]                      ,
                                  -background => [255, 255, 255]                ,
                                  -text       => $STR{'chSafeMode'}             ,
                                  -font       => $font10                        ,
                                  -tabstop    => 1                              ,
                                  -checked    => 0                              , );
$winChat->AddButton(              -name       => 'btnChatRefresh'               ,
                                  -size       => [ 22, 22]                      ,
                                  -pos        => [628,125]                      ,
                                  -bitmap     => $refresh16                     ,
                                  -tip        => $STR{'btnRefreshTip'}          ,
                                  -tabstop    => 1                              , );
$winChat->AddLabel(               -name       => 'lblChatDownload'              ,
                                  -size       => [ 75, 22]                      ,
                                  -pos        => [140,155]                      ,
                                  -text       => $STR{'download'}.':'           ,
                                  -font       => $font10                        ,
                                  -background => [255, 255, 255]                , );
$winChat->AddCheckbox(            -name       => 'chDownloadImg'                ,
                                  -size       => [100, 20]                      ,
                                  -pos        => [220,155]                      ,
                                  -text       => $STR{'chDownloadImg'}          ,
                                  -background => [255, 255, 255]                ,
                                  -font       => $font10                        ,
                                  -tabstop    => 1                              ,
                                  -checked    => 0                              , );
$winChat->AddCheckbox(            -name       => 'chDownloadAD'                 ,
                                  -size       => [170, 20]                      ,
                                  -pos        => [325, 155]                     ,
                                  -text       => $STR{'chDownloadAD'}           ,
                                  -background => [255, 255, 255]                ,
                                  -font       => $font10                        ,
                                  -tabstop    => 1                              ,
                                  -checked    => 0                              , );
$winChat->AddCheckbox(            -name       => 'chDownloadVid'                ,
                                  -size       => [105, 20]                      ,
                                  -pos        => [500,155]                      ,
                                  -text       => $STR{'chDownloadVid'}          ,
                                  -background => [255, 255, 255]                ,
                                  -font       => $font10                        ,
                                  -tabstop    => 1                              ,
                                  -checked    => 0                              , );
$winChat->AddLabel(               -name       => 'lblChatDates'                 ,
                                  -size       => [ 75, 22]                      ,
                                  -pos        => [140,180]                      ,
                                  -text       => $STR{'dates'}.':'              ,
                                  -font       => $font10                        ,
                                  -background => [255, 255, 255]                , );
$winChat->AddRadioButton(         -name       => 'rbChatDatesAll'               ,
                                  -size       => [ 50, 22]                      ,
                                  -pos        => [220,180]                      ,
                                  -background => [255, 255, 255]                ,
                                  -text       => $STR{'rbChatDatesAll'}         ,
                                  -font       => $font10                        ,
                                  -tabstop    => 1                              ,
                                  -checked    => 1                              ,
                                  -group      => 1                              , );
$winChat->AddRadioButton(         -name       => 'rbChatDatesRange'             ,
                                  -size       => [ 60, 22]                      ,
                                  -pos        => [220,200]                      ,
                                  -background => [255, 255, 255]                ,
                                  -text       => $STR{'rbChatDatesRange'}       ,
                                  -font       => $font10                        ,
                                  -tabstop    => 1                              , );
$winChat->AddLabel(               -name       => 'lblChatDatesRangeS'           ,
                                  -size       => [ 50, 22]                      ,
                                  -pos        => [285,203]                      ,
                                  -text       => $STR{'start'}.':'              ,
                                  -align      => 'right'                        ,
                                  -font       => $font10                        ,
                                  -background => [255, 255, 255]                , );
$winChat->AddDateTime(            -name       => 'dtChatDatesRangeS'            ,
                                  -size       => [ 90, 22]                      ,
                                  -pos        => [340,200]                      ,
                                  -font       => $font10                        ,
                                  -background => [255, 255, 255]                ,
                                  -format     => 'shortdate'                    ,
                                  -tabstop    => 1                              , );
$winChat->AddLabel(               -name       => 'lblChatDatesRangeE'           ,
                                  -size       => [ 40, 22]                      ,
                                  -pos        => [435,203]                      ,
                                  -text       => $STR{'end'}.':'                ,
                                  -align      => 'right'                        ,
                                  -font       => $font10                        ,
                                  -background => [255, 255, 255]                , );
$winChat->AddDateTime(            -name       => 'dtChatDatesRangeE'            ,
                                  -size       => [ 90, 22]                      ,
                                  -pos        => [480,200]                      ,
                                  -font       => $font10                        ,
                                  -background => [255, 255, 255]                ,
                                  -format     => 'shortdate'                    ,
                                  -tabstop    => 1                              , );

$winChat->AddButton(              -name       => 'btnChatOk'                    ,
                                  -size       => [ 85, 30]                      ,
                                  -pos        => [300,235]                      ,
                                  -text       => $STR{'dump'}                   ,
                                  -font       => $font10                        ,
                                  -disabled   => 1                              ,
                                  -tabstop    => 1                              ,
                                  -ok         => 1                              ,
                                  -default    => 1                              , );

#------------------------------------------------------------------------------#
# Dump Vocal Messages window
#------------------------------------------------------------------------------#
my $winVocalMsg = Win32::GUI::DialogBox->new( -name        => 'winVocalMsg'           ,
																							-parent      => $win                    ,
																							-text        => $STR{'winVocalMsg'}     ,
																							-pos         => [$winPosX, $winPosY]		,
																							-size        => [640,170]               ,
																							-background  => [255, 255, 255]         ,
																							-hasmaximize => 0                       ,
																							-hasminimize => 1                       ,
																							-helpbutton  => 0                       ,
																							-resizable   => 0                       ,
																							-topmost     => 1                       ,
																							-dialogui    => 1                       , );
$winVocalMsg->SetIcon($winICO);
$winVocalMsg->AddLabel(         		-name       => 'lblLogo'                      ,
                                    -size       => [128,128]                      ,
                                    -pos        => [  0,  5]                      ,
                                    -bitmap     => $chatBmp               				,
                                    -background => [255, 255, 255]                , );
$winVocalMsg->AddLabel(         		-name       => 'lblVocalMsgName'          		,
                                    -size       => [ 75, 22]                      ,
                                    -pos        => [140, 18]                      ,
                                    -text       => $STR{'file'}.':'               ,
                                    -font       => $font10                        ,
                                    -background => [255, 255, 255]                , );
$winVocalMsg->AddTextfield(     		-name       => 'tfVocalMsgName'           		,
                                    -size       => [342, 22]                      ,
                                    -pos        => [220, 15]                      ,
                                    -tabstop    => 1                              , );
$winVocalMsg->AddButton(        		-name       => 'btnVocalMsgRefresh'       		,
                                    -size       => [ 22, 22]                      ,
                                    -pos        => [588, 15]                      ,
                                    -bitmap     => $refresh16                     ,
                                    -tip        => $STR{'btnRefreshTip'}          ,
                                    -tabstop    => 1                              , );
$winVocalMsg->AddLabel(         		-name       => 'lblDirSaveVocalMsg'       		,
                                    -size       => [ 75, 22]                      ,
                                    -pos        => [140, 48]                      ,
                                    -text       => $STR{'dir'}.':'                ,
                                    -font       => $font10                        ,
                                    -background => [255, 255, 255]                , );
$winVocalMsg->AddTextfield(     		-name       => 'tfDirSaveVocalMsg'        		,
                                    -size       => [342, 22]                      ,
                                    -pos        => [220, 45]                      ,
                                    -tabstop    => 1                              , );
$winVocalMsg->AddButton(        		-name       => 'btnDirSaveVocalMsg'       		,
                                    -size       => [ 22, 22]                      ,
                                    -pos        => [564, 45]                      ,
                                    -bitmap     => $browseBmp                     ,
                                    -tabstop    => 1                              , );
$winVocalMsg->AddButton(        		-name       => 'btnBrowseDirSaveVocalMsg' 		,
                                    -size       => [ 22, 22]                      ,
                                    -pos        => [588, 45]                      ,
                                    -bitmap     => $explorerBmp                   ,
                                    -tip        => $STR{'browseFolder'}           ,
                                    -tabstop    => 1                              , );
$winVocalMsg->AddCheckbox(      		-name       => 'chSaveVocalMsgDir'        		,
                                    -size       => [200, 20]                      ,
                                    -pos        => [220, 75]                      ,
                                    -text       => $STR{'remDir'}                 ,
                                    -background => [255, 255, 255]                ,
                                    -font       => $font10                        ,
                                    -tabstop    => 1                              , );
$winVocalMsg->AddCheckbox(      		-name       => 'chVocalMsgOpenOutput'     		,
                                    -size       => [165, 22]                      ,
                                    -pos        => [425, 75]                      ,
                                    -text       => $STR{'openHTML'}               ,
                                    -background => [255, 255, 255]                ,
                                    -font       => $font10                        ,
                                    -tabstop    => 1                              , );
$winVocalMsg->AddButton(        		-name       => 'btnVocalMsgOk'            		,
                                    -size       => [ 90, 30]                      ,
                                    -pos        => [305,105]                      ,
                                    -text       => $STR{'dump'}                   ,
                                    -font       => $font10                        ,
                                    -disabled   => 1                              ,
                                    -tabstop    => 1                              ,
                                    -ok         => 1                              ,
                                    -default    => 1                              , );

#------------------------------------------------------------------------------#
# Config window
#------------------------------------------------------------------------------#
my $winConfig = Win32::GUI::DialogBox->new( -name        => 'winConfig'           ,
                                            -parent      => $win                  ,
                                            -text        => $STR{'winConfig'}			,
                                            -pos         => [$winPosX, $winPosY]	,
                                            -size        => [650,300]             ,
                                            -background  => [255, 255, 255]       ,
                                            -hasmaximize => 0                     ,
                                            -hasminimize => 0                     ,
                                            -helpbutton  => 0                     ,
                                            -resizable   => 0                     ,
                                            -topmost     => 1                     ,
                                            -dialogui    => 1                     , );
$winConfig->SetIcon($winICO);
$winConfig->AddLabel(     -name         => 'lblLogo'             ,
                          -size         => [128,128]             ,
                          -pos          => [  0,  5]             ,
                          -bitmap       => $configBmp            ,
                          -background   => [255, 255, 255]       , );
# Tabstrip
$winConfig->AddTabStrip(            -name         => 'configTab'           ,
                                    -size         => [500,260]             ,
                                    -pos          => [140,  5]             ,
                                    -fixedwidth   => 1                     ,
                                    -tabstop      => 1                     ,
                                    -background   => [255, 255, 255]       , );
$winConfig->configTab->InsertItem(  -text         => $STR{'lblGenOpt'}     , );
$winConfig->configTab->InsertItem(  -text         => $STR{'lblScrollOpt'}  , );
$winConfig->configTab->InsertItem(  -text         => $STR{'lblExpOpt'}     , );
$winConfig->configTab->SetItemSize(126,20);
# General options
# Tool Section
$winConfig->AddLabel(     -name        => 'lblTool'             ,
                          -size        => [ 80, 22]             ,
                          -pos         => [150, 38]             ,
                          -background  => [255, 255, 255]       ,
                          -foreground  => [  0, 102, 204]       ,
                          -text        => $STR{'Tool'}.':'      ,
                          -font        => $fontGB2              , );
$winConfig->AddButton(    -name        => 'btnExportLang'       ,
                          -size        => [125, 24]             ,
                          -pos         => [150, 68]             ,
                          -text        => $STR{'btnExportLang'} ,
                          -font        => $font10               ,
                          -tabstop     => 1                     , );
$winConfig->AddButton(    -name        => 'btnCheckUpdate'      ,
                          -size        => [125, 24]             ,
                          -pos         => [150, 98]             ,
                          -text        => $STR{'menu13'}        ,
                          -font        => $font10               , );
$winConfig->AddCheckbox(  -name        => 'chAutoUpdate'        ,
                          -size        => [310, 20]             ,
                          -pos         => [285,100]             ,
                          -text        => $STR{'chAutoUpdate'}  ,
                          -background  => [255, 255, 255]       ,
                          -font        => $font10               ,
                          -tabstop     => 1                     ,
                          -checked     => 1                     , );
# Functions section
$winConfig->AddLabel(     -name        => 'lblFunctions'        ,
                          -size        => [120, 22]             ,
                          -pos         => [150,140]             ,
                          -background  => [255, 255, 255]       ,
                          -foreground  => [  0, 102, 204]       ,
                          -text        => $STR{'Functions'}.':' ,
                          -font        => $fontGB2              , );
$winConfig->AddCheckbox(  -name        => 'chRememberPos'       ,
                          -size        => [250, 20]             ,
                          -pos         => [285,140]             ,
                          -text        => $STR{'chRememberPos'} ,
                          -background  => [255, 255, 255]       ,
                          -font        => $font10               , );
$winConfig->AddLabel(     -name        => 'lblTimeToWait'       ,
                          -size        => [115, 22]             ,
                          -pos         => [150,173]             ,
                          -text        => $STR{'lblTimeToWait'}.':',
                          -font        => $font10               ,
                          -background  => [255, 255, 255]       , );
$winConfig->AddTextfield( -name        => 'tfTimeToWait'        ,
                          -size        => [ 40, 22]             ,
                          -pos         => [270,170]             ,
                          -tip         => $STR{'tfTimeToWaitTip'}, );
$winConfig->AddUpDown(    -name        => 'upTimeToWait'        ,
                          -tabstop     => 1                     , );
$winConfig->upTimeToWait->SetRange(1,10);
$winConfig->AddLabel(     -name        => 'lblTimeToWait2'      ,
                          -size        => [ 60, 22]             ,
                          -pos         => [313,173]             ,
                          -text        => $STR{'lblTimeToWait2'},
                          -font        => $font10               ,
                          -background  => [255, 255, 255]       , );
$winConfig->AddLabel(     -name        => 'lblNbrResume'        ,
                          -size        => [135, 22]             ,
                          -pos         => [400,173]             ,
                          -text        => $STR{'lblNbrResume'}.':',
                          -font        => $font10               ,
                          -background  => [255, 255, 255]       , );
$winConfig->AddTextfield( -name        => 'tfNbrResume'         ,
                          -size        => [ 40, 22]             ,
                          -pos         => [540,170]             ,
                          -tip         => $STR{'tfNbrResumeTip'}, );
$winConfig->AddUpDown(    -name        => 'upNbrResume'         ,
                          -tabstop     => 1                     , );
$winConfig->upNbrResume->SetRange(1,99);
$winConfig->AddCheckbox(  -name        => 'chDelTempFiles'      ,
                          -size        => [230, 20]             ,
                          -pos         => [150,200]             ,
                          -text        => $STR{'chDelTempFiles'},
                          -background  => [255, 255, 255]       ,
                          -font        => $font10               ,
                          -tabstop     => 1                     ,
                          -checked     => 1                     , );
$winConfig->AddCheckbox(  -name        => 'chDebugLogging'      ,
                          -size        => [200, 20]             ,
                          -pos         => [400,200]             ,
                          -text        => $STR{'chDebugLogging'},
                          -background  => [255, 255, 255]       ,
                          -font        => $font10               ,
                          -tabstop     => 1                     , );
$winConfig->AddLabel(     -name        => 'lblCharset'          ,
                          -size        => [ 70, 22]             ,
                          -pos         => [150,233]             ,
                          -text        => $STR{'lblCharset'}.':',
                          -font        => $font10               ,
                          -background  => [255, 255, 255]       , );
$winConfig->AddCombobox(  -name        => 'cbCharset'           ,
                          -size        => [110,100]             ,
                          -pos         => [235,230]             ,
                          -font        => $font10               ,
                          -dropdown    => 1                     ,
                          -vscroll     => 1                     ,
                          -tabstop     => 1                     , );
$winConfig->cbCharset->Add('cp1252'     , 'iso-8859-1' , 'iso-8859-2' , 'iso-8859-3' ,
                           'iso-8859-4' , 'iso-8859-5' , 'iso-8859-6' , 'iso-8859-7' ,
                           'iso-8859-8' , 'iso-8859-9' , 'iso-8859-10', 'iso-8859-11', 
                           'iso-8859-13', 'iso-8859-14', 'iso-8859-15', 'iso-8859-16', );
$winConfig->AddButton(     -name       => 'btnOpenLog'          ,
                           -size       => [150, 24]             ,
                           -pos        => [400,230]             ,
                           -text       => $STR{'OpenLog'}       ,
                           -font       => $font10               ,
                           -visible    => 0                     , );
# Scroll options
$winConfig->AddLabel(       -name        => 'lblMaxScrollChat'    ,
                            -size        => [165, 22]             ,
                            -pos         => [150, 48]             ,
                            -text        => $STR{'lblMaxLoading'}.':',
                            -font        => $font10               ,
                            -background  => [255, 255, 255]       ,
                            -visible     => 0                     , );
$winConfig->AddRadioButton( -name        => 'rbMaxScrollChatByPage',
                            -size        => [100, 22]             ,
                            -pos         => [320, 45]             ,
                            -background  => [255, 255, 255]       ,
                            -text        => $STR{'rbMaxScrollByPage'}.':' ,
                            -font        => $font10               ,
                            -checked     => 1                     ,
                            -group       => 1                     ,
                            -visible     => 0                     , );
$winConfig->AddTextfield(   -name        => 'tfMaxScrollChat'     ,
                            -size        => [ 40, 22]             ,
                            -pos         => [425, 45]             ,
                            -tip         => $STR{'tfMaxScrollByPageTip'},
                            -number      => 1                     ,
                            -tabstop     => 1                     ,
                            -visible     => 0                     , );
$winConfig->AddUpDown(      -name        => 'upMaxScrollChat'     ,
                            -tabstop     => 1                     , );
$winConfig->upMaxScrollChat->SetRange(0,99);
$winConfig->AddRadioButton( -name        => 'rbMaxScrollChatByDate',
                            -size        => [100, 22]             ,
                            -pos         => [320, 75]             ,
                            -background  => [255, 255, 255]       ,
                            -text        => $STR{'rbMaxScrollByDate'}.':' ,
                            -font        => $font10               ,
                            -visible     => 0                     , );
$winConfig->AddDateTime(    -name        => 'dtMaxScrollChatByDate',
                            -size        => [ 90, 22]             ,
                            -pos         => [425, 75]             ,
                            -font        => $font10               ,
                            -background  => [255, 255, 255]       ,
                            -format      => 'shortdate'           ,
                            -tip         => $STR{'tfMaxScrollByDateTip'},
                            -visible     => 0                     , );
$winConfig->AddLabel(       -name        => 'lblMaxScroll'        ,
                            -size        => [165, 22]             ,
                            -pos         => [150,108]             ,
                            -text        => $STR{'lblMaxScroll'}.':',
                            -font        => $font10               ,
                            -background  => [255, 255, 255]       ,
                            -visible     => 0                     , );
$winConfig->AddRadioButton( -name        => 'rbMaxScrollByPage'   ,
                            -size        => [100, 22]             ,
                            -pos         => [320,105]             ,
                            -background  => [255, 255, 255]       ,
                            -text        => $STR{'rbMaxScrollByPage'}.':' ,
                            -font        => $font10               ,
                            -checked     => 1                     ,
                            -group       => 1                     ,
                            -visible     => 0                     , );
$winConfig->AddTextfield(   -name        => 'tfMaxScroll'         ,
                            -size        => [ 40, 22]             ,
                            -pos         => [425,105]             ,
                            -tip         => $STR{'tfMaxScrollByPageTip'},
                            -number      => 1                     ,
                            -tabstop     => 1                     ,
                            -visible     => 0                     , );
$winConfig->AddUpDown(      -name        => 'upMaxScroll'         ,
                            -tabstop     => 1                     , );
$winConfig->upMaxScroll->SetRange(0,99);
$winConfig->AddRadioButton( -name        => 'rbMaxScrollByDate'   ,
                            -size        => [100, 22]             ,
                            -pos         => [320,135]             ,
                            -background  => [255, 255, 255]       ,
                            -text        => $STR{'rbMaxScrollByDate'}.':' ,
                            -font        => $font10               ,
                            -visible     => 0                     , );
$winConfig->AddDateTime(    -name        => 'dtMaxScrollByDate'   ,
                            -size        => [ 90, 22]             ,
                            -pos         => [425,135]             ,
                            -font        => $font10               ,
                            -background  => [255, 255, 255]       ,
                            -format      => 'shortdate'           ,
                            -tip         => $STR{'tfMaxScrollByDateTip'},
                            -visible     => 0                     , );
$winConfig->AddCheckbox(    -name        => 'chOptScrollTop'      ,
                            -size        => [310, 20]             ,
                            -pos         => [150,170]             ,
                            -text        => $STR{'chOptScrollTop'},
                            -background  => [255, 255, 255]       ,
                            -font        => $font10               ,
                            -tabstop     => 1                     ,
                            -checked     => 1                     , );
# Expand options
$winConfig->AddCheckbox(  -name        => 'chOptSeemore'        ,
                          -size        => [200, 20]             ,
                          -pos         => [150, 35]             ,
                          -text        => $STR{'chOptSeemore'}  ,
                          -background  => [255, 255, 255]       ,
                          -font        => $font10               ,
                          -tabstop     => 1                     ,
                          -checked     => 1                     ,
                          -visible     => 0                     , );
$winConfig->AddCheckbox(  -name        => 'chOptComments'       ,
                          -size        => [305, 20]             ,
                          -pos         => [150, 60]             ,
                          -text        => $STR{'chOptComments'} ,
                          -background  => [255, 255, 255]       ,
                          -font        => $font10               ,
                          -tabstop     => 1                     ,
                          -checked     => 1                     ,
                          -visible     => 0                     , );
$winConfig->AddCheckbox(  -name        => 'chOptPosts'          ,
                          -size        => [200, 20]             ,
                          -pos         => [150, 85]             ,
                          -text        => $STR{'chOptPosts'}    ,
                          -background  => [255, 255, 255]       ,
                          -font        => $font10               ,
                          -tabstop     => 1                     ,
                          -checked     => 1                     ,
                          -visible     => 0                     , );
$winConfig->AddCheckbox(  -name        => 'chOptTranslate'      ,
                          -size        => [200, 20]             ,
                          -pos         => [150,110]             ,
                          -text        => $STR{'chOptTranslate'},
                          -background  => [255, 255, 255]       ,
                          -font        => $font10               ,
                          -tabstop     => 1                     ,
                          -checked     => 1                     ,
                          -visible     => 0                     , );

#------------------------------------------------------------------------------#
# Progress window
#------------------------------------------------------------------------------#
my $winPb = Win32::GUI::DialogBox->new( -name        => 'winPb'                   ,
                                        -parent      => $win                      ,
                                        -text        => $STR{'winPb'}             ,
                                        -pos         => [$winPosX, $winPosY]			,
                                        -size        => [740, 180]                ,
                                        -background  => [255, 255, 255]           ,
                                        -hasmaximize => 0                         ,
                                        -hasminimize => 1                         ,
                                        -helpbutton  => 0                         ,
                                        -resizable   => 0                         ,
                                        -topmost     => 1                         ,
                                        -dialogui    => 1                         , );
$winPb->SetIcon($winICO);
$winPb->AddLabel(       -name        => 'lblLogo'        ,
                        -size        => [128,128]        ,
                        -pos         => [  0, 10]        ,
                        -bitmap      => $logoBmp         ,
                        -background  => [255, 255, 255]  , );
$winPb->AddLabel(       -name        => 'lblPbCurr1'     ,
                        -size        => [578, 22]        ,
                        -pos         => [140,  8]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb->AddProgressBar( -name        => 'pbWinPb1'       ,
                        -size        => [470, 22]        ,
                        -pos         => [140, 32]        ,
                        -smooth      => 1                , );
$winPb->AddLabel(       -name        => 'lblCount1'      ,
                        -size        => [100, 22]        ,
                        -pos         => [620, 33]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb->AddLabel(       -name        => 'lblPbCurr2'     ,
                        -size        => [578, 22]        ,
                        -pos         => [140, 60]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb->AddProgressBar( -name        => 'pbWinPb2'       ,
                        -size        => [470, 22]        ,
                        -pos         => [140, 84]        ,
                        -smooth      => 1                , );
$winPb->AddLabel(       -name        => 'lblCount2'      ,
                        -size        => [100, 22]        ,
                        -pos         => [620, 85]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb->AddButton(      -name        => 'btnCancel'      ,
                        -text        => $STR{'cancel'}   ,
                        -font        => $font10          ,
                        -size        => [ 80, 30]        ,
                        -pos         => [330,115]        ,
                        -cancel      => 1                , );

#------------------------------------------------------------------------------#
# Simple Progress window
#------------------------------------------------------------------------------#
my $winPb2 = Win32::GUI::DialogBox->new(-name        => 'winPb2'                  ,
                                        -parent      => $win                      ,
                                        -text        => $STR{'winPb'}             ,
                                        -pos         => [$winPosX, $winPosY]			,
                                        -size        => [590,175]                 ,
                                        -background  => [255, 255, 255]           ,
                                        -hasmaximize => 0                         ,
                                        -hasminimize => 1                         ,
                                        -helpbutton  => 0                         ,
                                        -resizable   => 0                         ,
                                        -topmost     => 1                         ,
                                        -dialogui    => 1                         , );
$winPb2->SetIcon($winICO);
$winPb2->AddLabel(      -name        => 'lblLogo'        ,
                        -size        => [128,128]        ,
                        -pos         => [  0,  5]        ,
                        -bitmap      => $logoBmp         ,
                        -background  => [255, 255, 255]  , );
$winPb2->AddLabel(      -name        => 'lblPbCurr'      ,
                        -size        => [350, 40]        ,
                        -pos         => [140, 30]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb2->AddLabel(      -name        => 'lblCount'       ,
                        -size        => [ 80, 22]        ,
                        -pos         => [495, 30]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb2->AddButton(     -name        => 'btnCancel2'     ,
                        -text        => $STR{'cancel'}   ,
                        -font        => $font10          ,
                        -size        => [ 80, 30]        ,
                        -pos         => [280, 80]        ,
                        -cancel      => 1                , );

#------------------------------------------------------------------------------#
# Starting program
#------------------------------------------------------------------------------#
# Center the splash and show it
$splash->Center();
$splash->Show();
Win32::GUI::DoEvents();
# Taskbar
$win->Tray->Change(-balloon_icon    => 'info'         ,
                   -balloon_title   => 'ExtractFace'  ,
                   -balloon_timeout => 5000           , );
# Header Dump albums grid
$winAlbums->GridAlbums->SetRows(1);
$winAlbums->GridAlbums->SetColumns(3); # 1: checkbox, 2: Album name, 3e: Album url
$winAlbums->GridAlbums->SetCellText(0, 0, ''        );
$winAlbums->GridAlbums->SetCellType(0, 0, GVIT_CHECK);
$winAlbums->GridAlbums->SetCellCheck(0, 0, 1);
$winAlbums->GridAlbums->SetCellText(0, 1, $STR{'albumNames'});
$winAlbums->GridAlbums->SetCellText(0, 2, $STR{'albumURLs'});
$winAlbums->GridAlbums->SetColumnWidth(0, 25);
$winAlbums->GridAlbums->SetColumnWidth(1, 80);
$winAlbums->GridAlbums->ExpandLastColumn();
# Header Dump friends grid
$winFriends->GridFriends->SetRows(1);
$winFriends->GridFriends->SetColumns(4); # 1: checkbox, 2: Category name, 3e: Category Id (hidden), 4e: Category url
$winFriends->GridFriends->SetCellText(0, 0, ''        );
$winFriends->GridFriends->SetCellType(0, 0, GVIT_CHECK);
$winFriends->GridFriends->SetCellCheck(0, 0, 1);
$winFriends->GridFriends->SetCellText(0, 1, $STR{'friendCat'});
$winFriends->GridFriends->SetCellText(0, 3, $STR{'url'});
$winFriends->GridFriends->SetColumnWidth(0, 25);
$winFriends->GridFriends->SetColumnWidth(1, 80);
$winFriends->GridFriends->SetColumnWidth(2, 0);
$winFriends->GridFriends->ExpandLastColumn();
# Header Dump Group Members grid
$winGroupMembers->GridGroupMembers->SetRows(1);
$winGroupMembers->GridGroupMembers->SetColumns(3); # 1: checkbox, 2: Category name, 3e: Category url
$winGroupMembers->GridGroupMembers->SetCellText(0, 0, ''        );
$winGroupMembers->GridGroupMembers->SetCellType(0, 0, GVIT_CHECK);
$winGroupMembers->GridGroupMembers->SetCellCheck(0, 0, 1);
$winGroupMembers->GridGroupMembers->SetCellText(0, 1, $STR{'friendCat'});
$winGroupMembers->GridGroupMembers->SetCellText(0, 2, $STR{'url'});
$winGroupMembers->GridGroupMembers->SetColumnWidth(0, 25);
$winGroupMembers->GridGroupMembers->SetColumnWidth(1, 80);
$winGroupMembers->GridGroupMembers->ExpandLastColumn();
&loadConfig(\%CONFIG);
if ($CONFIG{'AUTO_UPDATE'} == 1) { threads->create(sub { &checkUpdate(0); }); } # Auto-Update
my $API = new Win32::API('user32','GetForegroundWindow','', 'N');
Win32::GUI::DoEvents();
usleep(500000);
$splash->Hide;
# Position the window
if ($winConfig->chRememberPos->Checked() and exists($CONFIG{'MAIN_LEFT'}) and exists($CONFIG{'MAIN_TOP'})) {
  $win->Left($CONFIG{'MAIN_LEFT'});
  $win->Top($CONFIG{'MAIN_TOP'});
}
$START = 1;
if (!$CONFIG{'START_MINIMIZED'}) { $win->Show(); }
Win32::GUI::Dialog();

#--------------------------#
sub chStartMinimized_Click
#--------------------------#
{
  # Save the choice
  if ($win->chStartMinimized->Checked()) {
    $CONFIG{'START_MINIMIZED'} = 1;
    &saveConfig(\%CONFIG);
  } else {
    $CONFIG{'START_MINIMIZED'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chStartMinimized_Click

#--------------------------#
sub main_Terminate
#--------------------------#
{
  $win->Disable();  # Act as minimize, to quit, user must use the taskbar function
  $win->Hide();
  if ($THR and $THR->is_running()) { $win->Tray->ShowBalloon(); }
  return(0);

}  #--- End main_Terminate

#--------------------------#
sub main_Quit
#--------------------------#
{
  $win->Tray->Remove();
  # Remember position
  if ($winConfig->chRememberPos->Checked()) {
    my $winLeft          = $win->AbsLeft();
    my $winTop           = $win->AbsTop();
    $CONFIG{'MAIN_LEFT'} = $winLeft;
    $CONFIG{'MAIN_TOP'}  = $winTop;
    &saveConfig(\%CONFIG);
  }
  -1; # Exit signal

}  #--- End main_Quit

#--------------------------#
sub main_Minimize
#--------------------------#
{
  $win->Disable();
  $win->Hide();
  if ($THR and $THR->is_running()) { $win->Tray->ShowBalloon(); }
  return(0);

}  #--- End main_Minimize

#--------------------------#
sub Tray_DblClick
#--------------------------#
{
  $win->Enable();
  $win->Show();  

}  #--- End Tray_DblClick

#--------------------------#
sub Tray_RightClick
#--------------------------#
{
  $win->TrackPopupMenu($trayMenu->{SysTray});
  return(1);

}  #--- End Tray_Click

#--------------------------#
sub scroll
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win,$STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Start the thread
    my $nbrRetries = 0;
    my $count      = 0;
    $THR = threads->create(\&scrollThr, $nbrRetries, $count);
  }
}  #--- End scroll

#--------------------------#
sub scrollThr
#--------------------------#
{
  # Local variables
  my ($nbrRetries, $count) = @_;
  # Cancel button
  $SIG{'KILL'} = sub {
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    &winPb2_Terminate;
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'scrollTaskC'});
    threads->exit();
  };
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
    if ($msgErr =~ /problem connecting/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    } else {
      # Retry 10 times
      if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $nbrRetries++; }
      if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
        # Restart a new thread to continue
        if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $winPb2->lblPbCurr->Text($STR{'crash'}.'...'); }
        sleep(2);
        $THR = threads->create(\&scrollThr, $nbrRetries, $count);
      } else {
				my $err = (split(/ at /, $msgErr))[0];
				Win32::GUI::MessageBox($win, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
        # Turn off progress bar
        $winPb2->lblPbCurr->Text('');
        $winPb2->lblCount->Text('');
        &winPb2_Terminate;
        $win->ChangeCursor($ARROW);
        $win->Tray->Change(-tip => 'ExtractFace');
      }
    }
    threads->exit();
  };
  # First execution
  if (!$nbrRetries) {
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'scrollTaskP'}.'...');
    # Turn on progress bar
    $winPb2->Center($win);
    $winPb2->Show();
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    $win->Disable();
  }
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  if ($mech->uri() =~ /facebook.com/) {
    $winPb2->lblPbCurr->Text($STR{'scrollTaskP'}.'...');
    &scrollToBottom(\$mech, $CONFIG{'TIME_TO_WAIT'}, $count);
    # Scroll to the top
    if ($winConfig->chOptScrollTop->Checked()) { $mech->eval_in_page('window.scrollTo(0,0)'); }
    $win->Tray->Change(-tip => $STR{'scrollTaskF'});
    if (!$win->IsVisible()) {
      $win->Tray->Change( -balloon_icon  => 'info'              ,
                          -balloon_title => 'ExtractFace'       ,
                          -balloon_tip   => $STR{'scrollTaskF'} , );
      $win->Tray->ShowBalloon(1);
    }
    $win->ChangeCursor($ARROW);
  } else { Win32::GUI::MessageBox($winPb2, $STR{'warn4'}, $STR{'err1T'}, 0x40010); }
  # Turn off progress bar
  $winPb2->lblPbCurr->Text('');
  $winPb2->lblCount->Text('');
  &winPb2_Terminate;

}  #--- End scrollThr

#--------------------------#
sub expand
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    if ($winConfig->chOptSeemore->Checked()  or $winConfig->chOptPosts->Checked()    or
        $winConfig->chOptComments->Checked() or $winConfig->chOptTranslate->Checked()) {
      # Start the thread
      my $nbrRetries = 0;
      $THR = threads->create(\&expandThr, $nbrRetries);
    } else { Win32::GUI::MessageBox($win, $STR{'warn2'}, $STR{'warn2T'}, 0x40010); }
  }
}  #--- End expand

#--------------------------#
sub expandThr
#--------------------------#
{
  # Local variables
  my ($nbrRetries) = @_;
  # Cancel button
  $SIG{'KILL'} = sub {
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    &winPb2_Terminate;
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'expandTaskC'});
    threads->exit();
  };
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
    if ($msgErr =~ /problem connecting/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    } else {
      # Retry 10 times
      if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $nbrRetries++; }
      if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
        # Restart a new thread to continue
        if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $winPb2->lblPbCurr->Text($STR{'crash'}.'...'); }
        sleep(2);
        $THR = threads->create(\&expandThr, $nbrRetries);
      } else {
				my $err = (split(/ at /, $msgErr))[0];
				Win32::GUI::MessageBox($win, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
        # Turn off progress bar
        $winPb2->lblPbCurr->Text('');
        $winPb2->lblCount->Text('');
        &winPb2_Terminate;
        $win->ChangeCursor($ARROW);
        $win->Tray->Change(-tip => 'ExtractFace');
      }
    }
    threads->exit();
  };
  # First execution
  if (!$nbrRetries) {
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'expandTaskP'}.'...');
    # Turn on progress bar
    $winPb2->Center($win);
    $winPb2->Show();
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    $win->Disable();
  }
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  if ($mech->uri() =~ /facebook.com/) {
    $winPb2->lblPbCurr->Text($STR{'expandTaskP'}.'...');
    &expandContent(\$mech);
    &expandContent(\$mech); # Do it again
    
    $win->Tray->Change(-tip => $STR{'expandTaskF'});
    if (!$win->IsVisible()) {
      $win->Tray->Change( -balloon_icon  => 'info'              ,
                          -balloon_title => 'ExtractFace'       ,
                          -balloon_tip   => $STR{'expandTaskF'} , );
      $win->Tray->ShowBalloon(1);
    }
    $win->ChangeCursor($ARROW);
  } else { Win32::GUI::MessageBox($winPb2, $STR{'warn4'}, $STR{'err1T'}, 0x40010); }
  # Turn off progress bar
  $winPb2->lblPbCurr->Text('');
  $winPb2->lblCount->Text('');
  &winPb2_Terminate;

}  #--- End expandThr

#--------------------------#
sub scrollExpand
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Start the thread
    my $nbrRetries = 0;
    my $status     = 0; # If status == 1, scrolling finished
    my $count      = 0;
    $THR = threads->create(\&scrollExpandThr, $nbrRetries, $status, $count);
  }
}  #--- End scrollExpand

#--------------------------#
sub scrollExpandThr
#--------------------------#
{
  # Local variables
  my ($nbrRetries, $status, $count) = @_;
  # Cancel button
  $SIG{'KILL'} = sub {
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    &winPb2_Terminate;
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'scrExpTaskC'});
    threads->exit();
  };
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
    $win->Tray->Change(-tip => 'ExtractFace');
    if ($msgErr =~ /problem connecting/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
    } else {
      # Retry 10 times
      if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $nbrRetries++; }
      if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
        # Restart a new thread to continue
        if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $winPb2->lblPbCurr->Text($STR{'crash'}.'...'); }
        sleep(2);
        $THR = threads->create(\&scrollExpandThr, $nbrRetries, $status, $count);
      } else {
				my $err = (split(/ at /, $msgErr))[0];
				Win32::GUI::MessageBox($win, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
        # Turn off progress bar
        $winPb2->lblPbCurr->Text('');
        $winPb2->lblCount->Text('');
        &winPb2_Terminate;
        $win->ChangeCursor($ARROW);
      }
    }
    threads->exit();
  };
  # First execution
  if (!$nbrRetries) {
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'scrollTaskP'}.'...');
    # Turn on progress bar
    $winPb2->Center($win);
    $winPb2->Show();
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    $win->Disable();
  }
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  if ($mech->uri() =~ /facebook.com/) {
    # Show starting of the process
    $win->Tray->Change(-tip => $STR{'scrollTaskP'});
    if (!$win->IsVisible()) {
      $win->Tray->Change( -balloon_icon  => 'info'              ,
                          -balloon_title => 'ExtractFace'       ,
                          -balloon_tip   => $STR{'scrollTaskP'} , );
      $win->Tray->ShowBalloon(1);
    }
    # Scroll one page at a time and expand until end of page is reached
    $winPb2->lblPbCurr->Text($STR{'scrollTaskP'}.'...');
    my $maxScrollByDate = $winConfig->rbMaxScrollByDate->Checked();
    my $maxDate;
    my $maxScroll;
    if ($maxScrollByDate) {
      my ($d, $m, $y) = $winConfig->dtMaxScrollByDate->GetDate();
      $maxDate        = timelocal(0,0,0,$d,$m-1,$y); # Store in Unixtime format
    } else { $maxScroll = $winConfig->tfMaxScroll->Text(); }
    my $end = &scrollPage(\$mech, $CONFIG{'TIME_TO_WAIT'});
    $count++;
    while (!$end) { # If $end == 1, we reached the end of the page
      # Expand
      if ($winConfig->chOptSeemore->Checked()  or $winConfig->chOptPosts->Checked()    or
          $winConfig->chOptComments->Checked() or $winConfig->chOptTranslate->Checked()) {
        # Expand all additional content
        $winPb2->lblPbCurr->Text($STR{'expandTaskP'}.'...');
        $win->Tray->Change(-tip => $STR{'expandTaskP'}.'...');
        &expandContent(\$mech);
        &expandContent(\$mech); # Do it again
      }
      # Scroll again
      $winPb2->lblPbCurr->Text($STR{'scrollTaskP'}.'...');
      if ($maxScrollByDate and $maxDate) { # Stop by date
        my $lastDisplayedDate = ($mech->selector('a._5pcq abbr'))[-1];
        if ($lastDisplayedDate->{outerHTML} =~ /data-utime="([^\"]+)"/) {
          my $date = $1;
          if ($date <= $maxDate) { last; }
        }
      } elsif ($maxScroll and $count >= $maxScroll) { last; } # Stop by page
      $end = &scrollPage(\$mech, $CONFIG{'TIME_TO_WAIT'});
      $count++;
    }
    # Scroll to the top
    if ($winConfig->chOptScrollTop->Checked()) { $mech->eval_in_page('window.scrollTo(0,0)'); }
    $win->Tray->Change(-tip => $STR{'expandTaskF'});
    if (!$win->IsVisible()) {
      $win->Tray->Change( -balloon_icon  => 'info'              ,
                          -balloon_title => 'ExtractFace'       ,
                          -balloon_tip   => $STR{'scrExpTaskF'} , );
      $win->Tray->ShowBalloon(1);
    }
  } else { Win32::GUI::MessageBox($winPb2, $STR{'warn4'}, $STR{'err1T'}, 0x40010); }
  # Turn off progress bar
  $winPb2->lblPbCurr->Text('');
  $winPb2->lblCount->Text('');
  &winPb2_Terminate;
  $win->ChangeCursor($ARROW);

}  #--- End scrollExpandThr

#--------------------------#
sub winPID
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    $winPID->tfPIDTitle->Text('');
    # Start the thread
    $THR = threads->create(\&winPIDThr);
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINPID_LEFT'} and $CONFIG{'WINPID_TOP'}) {
      $winPID->Left($CONFIG{'WINPID_LEFT'});
      $winPID->Top($CONFIG{'WINPID_TOP'});
    } else { $winPID->Center(); }
    $winPID->DoModal();
  }

}  #--- End winPID

#--------------------------#
sub btnPIDRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    $winPID->tfPIDTitle->Text('');
    # Start the thread
    $THR = threads->create(\&winPIDThr);
  }
  
}  #--- End btnPIDRefresh_Click

#--------------------------#
sub winPIDThr
#--------------------------#
{
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($msgErr =~ /NS_ERROR_FILE_IS_LOCKED/) {
      # Restart a new thread to continue
      $THR = threads->create(\&winPIDThr);
    } else {
      if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
			my $err = (split(/ at /, $msgErr))[0];
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
      Win32::GUI::MessageBox($winAlbums, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
			threads->exit();
    }
  };
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($winPID, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
	# Get the profile ID
	my $pidCode;
	# Normal profile
	if ($pidCode = $mech->selector('div._4a8n a', any => 1)) {
		if ($pidCode->{outerHTML} =~ /user.php\?id=(\d+)/) { $winPID->tfPIDTitle->Text($1); }
	} elsif ($pidCode = $mech->selector('a.profilePicThumb', any => 1)) {
		if ($pidCode->{href} =~ /profile_id=(\d+)/ or $pidCode->{href} =~ /fbid=(\d+)/) { $winPID->tfPIDTitle->Text($1); }
	# Group profile
	} elsif ($pidCode = $mech->selector('form._2l5f.rfloat._ohf', any => 1)) {
		if ($pidCode->{outerHTML} =~ /action="\/groups\/([^\/]+)\//) { $winPID->tfPIDTitle->Text($1); }
	# Business page
	} elsif ($pidCode = $mech->selector('a._2dgj', any => 1)) {
		if ($pidCode->{href} =~ /\/([^\/]+)\/photos/) { $winPID->tfPIDTitle->Text($1); }
	# Not found
	} else { $winPID->tfPIDTitle->Text($STR{'err9'}); }

}  #--- End winPIDThr

#--------------------------#
sub btnPIDOk_Click
#--------------------------#
{
  # Remember position
  if ($winConfig->chRememberPos->Checked()) {
    my $winLeft = $winPID->AbsLeft();
    my $winTop  = $winPID->AbsTop();
    $CONFIG{'WINPID_LEFT'} = $winLeft;
    $CONFIG{'WINPID_TOP'}  = $winTop;
    &saveConfig(\%CONFIG);
  }
  return(-1);
	
}  #--- End btnPIDOk_Click

#--------------------------#
sub winPID_Terminate
#--------------------------#
{
  # Remember position
  if ($winConfig->chRememberPos->Checked()) {
    my $winLeft = $winPID->AbsLeft();
    my $winTop  = $winPID->AbsTop();
    $CONFIG{'WINPID_LEFT'} = $winLeft;
    $CONFIG{'WINPID_TOP'}  = $winTop;
    &saveConfig(\%CONFIG);
  }
  return(-1);

}  #--- End winPID_Terminate

#--------------------------#
sub winAlbums_Resize
#--------------------------#
{
  if ($START) {
    $winAlbums->tfAlbumTitle->Width($winAlbums->ScaleWidth()-320);
    $winAlbums->chAlbumGroup->Left($winAlbums->ScaleWidth()-95);
    $winAlbums->tfDirSaveAlbums->Width($winAlbums->ScaleWidth()-320);
    $winAlbums->btnDirSaveAlbums->Left($winAlbums->ScaleWidth()-97);
    $winAlbums->btnBrowseDirSaveAlbums->Left($winAlbums->ScaleWidth()-73);
    $winAlbums->lblInProgress->Left($winAlbums->ScaleWidth()-283);
    $winAlbums->btnAlbumsRefresh->Left($winAlbums->ScaleWidth()-25);
    $winAlbums->GridAlbums->Width($winAlbums->ScaleWidth()-144);
    $winAlbums->GridAlbums->Height($winAlbums->ScaleHeight()-205);
    $winAlbums->GridAlbums->AutoSize();
    $winAlbums->GridAlbums->ExpandLastColumn();
    $winAlbums->lblAlbumsOpt->Top($winAlbums->ScaleHeight()-97);
    $winAlbums->chPublishDate->Top($winAlbums->ScaleHeight()-98);
    $winAlbums->chAlbumsOpenHTML->Top($winAlbums->ScaleHeight()-98);
    $winAlbums->chAlbumsOpenDir->Top($winAlbums->ScaleHeight()-98);
    $winAlbums->lblPicturesSize->Top($winAlbums->ScaleHeight()-67);
    $winAlbums->cbPicturesSize->Top($winAlbums->ScaleHeight()-70);
    $winAlbums->btnAlbumsOk->Left(($winAlbums->ScaleWidth()/2));
    $winAlbums->btnAlbumsOk->Top($winAlbums->ScaleHeight()-35);
  }

}  #--- End winAlbums_Resize

#--------------------------#
sub winAlbumsNormal
#--------------------------#
{
  $winAlbums->chAlbumGroup->Checked(0);
  &winAlbums();
  
}  #--- End winAlbumsNormal

#--------------------------#
sub winGroupAlbums
#--------------------------#
{
  $winAlbums->chAlbumGroup->Checked(1);
  &winAlbums();
  
}  #--- End winGroupAlbums

#--------------------------#
sub winAlbums
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    &winAlbums_Resize();
    $winAlbums->tfAlbumTitle->Text('');
    $winAlbums->GridAlbums->DeleteNonFixedRows();
    # Start the thread
    $THR = threads->create(\&winAlbumsThr);
    usleep(500000);
    $winAlbums->GridAlbums->AutoSize();
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINALBUMS_LEFT'} and $CONFIG{'WINALBUMS_TOP'}) {
      $winAlbums->Left($CONFIG{'WINALBUMS_LEFT'});
      $winAlbums->Top($CONFIG{'WINALBUMS_TOP'});
    } else { $winAlbums->Center(); }
    $winAlbums->DoModal();
  }

}  #--- End winAlbums

#--------------------------#
sub btnAlbumsRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    $winAlbums->tfAlbumTitle->Text('');
    $winAlbums->GridAlbums->DeleteNonFixedRows();
    # Start the thread
    $THR = threads->create(\&winAlbumsThr);
  }
  
}  #--- End btnAlbumsRefresh_Click

#--------------------------#
sub winAlbumsThr
#--------------------------#
{
  # Local variables
  my $tempDir = "$USERDIR\\temp";
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($msgErr =~ /NS_ERROR_FILE_IS_LOCKED/) {
      # Restart a new thread to continue
      $THR = threads->create(\&winAlbumsThr);
    } else {
      if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
			my $err = (split(/ at /, $msgErr))[0];
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
      Win32::GUI::MessageBox($winAlbums, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
			threads->exit();
    }
  };
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      $winAlbums->btnAlbumsOk->Disable();
      Win32::GUI::MessageBox($winAlbums, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  # Gather album names
  if ($mech->uri() =~ /facebook.com/) {
    # Valid current page
    $winAlbums->ChangeCursor($HOURGLASS);
    &validAlbumPage(\$mech);
    # Get album names and urls
    my %albums;
    my @albums;
    if ($winAlbums->chAlbumGroup->Checked()) {
			if ($mech->uri() =~ /\/groups\//) { @albums = $mech->selector('td._51m-.vTop.hLeft.pbm.prm a.photoTextTitle'); }
			else 															{ @albums = $mech->selector('div._3hpt._2pif a');                            }
			#if (!scalar(@albums))             { @albums = $mech->selector('div._3rte div._50f4'); 										  	 }
		} else { @albums = $mech->selector('td._51m-.vTop.hLeft.pbm.prm a.photoTextTitle'); }
    foreach my $album (@albums) {
      my $albumName = $album->{innerHTML};
      $albumName   =~ s/<[^\>]+>//g;
      $albumName   = encode($CONFIG{'CHARSET'}, $albumName);
      my $albumUrl = $album->{href};
      $albums{$albumName} = $albumUrl;
    }
    # Feed the Album Grid
    $winAlbums->GridAlbums->SetCellCheck(0, 0, 1);
    foreach my $albumName (sort keys %albums) {
      if (exists($albums{$albumName}) and my $i = $winAlbums->GridAlbums->InsertRow($albumName, -1)) {
        $winAlbums->GridAlbums->SetCellText($i, 0, ''        );
        $winAlbums->GridAlbums->SetCellType($i, 0, GVIT_CHECK);
        $winAlbums->GridAlbums->SetCellCheck($i, 0, 1);
        $winAlbums->GridAlbums->SetCellText($i, 1, $albumName);
        $winAlbums->GridAlbums->SetCellText($i, 2, $albums{$albumName});
        $winAlbums->GridAlbums->AutoSize();
        $winAlbums->GridAlbums->Refresh();
      }
    }
    $winAlbums->lblInProgress->Text('');
    $winAlbums->ChangeCursor($ARROW);
  } else { Win32::GUI::MessageBox($winAlbums, $STR{'warn4'}, $STR{'err1T'}, 0x40010); }
  &isDumpAlbumsReady();

}  #--- End winAlbumsThr

#--------------------------#
sub validAlbumPage
#--------------------------#
{
  # Local variables
  my ($refMech) = @_;
  my $currURL = $$refMech->uri();
  my $currTitle;
  if ($currURL !~ /photos_albums$/ and $currURL !~ /collection_token=\w+%\w+%3A6$/ and
			$currURL !~ /photos\/\?tab=albums/ and $currURL !~ /photos\/\?filter=albums/) {
    # Trying to get the good page
    if ($winAlbums->chAlbumGroup->Checked() and $currURL =~ /https:\/\/(?:www|web).facebook.com\/groups\/([^\/]+)/) { # Album from a Group page (public)
      $winAlbums->lblInProgress->Text($STR{'loadAlbum'}.'...');
      my $goodURL = "https://www.facebook.com/groups/$1/photos/?filter=albums";
      ($currURL, $currTitle) = &loadPage($refMech, $goodURL);
		} elsif ($winAlbums->chAlbumGroup->Checked() and $currURL =~ /https:\/\/(?:www|web).facebook.com\/([^\/]+)/) { # Business page
      $winAlbums->lblInProgress->Text($STR{'loadAlbum'}.'...');
      my $goodURL = "https://www.facebook.com/$1/photos/?tab=albums";
      ($currURL, $currTitle) = &loadPage($refMech, $goodURL);
		} elsif ($currURL =~ /https:\/\/(?:www|web).facebook.com\/profile.php\?id=([^\/\&]+)/) { # Profile with id
      my $profilID = $1;
      $winAlbums->lblInProgress->Text($STR{'loadAlbum'}.'...');
      my $goodURL = "https://www.facebook.com/profile.php?id=$profilID&sk=photos&collection_token=$profilID%3A2305272732%3A6";
      ($currURL, $currTitle) = &loadPage($refMech, $goodURL);
    } elsif ($currURL =~ /https:\/\/(?:www|web).facebook.com\/([^\?\/]+)(?:\/photos_albums)?\?lst=\d+%3A\d+%3A\d+/) { # Profile with id
      my $profilID = $1;
      $winAlbums->lblInProgress->Text($STR{'loadAlbum'}.'...');
      my $goodURL = "https://www.facebook.com/$profilID/photos_albums";
      ($currURL, $currTitle) = &loadPage($refMech, $goodURL);
    } elsif ($currURL =~ /https:\/\/(?:www|web).facebook.com\/([^\/]+)/) { # Other profile
      $winAlbums->lblInProgress->Text($STR{'loadAlbum'}.'...');
      my $goodURL = "https://www.facebook.com/$1/photos_albums";
      ($currURL, $currTitle) = &loadPage($refMech, $goodURL);
    }
    # Re evaluate current page
    if (($currURL !~ /photos_albums$/       and $currURL !~ /photos_albums\?/         and $currURL !~ /collection_token=\w+%\w+%3A6$/) and
				 $currURL !~ /photos\/\?tab=albums/ and $currURL !~ /photos\/\?filter=albums/ or  $currTitle =~ /Page Not Found/) {
      $winAlbums->btnAlbumsOk->Disable();
      Win32::GUI::MessageBox($winAlbums, $STR{'warn3'}, $STR{'warn2T'}, 0x40010);
      threads->exit();
    } else {
      $winAlbums->lblInProgress->Text($STR{'loadAlbum'}.'...');
      &scrollPage($refMech, $CONFIG{'TIME_TO_WAIT'});
    }
  # You are in the right page, scroll down to load the whole page
  } else {
    if ($currURL and $currURL =~ /https:\/\/(?:www|web).facebook.com\//) {
      if    ($currURL =~ /https:\/\/(?:www|web).facebook.com\/profile.php\?id=([^\/\&]+)/) { $currTitle = $1; }
			elsif ($currURL =~ /https:\/\/(?:www|web).facebook.com\/groups\/([^\/\?]+)/        ) { $currTitle = $1; }
      elsif ($currURL =~ /https:\/\/(?:www|web).facebook.com\/([^\/\?]+)/                ) { $currTitle = $1; }
    }
    $winAlbums->lblInProgress->Text($STR{'loadAlbum'}.'...');
    &scrollPage($refMech, $CONFIG{'TIME_TO_WAIT'});
  }
  # Write title (used for HTML Album)
  if ($currTitle) {
    if ($currTitle =~ /#$/) { chop($currTitle); }
    $currTitle .= " - Albums";
    $winAlbums->tfAlbumTitle->Text($currTitle);
  }

}  #--- End validAlbumPage

#--------------------------#
sub tfDirSaveAlbums_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winAlbums->tfDirSaveAlbums->Text();
  # Remember
  if ($saveDir and -d $saveDir and $winAlbums->chSaveAlbumDir->Checked()) {
		$CONFIG{'DIR_SAVE_ALBUMS'} = $saveDir;
		&saveConfig(\%CONFIG);
  }
  &isDumpAlbumsReady();

}  #--- End tfDirSaveAlbums_Change

#--------------------------#
sub btnDirSaveAlbums_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winAlbums->tfDirSaveAlbums->Text();
  my $dir;
  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) {
      while ($lastDir =~ /[^\\]$/) { chop($lastDir); }
    }
    $dir = Win32::GUI::BrowseForFolder( -owner      => $winAlbums     ,
                                        -title      => $STR{'selDir'} ,
                                        -folderonly => 1              ,
                                        -directory  => $lastDir       ,
                                        -newui      => 1              , );
  } else {
    $dir = Win32::GUI::BrowseForFolder( -owner      => $winAlbums     ,
                                        -title      => $STR{'selDir'} ,
                                        -folderonly => 1              ,
                                        -newui      => 1              , );
  }
  # Selected folder
  if ($dir and -d $dir) {
    if ($dir =~ /\\$/) { chop($dir); }
    $winAlbums->tfDirSaveAlbums->Text($dir);
  }
  
}  #--- End btnDirSaveAlbums_Click

#--------------------------#
sub btnBrowseDirSaveAlbums_Click
#--------------------------#
{
	&exploreDir($winAlbums->tfDirSaveAlbums->Text());
  
}  #--- End btnBrowseDirSaveAlbums_Click

#--------------------------#
sub chSaveAlbumDir_Click
#--------------------------#
{
  # Local variables
  my $dir = $winAlbums->tfDirSaveAlbums->Text();
  # If directory exists, save it
  if ($dir and -d $dir and $winAlbums->chSaveAlbumDir->Checked()) {
    $CONFIG{'REMEMBER_SAVE_ALBUMS'} = 1;
    $CONFIG{'DIR_SAVE_ALBUMS'} = $dir;
    &saveConfig(\%CONFIG);
  # Don't save
  } elsif (!$winAlbums->chSaveAlbumDir->Checked()) {
    $CONFIG{'REMEMBER_SAVE_ALBUMS'} = 0;
    delete($CONFIG{'DIR_SAVE_ALBUMS'});
    &saveConfig(\%CONFIG);
  }

}  #--- End chSaveAlbumDir_Click

#--------------------------#
sub GridAlbums_Click
#--------------------------#
{
  # Local variables
  my ($row, $column) = @_;
  # Select
  if (!$column) {
    my $selStatus = $winAlbums->GridAlbums->GetCellCheck($row, $column);
    if (!$row) {
      # Check all
      if (!$selStatus) {
				for (my $i = 0; $i < $winAlbums->GridAlbums->GetRows(); $i++) { $winAlbums->GridAlbums->SetCellCheck($i, 0, 1); }
      # Uncheck all
			} else {
				for (my $i = 0; $i < $winAlbums->GridAlbums->GetRows(); $i++) { $winAlbums->GridAlbums->SetCellCheck($i, 0, 0); }
			}
    } else {
      # Check
      if (!$selStatus) { $winAlbums->GridAlbums->SetCellCheck($row, $column, 1); }
      # Uncheck
      else             { $winAlbums->GridAlbums->SetCellCheck($row, $column, 0); }
    }
  }
  return(1);

}  #--- End GridAlbums_Click

#--------------------------#
sub chPublishDate_Click
#--------------------------#
{
  # Save the choice
  if ($winAlbums->chPublishDate->Checked()) {
    $CONFIG{'ALBUMS_PUBLISH_DATE'} = 1;
    &saveConfig(\%CONFIG);
  # Don't save
  } else {
    $CONFIG{'ALBUMS_PUBLISH_DATE'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chPublishDate_Click

#--------------------------#
sub chAlbumsOpenHTML_Click
#--------------------------#
{
  # Save the choice
  if ($winAlbums->chAlbumsOpenHTML->Checked()) {
    $CONFIG{'ALBUMS_OPEN_HTML'} = 1;
    &saveConfig(\%CONFIG);
  # Don't save
  } else {
    $CONFIG{'ALBUMS_OPEN_HTML'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chAlbumsOpenHTML_Click

#--------------------------#
sub chAlbumsOpenDir_Click
#--------------------------#
{
  # Save the choice
  if ($winAlbums->chAlbumsOpenDir->Checked()) {
    $CONFIG{'ALBUMS_OPEN_DIR'} = 1;
    &saveConfig(\%CONFIG);
  # Don't save
  } else {
    $CONFIG{'ALBUMS_OPEN_DIR'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chAlbumsOpenDir_Click

#--------------------------#
sub isDumpAlbumsReady
#--------------------------#
{
  # Local variables
  my $saveDir = $winAlbums->tfDirSaveAlbums->Text();
  # Valid directory for save ?
  if (!$saveDir or !(-d $saveDir)) { $winAlbums->btnAlbumsOk->Disable(); return(0); }
  # Albums name loaded and at least one checked ?
  my $albumChecked = 0;
  for (my $i = 1; $i < $winAlbums->GridAlbums->GetRows(); $i++) {
    my $selStatus = $winAlbums->GridAlbums->GetCellCheck($i, 0);
    if ($selStatus == 1) {
      $albumChecked = 1;
      last;
    }
  }
  if (!$albumChecked) { $winAlbums->btnAlbumsOk->Disable(); return(0); }
  $winAlbums->btnAlbumsOk->Enable();

}  #--- End isDumpAlbumsReady

#--------------------------#
sub btnAlbumsOk_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Remember position
    if ($winConfig->chRememberPos->Checked()) {
      my $winLeft = $winAlbums->AbsLeft();
      my $winTop  = $winAlbums->AbsTop();
      $CONFIG{'WINALBUMS_LEFT'} = $winLeft;
      $CONFIG{'WINALBUMS_TOP'}  = $winTop;
      &saveConfig(\%CONFIG);
    }
    my $saveDir = $winAlbums->tfDirSaveAlbums->Text();
    my $mainAlbumTitle	= $winAlbums->tfAlbumTitle->Text();
    $mainAlbumTitle			=~ s/[\<\>\:\"\/\\\|\?\*]/_/g;
    my %listAlbums; 		# Album names and urls
    my %listPics; 			# Album, File path, Publication date, Urls, and index (position of the picture in the album)
    my $nbrAlbums				= 0;
    my $posPb1          = 0;
    my $nbrRetries      = 0;
    my $tabCurrentTitle;
    if (-d $saveDir and $mainAlbumTitle) {
      # Start the thread
      $THR = threads->create(\&dumpAlbums, $saveDir, $mainAlbumTitle, \%listAlbums, \%listPics,
                             $nbrAlbums, $tabCurrentTitle, $posPb1, $nbrRetries);
      return(-1);
    } else { Win32::GUI::MessageBox($win, $STR{'err4'}, $STR{'err1T'}, 0x40010); }
  }

}  #--- End btnAlbumsOk_Click

#--------------------------#
sub dumpAlbums
#--------------------------#
{
  # Local variables
  my ($saveDir, $mainAlbumTitle, $refListAlbums, $refListPics, $nbrAlbums, $tabCurrentTitle, $posPb1, $nbrRetries) = @_;
  my $firstExec = 0;
  my $FG_size   = $winAlbums->cbPicturesSize->GetCurSel(); # Possible values are: 0 = small size only, 1 = medium size, 2 = Full size
  # Cancel button
  $SIG{'KILL'} = sub {
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'dumpAlbumC'});
    # Turn off progress bar
    $winPb->lblPbCurr1->Text('');
    $winPb->lblCount1->Text('');
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    $winPb->pbWinPb1->SetPos(0);
    $winPb->pbWinPb2->SetPos(0);
    &winPb_Terminate;
    threads->exit();
  };
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
    $win->ChangeCursor($ARROW);
    # Progress window
    $posPb1 = $winPb->pbWinPb1->GetPos();
    $winPb->pbWinPb2->SetPos(0);
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    # Retry 10 times
    if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $nbrRetries++; }
    if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
      # Restart a new thread to continue
      if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $winPb->lblPbCurr1->Text($STR{'crash'}.'...'); }
      sleep(2);
      $THR = threads->create(\&dumpAlbums, $saveDir, $mainAlbumTitle, $refListAlbums, $refListPics,
                             $nbrAlbums, $tabCurrentTitle, $posPb1, $nbrRetries);
    } else {
			my $err = (split(/ at /, $msgErr))[0];
			Win32::GUI::MessageBox($winPb, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
      # Turn off progress bar
			$winPb->lblPbCurr1->Text('');
			$winPb->lblCount1->Text('');
			$winPb->lblPbCurr2->Text('');
			$winPb->lblCount2->Text('');
			$winPb->pbWinPb1->SetPos(0);
			$winPb->pbWinPb2->SetPos(0);
			&winPb_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    }
    # Kill this thread
    threads->exit();
  };
  # First execution, must gather album names and urls
  if (!$posPb1 and !$nbrAlbums) {
    $firstExec = 1;
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'dumpAlbumP'}.'...');
    for (my $i = 1; $i < $winAlbums->GridAlbums->GetRows(); $i++) {
      my $selStatus = $winAlbums->GridAlbums->GetCellCheck($i, 0);
      if ($selStatus == 1) {
        my $albumName = decode($CONFIG{'CHARSET'}, $winAlbums->GridAlbums->GetCellText($i, 1));
        my $albumURL  = $winAlbums->GridAlbums->GetCellText($i, 2);
        $$refListAlbums{$albumName}{url}  = $albumURL;
        $$refListAlbums{$albumName}{name} = $albumName;
      }
    }
    # Number of album
    $nbrAlbums = keys %{$refListAlbums};
  }
  if ($nbrAlbums > 0) {
    my $count1;
		my $type = 1; # Type of Group Album
    # First execution, turn on the progress window
    if ($firstExec == 1) {
      # Turn on progress bar
      $winPb->Center($winAlbums);
      $winPb->Show();
      $win->Disable();
      $winPb->pbWinPb1->SetRange(0, $nbrAlbums);
      $winPb->pbWinPb1->SetPos(0);
      $winPb->pbWinPb1->SetStep(1);
      $count1 = 0;
    # If on resume state, get number of albums left
    } else {
      my $nbrCurrAlbums = keys %{$refListAlbums};
      $count1 = $nbrAlbums - $nbrCurrAlbums;
    }
    # Parse each album
    foreach my $album (sort keys %{$refListAlbums}) {
      my $encodedName = encode($CONFIG{'CHARSET'}, $$refListAlbums{$album}{name});
      my @listVideos;
      $winPb->lblPbCurr1->Text("$STR{'opening'}: $encodedName");
      $winPb->lblCount1->Text("$count1/$nbrAlbums");
      $winPb->lblPbCurr2->Text('');
      $winPb->lblCount2->Text('');
      my $albumDir;
      if    ($winAlbums->chAlbumGroup->Checked()) {
				if    ($$refListAlbums{$album}{'url'} =~ /\&album_id=(\d+)/) { $albumDir = $1; }
				elsif ($$refListAlbums{$album}{'url'} =~ /\?set=([^\&]+)&/ ) { $albumDir = $1; $type = 2; }
			} elsif ($$refListAlbums{$album}{'url'} =~ /\?set=([^\&]+)&/ ) { $albumDir = $1; }
      if (!$albumDir) { $albumDir = $count1; }
      $$refListAlbums{$album}{dir} = $albumDir;
      # Gather album page
      my $mechAlbum = WWW::Mechanize::Firefox->new(tab => 'current', autodie => 0);
      if (!exists($$refListAlbums{$album}{nbrPics}) and !exists($$refListAlbums{$album}{nbrVideos})) {
        if (!-d "$saveDir\\$mainAlbumTitle"                 ) { mkdir("$saveDir\\$mainAlbumTitle");                  }
        if (!-d "$saveDir\\$mainAlbumTitle\\$albumDir"      ) { mkdir("$saveDir\\$mainAlbumTitle\\$albumDir");       }
        if (!-d "$saveDir\\$mainAlbumTitle\\$albumDir\\temp") { mkdir("$saveDir\\$mainAlbumTitle\\$albumDir\\temp"); }
        $mechAlbum->get($$refListAlbums{$album}{'url'}, synchronize => 0);
        $winPb->lblPbCurr1->Text("$STR{'scrolling'}: $encodedName");
        sleep($CONFIG{'TIME_TO_WAIT'});
        if      ($winAlbums->chAlbumGroup->Checked()) { &scrollPage(\$mechAlbum, $CONFIG{'TIME_TO_WAIT'});      }
        else                                          { &scrollAlbumPage(\$mechAlbum, $CONFIG{'TIME_TO_WAIT'}); }
      }
      my $albumPath = "$saveDir\\$mainAlbumTitle\\$albumDir\\temp\\album.html";
      my $status = $mechAlbum->save_content($albumPath, "$saveDir\\$mainAlbumTitle\\$albumDir\\temp");
      while ($status->{currentState} != $status->{PERSIST_STATE_FINISHED}) { sleep(1); }
      $winPb->lblPbCurr1->Text("$STR{'parsing'}: $encodedName");
      # Video album
      if ($$refListAlbums{$album}{url} =~ /set=vb/ and -T $albumPath and open(my $fhTemp, "<:encoding(UTF-8)", $albumPath)) {
        my %listVideos;
        my %videoNames;
        # Gather video urls and corresponding preview picture urls
        my $file_as_string = do { local $/ = <$fhTemp> };
        close($fhTemp);
        $file_as_string =~ s/[\r\n]//g;
				my @sections = split(/function\(Bootloader\)/, $file_as_string);
				my @parts;
				foreach my $section (@sections) {
					if ($section =~ /fbTimelinePhotosFlexgrid/) {
						my @partsSection = split(/fbTimelinePhotosFlexgrid/, $section);
						my $section2;
						foreach (@partsSection) { if (/fbPhotoCurationControlWrapper/) { $section2 = $_; last; } }
						@parts = split(/fbPhotoCurationControlWrapper/, $section2);
						shift(@parts);
						last;
					}
				}
        foreach my $part (@parts) {
          if ($part =~ /^" data-fbid="([^\"]+)"/ and $part =~ /background-image: url\(([^\)]+)/) {
            my $picURL = $1;
            $picURL    =~ s/&amp;/&/g;
            if ($part =~ /href="([^\"]+)"/) {
              my $videoPageURL = $1;
              if ($videoPageURL =~ /\/([^\/]+)\/\?type=/) {
                my $vd = $1;
                if (!exists($videoNames{$vd})) {
                  $videoNames{$vd} = 1;
                  if ($videoPageURL !~ /^http/) { $videoPageURL = 'https://www.facebook.com'.$videoPageURL; }
                  $videoPageURL =~ s/&amp;/&/g;
                  $listVideos{$videoPageURL} = $picURL;
                }
              }
            }
          }
        }
        @parts = ();
        $$refListAlbums{$album}{nbrVideos} = keys %listVideos;
        # Gather preview picture
        if ($$refListAlbums{$album}{nbrVideos} > 0) {
          my $count2 = 0;
          $winPb->pbWinPb2->SetRange(0, $$refListAlbums{$album}{nbrVideos});
          $winPb->pbWinPb2->SetPos(0);
          $winPb->pbWinPb2->SetStep(1);
          $winPb->lblCount2->Text("$count2/$$refListAlbums{$album}{nbrVideos}");
          foreach my $videoPage (keys %listVideos) {
            my $pic;
            if ($listVideos{$videoPage} =~ /\/([^\/\?]+)(?:\?|$)/) {
              my $pic = $1;
              my $picPath = "$saveDir\\$mainAlbumTitle\\$albumDir\\$pic";
              $winPb->lblPbCurr2->Text("$STR{'downloading'}: $pic");
              # Download the picture if does not exist
              $$refListPics{$album}{$videoPage}{ind}          = $count2;
              $$refListPics{$album}{$videoPage}{smallPicName} = $pic;
              $$refListPics{$album}{$videoPage}{picPath}      = $picPath;
              if (!-e $picPath) {
                $mechAlbum->save_url($listVideos{$videoPage}, $picPath);
              }
              $count2++;
              $winPb->pbWinPb2->StepIt();
              $winPb->lblCount2->Text("$count2/$$refListAlbums{$album}{nbrVideos}");
            }
          }
          # Gather videos
          $count2 = 0;
          $winPb->pbWinPb2->SetPos(0);
          $winPb->lblCount2->Text("$count2/$$refListAlbums{$album}{nbrVideos}");
          foreach my $videoPage (keys %listVideos) {
            if ($videoPage =~ /vb\.[^\/]+\/([^\/]+)/) {
              # Gather page with the video
              $winPb->lblPbCurr2->Text("$STR{'opening'}: $videoPage");
              my $videoName = $1;
              my $videoPath = "$saveDir\\$mainAlbumTitle\\$albumDir\\$videoName.mp4";
              my $mechVideo;
              if (!-e $videoPath or $winAlbums->chPublishDate->Checked) {
                # Open the video page
                if ($tabCurrentTitle) {
                  $mechVideo = WWW::Mechanize::Firefox->new(tab => qr{$tabCurrentTitle}, create => 1, autodie => 0);
                } else { $mechVideo = WWW::Mechanize::Firefox->new(create => 1, autodie => 0); }
                $mechVideo->get($videoPage, synchronize => 0);
                sleep($CONFIG{'TIME_TO_WAIT'});
                $tabCurrentTitle = $mechVideo->title;
                # Save the page content
                my $pagePath = "$saveDir\\$mainAlbumTitle\\$albumDir\\temp\\page.html";
                my $status   = $mechVideo->save_content($pagePath);
                while ($status->{currentState} != $status->{PERSIST_STATE_FINISHED}) { sleep(1); }
                # Load content from file
                if (-T $pagePath and open(my $fhTemp, "<:encoding(UTF-8)", $pagePath)) {
                  my $file_as_string = do { local $/ = <$fhTemp> };
                  close($fhTemp);
                  $file_as_string =~ s/[\r\n]//g;
                  my @sections    = (split(/fbUserContent/, $file_as_string));
                  $file_as_string = undef;
									my $extractData;
									my $videoURL;
									# Look for video url in the page
									if ($sections[0] =~ /<video(.+?)<\/video>/) {
										$extractData = $1;
										if ($extractData =~ /src="([^\"]+)"/) {
											$videoURL = unescape($1);
											$videoURL =~ s/&amp;/&/g;
											if ($videoURL =~ /^blob:/) { # Bad link
												$videoURL    = '';
												$extractData = '';
											}
										}
									}
									# Video url is not in the page
                  if (!$extractData and !$videoURL and $sections[1] =~ /<a[^>]+class="_5pcq"(.+?)<\/a>/) {
										$extractData = $1;
										if ($extractData) {
											# Get the publication date
											if ($winAlbums->chPublishDate->Checked and
													($extractData =~ /data-utime="([^\"]+)"[^\>]+class="_5ptz"/ or
													 ($extractData =~ /class="_5ptz"[^\>]+data-utime="([^\"]+)/))) {
												$$refListPics{$album}{$videoPage}{pubDate} = $1;
											}
											# Download the video
											if ($extractData =~ /href="([^\"]+)"/) {
												my $newUrl = $1;
												if ($newUrl !~ /^http/) { $newUrl =  'https://m.facebook.com'.$newUrl;         }
												else                    { $newUrl =~ s/\/\/(?:www|web).facebook/\/\/m.facebook/}
												$mechVideo->get($newUrl, synchronize => 0);
												sleep($CONFIG{'TIME_TO_WAIT'}+1);
												my $videoMobile = "$saveDir\\$mainAlbumTitle\\$albumDir\\temp\\mobile.html";
												my $status      = $mechVideo->save_content($videoMobile);
												while ($status->{currentState} != $status->{PERSIST_STATE_FINISHED}) { sleep(1); }
												if (-T $videoMobile and open(my $fhTemp, "<:encoding(UTF-8)", $videoMobile)) {
													my $file_as_string = do { local $/ = <$fhTemp> };
													$file_as_string    =~ s/[\r\n]//g;
													close($fhTemp);
													if ($file_as_string =~ /video_redirect\/\?src=([^\&]+)/) { $videoURL = unescape($1); }
												}
											}
										}
                  }
									# Download the video
									if ($videoURL and $videoURL =~ /\.mp4/) {
										$winPb->lblPbCurr2->Text("$STR{'downloading'}: $videoURL");
										if (!-e $videoPath) {
											$mechAlbum->save_url($videoURL, $videoPath); } # Download video
										$$refListPics{$album}{$videoPage}{videoPath} = $videoPath;
									}
                }
                $mechVideo = undef;
              # Already exists
              } elsif (-e $videoPath) { $$refListPics{$album}{$videoPage}{videoPath} = $videoPath; }
            }
            # Update progress
            $count2++;
            $winPb->pbWinPb2->StepIt();
            $winPb->lblCount2->Text("$count2/$$refListAlbums{$album}{nbrVideos}");
          }
        }
      # Picture album
			} else {
        # Facebook Group profile
        if    ($winAlbums->chAlbumGroup->Checked() and $type == 1) {
          # Load content from file
          if (-T $albumPath and open(my $fhTemp, "<:encoding(UTF-8)", $albumPath)) {
            my $file_as_string = do { local $/ = <$fhTemp> };
            $file_as_string    =~ s/[\r\n]//g;
            close($fhTemp);
						my @sections = split(/function\(Bootloader\)/, $file_as_string);
						my @parts;
						foreach my $section (@sections) {
							if ($section =~ /_2eea/) {
								@parts = split(/_2eea/, $section);
								shift(@parts);
								last;
							}
						}
            my $i = 0;
            foreach (@parts) {
              my $url;
              my $fname;
              if (/href=\"([^\"]+)/) { $url   = $1; }
              if (/src=\"([^\"]+)/ ) { $fname = $1; }
              if ($url and $fname) {
                $$refListPics{$album}{$url}{ind}          = $i++;
                $$refListPics{$album}{$url}{smallPicName} = $fname;
								my $encFName = encode('utf8', $fname);
                rcopy("$saveDir\\$mainAlbumTitle\\$albumDir\\temp\\$encFName", "$saveDir\\$mainAlbumTitle\\$albumDir\\$encFName"); # Copy image
              }
            }
          }
        }
        # Normal user profile
        else {
          # Load content from file
          if (-T $albumPath and open(my $fhTemp, "<:encoding(UTF-8)", $albumPath)) {
            my $file_as_string = do { local $/ = <$fhTemp> };
            $file_as_string    =~ s/[\r\n]//g;
            close($fhTemp);
						my @sections = split(/function\(Bootloader\)/, $file_as_string);
						my $section2;
						foreach my $section (@sections) {
							if ($type == 2 and $section =~ /fbTimelineSectionStarGrid/) {
								my @partsSection = split(/fbTimelineSectionStarGrid/, $section);
								foreach (@partsSection) { if (/data-starred-src=/) { $section2 = $_; last; } }
							} elsif ($section =~ /fbTimelinePhotosFlexgrid/) {
								my @partsSection = split(/fbTimelinePhotosFlexgrid/, $section);
								foreach (@partsSection) { if (/fbPhotoCurationControlWrapper/) { $section2 = $_; last; } }
							}
						}
            my @parts = split(/fbPhotoCurationControlWrapper/, $section2);
            shift(@parts);
            my $i = 0;
            foreach my $part (@parts) {
              if ($part =~ /^" data-fbid="([^\"]+)"/ and $part =~ /background-image: url\(([^\;]+)/) {
                my $picURL  = $1;
                $picURL     =~ s/&amp;/&/g;
                if ($part =~ /ajaxify="([^\"]+)"/) {
                  my $picPage = $1;
                  $picPage    =~ s/&amp;/&/g;
                  $$refListPics{$album}{$picURL}{ind} = $i++;
                  if ($picPage) { $$refListPics{$album}{$picURL}{picPage} = $picPage; }
                  else          { $$refListPics{$album}{$picURL}{picPage} = 0; }
                }
                # The small picture
                if (!$FG_size and $part =~ /background-image: url\(([^\)]+)/) {
                  my $smallPicUrl = $1;
                  $smallPicUrl    =~ s/&amp;/&/g;
									$smallPicUrl = encode('utf8', $smallPicUrl);
                  $$refListPics{$album}{$picURL}{smallPicUrl} = $smallPicUrl;
                }
              }
            }
          }
        }
        # Gather pictures
        $$refListAlbums{$album}{nbrPics} = (keys %{$$refListPics{$album}});
        if ($$refListAlbums{$album}{nbrPics} > 0) {
          $winPb->pbWinPb2->SetRange(0, $$refListAlbums{$album}{nbrPics});
          $winPb->pbWinPb2->SetPos(0);
          $winPb->pbWinPb2->SetStep(1);
          my $count2 = 0;
          $winPb->lblCount2->Text("$count2/$$refListAlbums{$album}{nbrPics}");
          foreach (sort {$$refListPics{$album}{$a}{ind} <=> $$refListPics{$album}{$b}{'ind'}} keys %{$$refListPics{$album}}) {
            my $picURL = $_;
            my $picOk  = 0;
            if ($$refListPics{$album}{$picURL}{picPath} and -e $$refListPics{$album}{$picURL}{picPath}) {
              # If picture exists, verify integrity
              my $info = image_info($$refListPics{$album}{$picURL}{picPath});
              if (!$info->{error}) { $picOk = 1; }
            }
            # Facebook group - Pics
            if (!$picOk and $winAlbums->chAlbumGroup->Checked() and $type == 1) {
              my $picName = $$refListPics{$album}{$picURL}{smallPicName};
              $winPb->lblPbCurr2->Text("$STR{'downloading'}: $picName");
              my $bigSizePicUrl;
              my $mediumSizePicUrl;
              my $publishDate;
              # If we must gather the publication date
              if ($winAlbums->chPublishDate->Checked or $FG_size) {
                # Open the picture page
                my $mechPic;
                if ($tabCurrentTitle) {
                  $mechPic = WWW::Mechanize::Firefox->new(tab => qr{$tabCurrentTitle}, create => 1, autodie => 0);
                } else { $mechPic = WWW::Mechanize::Firefox->new(create => 1, autodie => 0); }
                $mechPic->get($picURL, synchronize => 0);
                sleep($CONFIG{'TIME_TO_WAIT'}*5);
                $tabCurrentTitle = $mechPic->title;
                # Save the page content
                my $pagePath = "$saveDir\\$mainAlbumTitle\\$albumDir\\temp\\page.html";
                my $status   = $mechPic->save_content($pagePath);
                while ($status->{currentState} != $status->{PERSIST_STATE_FINISHED}) { sleep(1); }
                # Load content from file
                if (-T $pagePath and open(my $fhTemp, "<:encoding(UTF-8)", $pagePath)) {
                  my $file_as_string = do { local $/ = <$fhTemp> };
                  $file_as_string    =~ s/[\r\n]//g;
                  close($fhTemp);
                  my $section        = (split(/function\(Bootloader\)/, $file_as_string))[0];
                  my @parts          = (split(/_3x-2/, $section));
                  if ($winAlbums->chPublishDate->Checked and
                      ($parts[0] =~ /data-utime="([^\"]+)"[^\>]+class="_5ptz"/ or
                       ($parts[0] =~ /class="_5ptz"[^\>]+data-utime="([^\"]+)/))) { $$refListPics{$album}{$picURL}{'pubDate'} = $1; }
                  # Gather the medium size picture Url
                  if ($FG_size == 1 and $parts[1] =~ /src="([^\"]+$picName[^\"]+)/) {
                    $mediumSizePicUrl                              = $1;
                    $mediumSizePicUrl                              =~ s/&amp;/&/g;
                    $$refListPics{$album}{$picURL}{mediumPicURL} = $mediumSizePicUrl;
                  }
                  # Gather the big size picture Url
                  elsif ($FG_size == 2) {
                    if ($file_as_string =~ /_2-sx/) {
                      my $part        = (split(/_2-sx/, $file_as_string))[1];
                      $file_as_string = undef;
                      if ($part =~ /src="([^\"]+)/) {
                        $bigSizePicUrl = $1;
                        if ($bigSizePicUrl !~ /spacer/) {
                          $bigSizePicUrl =~ s/&amp;/&/g;
                          $$refListPics{$album}{$picURL}{bigPicURL} = $bigSizePicUrl;
                        } else { $bigSizePicUrl = undef; }
                      }
                    }
                    # Gather big size picture Url was not possible, try medium size instead
                    if (!$bigSizePicUrl and $parts[1] =~ /src="([^\"]+$picName[^\"]+)/) {
                      $mediumSizePicUrl = $1;
                      $mediumSizePicUrl =~ s/&amp;/&/g;
                      $$refListPics{$album}{$picURL}{bigPicURL} = $mediumSizePicUrl;
                    }
                  }
                }
                # Download the picture (medium or big size)
                if (($bigSizePicUrl and $bigSizePicUrl =~ /[^\"]+\/([^\?]+)/) or ($mediumSizePicUrl and $mediumSizePicUrl =~ /[^\"]+\/([^\?]+)/)) {
                  my $picName = encode('utf8', $1);
                  my $picFileUrl;
                  if ($bigSizePicUrl) { $picFileUrl = $bigSizePicUrl;    }
                  else                { $picFileUrl = $mediumSizePicUrl; }
                  my $picPath = "$saveDir\\$mainAlbumTitle\\$albumDir\\$picName";
                  $picFileUrl =~ s/&amp;/&/g;
                  $mechPic->save_url($picFileUrl, $picPath);
                  $$refListPics{$album}{$picURL}{picPath} = $picPath;
                  $picPath                                  =~ s/\Q$saveDir\E\\//;
                  $$refListPics{$album}{$picURL}{relPath} = ".\\$picPath";
                  undef $mechPic;
                }
              # Small size only
              } else {
                $$refListPics{$album}{$picURL}{picPath} = "$saveDir\\$mainAlbumTitle\\$albumDir\\" . $$refListPics{$album}{$picURL}{smallPicName};
                $$refListPics{$album}{$picURL}{relPath} = $picURL;
              }
            # Normal profile album
						} elsif (!$picOk and $picURL =~ /\/([^\/\?]+)(?:\?|$)/) {
              my $picName = encode('utf8', $1);
              my $picPath = "$saveDir\\$mainAlbumTitle\\$albumDir\\$picName";
              $winPb->lblPbCurr2->Text("$STR{'downloading'}: $picName");
              my $picOk = 0;
              # Download the small picture ?
              if (!$FG_size and exists($$refListPics{$album}{$picURL}{smallPicUrl}) and $$refListPics{$album}{$picURL}{smallPicUrl} =~ /\/([^\/\?]+)(?:\?|$)/) {
                my $picName = encode('utf8', $1);
                $picPath  = "$saveDir\\$mainAlbumTitle\\$albumDir\\$picName";
                if (!-e $picPath) { $mechAlbum->save_url($$refListPics{$album}{$picURL}{smallPicUrl}, $picPath); }
                $$refListPics{$album}{$picURL}{smallPicName} = $picName;
                $$refListPics{$album}{$picURL}{picPath}      = $picPath;
                $$refListPics{$album}{$picURL}{relPath}      = $$refListPics{$album}{$picURL}{picPage};
              }
              # Download the medium picture ?
              if ($FG_size == 1) {
                if (!-e $picPath) { $mechAlbum->save_url($picURL, $picPath); }
                $$refListPics{$album}{$picURL}{smallPicName} = $picName;
                $$refListPics{$album}{$picURL}{picPath}      = $picPath;
                $picPath                                       =~ s/\Q$saveDir\E\\//;
                $$refListPics{$album}{$picURL}{relPath}      = ".\\$picPath";
              }
              # Publication date and/or big size picture
              if ($winAlbums->chPublishDate->Checked or $FG_size == 2) {
                my $mechPic;
                my $publishDate;
                if ($$refListPics{$album}{$picURL}{'picPage'}) {
                  if ($tabCurrentTitle) {
                    $mechPic = WWW::Mechanize::Firefox->new(tab => qr{$tabCurrentTitle}, create => 1, autodie => 0);
                  } else { $mechPic = WWW::Mechanize::Firefox->new(create => 1, autodie => 0); }
                  $mechPic->get($$refListPics{$album}{$picURL}{picPage}, synchronize => 0);
                  sleep($CONFIG{'TIME_TO_WAIT'}*5);
                  my $currentTitle = $mechPic->title;
                  if ($currentTitle =~ /([^\-]+ \- )/) { $tabCurrentTitle = $1; }
                  my $pagePath = "$saveDir\\$mainAlbumTitle\\$albumDir\\temp\\page.html";
                  my $status   = $mechPic->save_content($pagePath);
                  while ($status->{currentState} != $status->{PERSIST_STATE_FINISHED}) { sleep(1); }
                  if (-T $pagePath and open(my $fhTemp, "<:encoding(UTF-8)", $pagePath)) {
                    my $file_as_string = do { local $/ = <$fhTemp> };
                    $file_as_string    =~ s/[\r\n]//g;
                    close($fhTemp);
                    if ($winAlbums->chPublishDate->Checked and
                        ($file_as_string =~ /data-utime="([^\"]+)"[^\>]+class="_5ptz"/ or
                         ($file_as_string =~ /class="_5ptz"[^\>]+data-utime="([^\"]+)/))) {
                      $$refListPics{$album}{$picURL}{pubDate} = $1;
                    }
                    if ($FG_size == 2) {
                      my $part        = (split(/_2-sx/, $file_as_string))[1];
                      $file_as_string = undef;
                      my $bigSizePicUrl;
                      if ($part =~ /src="([^\"]+)/) {
                        $bigSizePicUrl = $1;
                        if ($bigSizePicUrl !~ /spacer/) {
                          $bigSizePicUrl    =~ s/&amp;/&/g;
                          if ($bigSizePicUrl =~ /\/([^\/\?]+)(?:\?|$)/) {
                            my $picName = encode('utf8', $1);
                            $picPath    = "$saveDir\\$mainAlbumTitle\\$albumDir\\$picName";
														$mechAlbum->save_url($bigSizePicUrl, $picPath);
                            $$refListPics{$album}{$picURL}{smallPicName} = $picName;
                            $$refListPics{$album}{$picURL}{picPath}      = $picPath;
                            $picPath                                       =~ s/\Q$saveDir\E\\//;
                            $$refListPics{$album}{$picURL}{relPath}      = ".\\$picPath";
                          }
                        } else { $bigSizePicUrl = undef; }
                      }
                      # Download big size picture was not possible, try medium size instead
                      if (!$bigSizePicUrl) {
                        if (!-e $picPath) { $mechAlbum->save_url($picURL, $picPath); }
                        $$refListPics{$album}{$picURL}{smallPicName} = $picName;
                        $$refListPics{$album}{$picURL}{picPath}      = $picPath;
                        $picPath                                       =~ s/\Q$saveDir\E\\//;
                        $$refListPics{$album}{$picURL}{relPath}      = ".\\$picPath";
                      }
                    }
                  }
                  undef $mechPic;
                }
              }
            }
            # Update progress
            $count2++;
            $winPb->pbWinPb2->StepIt();
            $winPb->lblCount2->Text("$count2/$$refListAlbums{$album}{nbrPics}");
          }
        }
      }
      $count1++;
      $winPb->pbWinPb1->StepIt();
      $winPb->lblCount1->Text("$count1/$nbrAlbums");
      $winPb->pbWinPb2->SetPos(0);
      $winPb->lblPbCurr2->Text('');
      $winPb->lblCount2->Text('');
      # Delete temporary files
      if (-d "$saveDir\\$mainAlbumTitle\\$albumDir\\temp" and $winConfig->chDelTempFiles->Checked()) {
        remove_tree("$saveDir\\$mainAlbumTitle\\$albumDir\\temp");
      }
    }
    # Create the HTML Album page
    my $htmlAlbumPage = "$saveDir\\$mainAlbumTitle.html";
    $mainAlbumTitle = encode('utf8', $mainAlbumTitle);
    open(HTML, ">:encoding(UTF-8)", $htmlAlbumPage);
    print HTML "<!DOCTYPE html>\n";
    print HTML "<html>\n<head>\n<title>$mainAlbumTitle</title>\n";
    print HTML "<meta charset=\"UTF-8\">\n";
		print HTML "<style>\n";
		print HTML "table, th, td {\n";
		print HTML "  border: 1px solid black;\n";
		print HTML "  border-collapse: collapse;\n";
		print HTML "}\n";
		print HTML "th, td {\n";
		print HTML "  padding: 5px;\n";
		print HTML "}\n";
		print HTML "</style>\n";
    print HTML "</head>\n";
    print HTML "<body>\n";
		print HTML "<h1 style=\"color:#003300;font-size: 18pt;font-variant: small-caps;font-weight: bold;\;text-align: center;\">";
    print HTML "$mainAlbumTitle</h1>\n";
    print HTML "<table style=\"margin: auto;\">\n";
    # For each album
    foreach my $album (keys %{$refListPics}) {
      my $albumDir = ".\\$mainAlbumTitle\\$$refListAlbums{$album}{dir}";
      print HTML "<tr><th colspan=4 style=\"height: 50px; color:#003300; background-color:#EEEEEE; font-size: 14pt; font-variant: small-caps; font-weight: bold;\">$album</th></tr>";
      my $count = 0;
      foreach (sort {$$refListPics{$album}{$a}{ind} <=> $$refListPics{$album}{$b}{ind}} keys %{$$refListPics{$album}}) {
        my $pic = $_;
        my $fileName = $$refListPics{$album}{$pic}{smallPicName};
        my $filePath = $$refListPics{$album}{$pic}{picPath};
        if (-e $filePath) { $filePath =~ s/\Q$saveDir\E\\//;    }
        else              { $filePath = "$albumDir\\$fileName"; }
        if (!$count) { print HTML "<tr>\n"; }  # new row for each group of 4 pics
        print HTML "<td style=\"width: 25%; font-size: 11pt;text-align: center;\">\n";
        # Video
        if ($albumDir =~ /\\vb\./ and exists($$refListPics{$album}{$pic}{videoPath})) {
          my $videoFileName = (split(/\\/, $$refListPics{$album}{$pic}{videoPath}))[-1];
          my $videoPath     = "$albumDir\\$videoFileName";
          print HTML "<a href=\"$videoPath\">\n";
        # Picture
        } else { print HTML "<a href=\"$$refListPics{$album}{$pic}{relPath}\">\n"; }
        print HTML "<img src=\"$albumDir\\$fileName\" alt=\"$fileName\" style=\"max-width:200px;\">\n";
        print HTML "</a><br><br>\n";
        if ($winAlbums->chPublishDate->Checked) {
          if (exists($$refListPics{$album}{$pic}{pubDate})) {
            my $dateStr;
            if ($$refListPics{$album}{$pic}{pubDate}) { $dateStr = &formatDate($$refListPics{$album}{$pic}{pubDate}); }
            else                                      { $dateStr = $STR{'errorDate'};                                 }
            print HTML "Date: <strong style=\"color:#339900;\">$dateStr</strong>\n";
          }
        }
        print HTML "</td>\n";
        $count++;
        if ($count == 4) { print HTML "</tr>\n"; $count = 0; } # End row
      }
      # Complete row (last row is not 4 pics)
      if ($count != 0) {
        while ($count != 4) {
          print HTML "<td>&nbsp;</td>\n";
          $count++;
        }
      }
    }
    print HTML "</table>\n</body>\n</html>\n";
    close(HTML);
    # Open the page
    if ($winAlbums->chAlbumsOpenHTML->Checked()) { $win->ShellExecute('open', $htmlAlbumPage,'','',1); }
    # Open the directory
    if ($winAlbums->chAlbumsOpenDir->Checked() ) { &exploreDir($saveDir); }
    # Turn off progress bar
    $winPb->lblPbCurr1->Text('');
    $winPb->lblCount1->Text('');
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    $winPb->pbWinPb1->SetPos(0);
    $winPb->pbWinPb2->SetPos(0);
    &winPb_Terminate;
  }
  $win->Tray->Change(-tip => $STR{'dumpAlbumF'});
  if (!$win->IsVisible()) {
    $win->Tray->Change( -balloon_icon  => 'info'             ,
                        -balloon_title => 'ExtractFace'      ,
                        -balloon_tip   => $STR{'dumpAlbumF'} , );
    $win->Tray->ShowBalloon(1);
  }
  $win->ChangeCursor($ARROW);

}  #--- End dumpAlbums
  
#--------------------------#
sub winPb_Terminate
#--------------------------#
{
  $winPb->Hide();
  $win->Enable();
  $win->SetForegroundWindow();
  return(0);

}  #--- End winPb_Terminate

#--------------------------#
sub winPb2_Terminate
#--------------------------#
{
  $winPb2->Hide();
  $win->Enable();
  $win->SetForegroundWindow();
  return(0);

}  #--- End winPb2_Terminate

#--------------------------#
sub winAlbums_Terminate
#--------------------------#
{
  # Remember position
  if ($winConfig->chRememberPos->Checked()) {
    my $winLeft = $winAlbums->AbsLeft();
    my $winTop  = $winAlbums->AbsTop();
    $CONFIG{'WINALBUMS_LEFT'} = $winLeft;
    $CONFIG{'WINALBUMS_TOP'}  = $winTop;
    &saveConfig(\%CONFIG);
  }
  return(-1);

}  #--- End winAlbums_Terminate

#--------------------------#
sub winFriends
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    $winFriends->GridFriends->DeleteNonFixedRows();
    $winFriends->tfFriendName->Text('');
    # Start the thread
    $THR = threads->create(\&winFriendsThr);
    usleep(500000);
    $winFriends->GridFriends->AutoSize();
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINFRIENDS_LEFT'} and $CONFIG{'WINFRIENDS_TOP'}) {
      $winFriends->Left($CONFIG{'WINFRIENDS_LEFT'});
      $winFriends->Top($CONFIG{'WINFRIENDS_TOP'});
    } else { $winFriends->Center(); }
		$winFriends->GridFriends->BringWindowToTop();
    $winFriends->DoModal();
  }

}  #--- End winFriends

#--------------------------#
sub winFriends_Resize
#--------------------------#
{
  if ($START) {
    $winFriends->tfFriendName->Width($winFriends->ScaleWidth()-460);
    $winFriends->cbFriendsFormat->Left($winFriends->ScaleWidth()-235);
		$winFriends->chFriendsOpenOutput->Left($winFriends->ScaleWidth()-175);
    $winFriends->tfDirSaveFriends->Width($winFriends->ScaleWidth()-450);
    $winFriends->btnDirSaveFriends->Left($winFriends->ScaleWidth()-226);
    $winFriends->btnBrowseDirSaveFriends->Left($winFriends->ScaleWidth()-202);
    $winFriends->chSaveFriendsDir->Left($winFriends->ScaleWidth()-175);
    $winFriends->lblInProgress->Left($winFriends->ScaleWidth()-233);
    $winFriends->btnFriendsRefresh->Left($winFriends->ScaleWidth()-27);
    $winFriends->GridFriends->Width($winFriends->ScaleWidth()-146);
    $winFriends->GridFriends->Height($winFriends->ScaleHeight()-140);
    $winFriends->GridFriends->AutoSize();
    $winFriends->GridFriends->ExpandLastColumn();
    $winFriends->btnFriendsOk->Left(($winFriends->ScaleWidth()/2)-10);
    $winFriends->btnFriendsOk->Top($winFriends->ScaleHeight()-35);
  }

}  #--- End winFriends_Resize

#--------------------------#
sub btnFriendsRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    $winFriends->GridFriends->DeleteNonFixedRows();
    $winFriends->tfFriendName->Text('');
    # Start the thread
    $THR = threads->create(\&winFriendsThr);
  }
  
}  #--- End btnFriendsRefresh_Click

#--------------------------#
sub winFriendsThr
#--------------------------#
{
  # Local variables
  my $saveDir = $winFriends->tfDirSaveFriends->Text();
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($msgErr =~ /NS_ERROR_FILE_IS_LOCKED/) {
      # Restart a new thread to continue
      $THR = threads->create(\&winFriendsThr);
    } else {
      if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
			my $err = (split(/ at /, $msgErr))[0];
      Win32::GUI::MessageBox($winFriends, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
    }
  };
  $winFriends->GridFriends->DeleteNonFixedRows();
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      $winFriends->btnFriendsOk->Disable();
      Win32::GUI::MessageBox($winFriends, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  if ($mech->uri() =~ /facebook.com/) {
    # Valid current page
    $winFriends->btnFriendsOk->Disable();
    $winFriends->lblInProgress->Text($STR{'wait'}.'...');
    $winFriends->ChangeCursor($HOURGLASS);
    my $currURL = $mech->uri();
    if ($currURL =~ /#$/) { chop($currURL); }
    my $currTitle;
    if ($currURL !~ /\/friends\/?$/ and $currURL !~ /\&sk=friends/) {
      # Trying to get the good page
      if ($currURL =~ /https:\/\/(?:www|web).facebook.com\/profile.php\?id=([^\/\&]+)/) {
        my $profilID = $1;
        my $goodURL = "https://www.facebook.com/profile.php?id=$profilID&sk=friends";
        ($currURL, $currTitle) = &loadPage(\$mech, $goodURL);
      } elsif ($currURL =~ /https:\/\/(?:www|web).facebook.com\/([^\/\?]+)/) {
        my $goodURL = "https://www.facebook.com/$1/friends";
        ($currURL, $currTitle) = &loadPage(\$mech, $goodURL);
      }
      # Re evaluate current page
      if (($currURL !~ /\/friends\/?$/ and $currURL !~ /\&sk=friends/) or $currTitle =~ /Page Not Found/) {
        $winFriends->btnFriendsOk->Disable();
        Win32::GUI::MessageBox($winFriends, $STR{'warn3'}, $STR{'warn2T'}, 0x40010);
        $winFriends->ChangeCursor($ARROW);
        $winFriends->lblInProgress->Text('');
        threads->exit();
      } else {
        if    ($currURL =~ /https:\/\/(?:www|web).facebook.com\/profile.php\?id=([^\/\&]+)/) { $currTitle = $1; }
        elsif ($currURL =~ /https:\/\/(?:www|web).facebook.com\/([^\/\?]+)/                ) { $currTitle = $1; }
        $currTitle =~ s/[\<\>\:\"\/\\\|\?\*]/-/g;
        $winFriends->tfFriendName->Text("$currTitle - $STR{'friends'}");
      }
    # You are in the right page
    } else {
      if    ($currURL =~ /https:\/\/(?:www|web).facebook.com\/profile.php\?id=([^\/\&]+)/) { $currTitle = $1; }
      elsif ($currURL =~ /https:\/\/(?:www|web).facebook.com\/([^\/\?]+)/                ) { $currTitle = $1; }
      $currTitle =~ s/[\<\>\:\"\/\\\|\?\*]/-/g;
      $winFriends->tfFriendName->Text("$currTitle - $STR{'friends'}");
    }
    # List available categories
    if ($winFriends->tfFriendName->Text()) {
      my %categories;
      my $header = $mech->selector('div._3dc.lfloat._ohe._5brz', one => 1)->{innerHTML};
      my @div    = split(/\>/, $header);
      foreach (@div) {
        if (/href=\"([^\"]+)\"/) {
          my $url  = $1;
          $url =~ s/&amp;/&/g;
          my $catName;
          if (/name=\"([^\"]+)\"/) { $catName = $1; }
          if ($catName) {
						my $cat = encode($CONFIG{'CHARSET'}, $catName);
						$cat =~ s/[\<\>\:\"\/\\\|\?\*]/_/g;
            $categories{$cat}{name} = $catName;
            $categories{$cat}{url}  = $url;
            if (/aria-controls=\"([^\"]+)\"/) {
              my $catId = $1;
              $categories{$cat}{catId} = $catId;
            }
          }
        }
      }
      foreach my $cat (sort keys %categories) {
        if ($categories{$cat} and my $i = $winFriends->GridFriends->InsertRow($cat, -1)) {
          $winFriends->GridFriends->SetCellText($i, 0, ''        );
          $winFriends->GridFriends->SetCellType($i, 0, GVIT_CHECK);
          $winFriends->GridFriends->SetCellCheck($i, 0, 1);
          $winFriends->GridFriends->SetCellText($i, 1, $cat                    );
          $winFriends->GridFriends->SetCellText($i, 2, $categories{$cat}{catId});
          $winFriends->GridFriends->SetCellText($i, 3, $categories{$cat}{url}  );
          $winFriends->GridFriends->AutoSize();
          $winFriends->GridFriends->ExpandLastColumn();
          $winFriends->GridFriends->Refresh();
        }
      }
    }
  } else { Win32::GUI::MessageBox($winFriends, $STR{'warn4'}, $STR{'err1T'}, 0x40010); }
  $winFriends->ChangeCursor($ARROW);
  $winFriends->lblInProgress->Text('');
  &isDumpFriendsReady();

}  #--- End winFriendsThr

#--------------------------#
sub tfFriendName_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winFriends->tfDirSaveFriends->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winFriends->chSaveFriendsDir->Checked()) {
    $CONFIG{'DIR_SAVE_FRIENDS'} = $saveDir;
    &saveConfig(\%CONFIG);
  }
  &isDumpFriendsReady();

}  #--- End tfFriendName_Change

#--------------------------#
sub cbFriendsFormat_Change
#--------------------------#
{
  # No profile icon for txt format
  if ($winFriends->cbFriendsFormat->GetCurSel() == 2) {
    $winFriends->chFriendsProfileIcons->Disable();
  } else { $winFriends->chFriendsProfileIcons->Enable(); }
  
}  #--- End cbFriendsFormat_Change

#--------------------------#
sub tfDirSaveFriends_Change
#--------------------------#
{
  # Local variables
  my $friendName = $winFriends->tfFriendName->Text();
  my $saveDir    = $winFriends->tfDirSaveFriends->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winFriends->chSaveFriendsDir->Checked()) {
    $CONFIG{'DIR_SAVE_FRIENDS'} = $saveDir;
    &saveConfig(\%CONFIG);
  }
  &isDumpFriendsReady();

}  #--- End tfDirSaveFriends_Change

#--------------------------#
sub btnDirSaveFriends_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winFriends->tfDirSaveFriends->Text();
  my $dir;# Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) {
      while ($lastDir =~ /[^\\]$/) { chop($lastDir); }
    }
    $dir = Win32::GUI::BrowseForFolder( -owner      => $winFriends    ,
                                        -title      => $STR{'selDir'} ,
                                        -folderonly => 1              ,
                                        -directory  => $lastDir       ,
                                        -newui      => 1              , );
  } else {
    $dir = Win32::GUI::BrowseForFolder( -owner      => $winFriends    ,
                                        -title      => $STR{'selDir'} ,
                                        -folderonly => 1              ,
                                        -newui      => 1              , );
  }
  # Selected folder
  if ($dir and -d $dir) {
    if ($dir =~ /\\$/) { chop($dir); }
    $winFriends->tfDirSaveFriends->Text($dir);
  }
  
}  #--- End btnDirSaveFriends_Click

#--------------------------#
sub btnBrowseDirSaveFriends_Click
#--------------------------#
{
	&exploreDir($winFriends->tfDirSaveFriends->Text());
	
}  #--- End btnBrowseDirSaveFriends_Click

#--------------------------#
sub chSaveFriendsDir_Click
#--------------------------#
{
  # Local variables
  my $dir = $winFriends->tfDirSaveFriends->Text();
  # If directory exists, save it
  if ($dir and -d $dir and $winFriends->chSaveFriendsDir->Checked()) {
    $CONFIG{'REMEMBER_SAVE_FRIENDS'} = 1;
    $CONFIG{'DIR_SAVE_FRIENDS'} = $dir;
    &saveConfig(\%CONFIG);
  # Don't save
  } elsif (!$winFriends->chSaveFriendsDir->Checked()) {
    $CONFIG{'REMEMBER_SAVE_FRIENDS'} = 0;
    delete($CONFIG{'DIR_SAVE_FRIENDS'});
    &saveConfig(\%CONFIG);
  }

}  #--- End chSaveFriendsDir_Click

#--------------------------#
sub chFriendsProfileIcons_Click
#--------------------------#
{
  # Save the choice
  if ($winFriends->chFriendsProfileIcons->Checked()) {
    $CONFIG{'FRIENDS_INCLUDE_ICONS'} = 1;
    &saveConfig(\%CONFIG);
  # Don't save
  } else {
    $CONFIG{'FRIENDS_INCLUDE_ICONS'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chFriendsProfileIcons_Click

#--------------------------#
sub chFriendsOpenOutput_Click
#--------------------------#
{
  # Save the choice
  if ($winFriends->chFriendsOpenOutput->Checked()) {
    $CONFIG{'FRIENDS_OPEN_OUTPUT'} = 1;
    &saveConfig(\%CONFIG);
  # Don't save
  } else {
    $CONFIG{'FRIENDS_OPEN_OUTPUT'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chFriendsOpenOutput_Click

#--------------------------#
sub GridFriends_Click
#--------------------------#
{
  # Local variables
  my ($row, $column) = @_;
  # Select
  if (!$column) {
    my $selStatus = $winFriends->GridFriends->GetCellCheck($row, $column);
    if (!$row) {
      # Check all
      if (!$selStatus) {
				for (my $i = 0; $i < $winFriends->GridFriends->GetRows(); $i++) { $winFriends->GridFriends->SetCellCheck($i, 0, 1); }
      # Uncheck all
			} else {
				for (my $i = 0; $i < $winFriends->GridFriends->GetRows(); $i++) { $winFriends->GridFriends->SetCellCheck($i, 0, 0); }
			}
    } else {
      # Check
      if (!$selStatus) { $winFriends->GridFriends->SetCellCheck($row, $column, 1); }
      # Uncheck
      else             { $winFriends->GridFriends->SetCellCheck($row, $column, 0); }
    }
  }
  return(1);

}  #--- End GridFriends_Click

#--------------------------#
sub isDumpFriendsReady
#--------------------------#
{
  # Local variables
  my $saveDir    = $winFriends->tfDirSaveFriends->Text();
  my $friendName = $winFriends->tfFriendName->Text();
  # Valid directory and valid name for save ?
  if (!$saveDir or !(-d $saveDir) or !$friendName) { $winFriends->btnFriendsOk->Disable(); return(0); }
  # Friends category loaded and at least one checked ?
  my $friendsChecked = 0;
  for (my $i = 1; $i < $winFriends->GridFriends->GetRows(); $i++) {
    my $selStatus = $winFriends->GridFriends->GetCellCheck($i, 0);
    if ($selStatus == 1) {
      $friendsChecked = 1;
      last;
    }
  }
  if (!$friendsChecked) { $winFriends->btnFriendsOk->Disable(); return(0); }
  $winFriends->btnFriendsOk->Enable();

}  #--- End isDumpFriendsReady

#--------------------------#
sub btnFriendsOk_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Remember position
    if ($winConfig->chRememberPos->Checked()) {
      my $winLeft = $winFriends->AbsLeft();
      my $winTop  = $winFriends->AbsTop();
      $CONFIG{'WINFRIENDS_LEFT'} = $winLeft;
      $CONFIG{'WINFRIENDS_TOP'}  = $winTop;
      &saveConfig(\%CONFIG);
    }
    # Local variables
    my $friendName = $winFriends->tfFriendName->Text();
    $friendName    =~ s/[\<\>\:\"\/\\\|\?\*]/-/g;
    my $saveDir    = $winFriends->tfDirSaveFriends->Text();
    my %listCatFriends;	# Friend categories and urls
    my $nbrCatFriends   = 0;
    my $posPb1          = 0;
    my $parsingDone     = 0;
    my $nbrFriendsDone  = 0;
    my $nbrRetries      = 0;
    if ($friendName and -d $saveDir) {
      # Start the thread
      $THR = threads->create(\&dumpFriends, $friendName, $saveDir, \%listCatFriends, $nbrCatFriends,
                             $nbrFriendsDone, $posPb1, $parsingDone, $nbrRetries);
      return(-1);
    } else { Win32::GUI::MessageBox($win, $STR{'err5'}, $STR{'err1T'}, 0x40010); }
  }

}  #--- End btnFriendsOk_Click

#--------------------------#
sub dumpFriends
#--------------------------#
{
  # Local variables
  my ($friendName, $saveDir, $refListCatFriends, $nbrCatFriends, $nbrFriendsDone, $posPb1, $parsingDone, $nbrRetries) = @_;
  my $includeIcons = $winFriends->chFriendsProfileIcons->Checked();
  my $format       = $winFriends->cbFriendsFormat->GetCurSel(); # report format
  my $firstExec    = 0;
  # Cancel button
  $SIG{'KILL'} = sub {
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'dumpFriendsC'});
    # Turn off progress bar
    $winPb->lblPbCurr1->Text('');
    $winPb->lblCount1->Text('');
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    $winPb->pbWinPb1->SetPos(0);
    $winPb->pbWinPb2->SetPos(0);
    &winPb_Terminate;
    threads->exit();
  };
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
    $win->ChangeCursor($ARROW);
    $posPb1 = $winPb->pbWinPb1->GetPos();
    # Retry 10 times
    if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) {
      $nbrRetries++;
      # Progress window
      $winPb->pbWinPb2->SetPos(0);
      $winPb->lblPbCurr2->Text('');
      $winPb->lblCount2->Text('');
    }
    if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
      # Restart a new thread to continue
      if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $winPb->lblPbCurr1->Text($STR{'crash'}.'...'); }
      sleep(2);
      $THR = threads->create(\&dumpFriends, $friendName, $saveDir, $refListCatFriends, $nbrCatFriends,
                             $nbrFriendsDone, $posPb1, $parsingDone, $nbrRetries);
    } else {
			my $err = (split(/ at /, $msgErr))[0];
			Win32::GUI::MessageBox($winPb, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    }
    # Kill this thread
    threads->exit();
  };
  # First execution, must gather friends category and url
  if (!$posPb1 and !$nbrCatFriends) {
    $firstExec = 1;
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'dumpFriendsP'}.'...');
    for (my $i = 1; $i < $winFriends->GridFriends->GetRows(); $i++) {
      my $selStatus = $winFriends->GridFriends->GetCellCheck($i, 0);
      if ($selStatus == 1) {
        my $catName = $winFriends->GridFriends->GetCellText($i, 1);
        my $catid   = $winFriends->GridFriends->GetCellText($i, 2);
        my $catURL  = $winFriends->GridFriends->GetCellText($i, 3);
        $$refListCatFriends{$catName}{id}   = $catid;
        $$refListCatFriends{$catName}{url}  = $catURL;
        $$refListCatFriends{$catName}{name} = $catName;
      }
    }
    # Number of categories
    $nbrCatFriends = keys %{$refListCatFriends};
  } # else, resume after a crash
  if ($nbrCatFriends > 0) {
    my $count1;
    # First execution, turn on the progress window
    if ($firstExec == 1) {
      # Turn on progress bar
      $winPb->Center($winFriends);
      $winPb->Show();
      $win->Disable();
      $winPb->pbWinPb1->SetRange(0, $nbrCatFriends);
      $winPb->pbWinPb1->SetPos(0);
      $winPb->pbWinPb1->SetStep(1);
      $winPb->lblPbCurr1->Text('');
      $winPb->lblCount1->Text('');
      $count1 = 0;
    # If on resume state, get number of friends cat left
    } else {
      my $nbrCurrCatFriends = keys %{$refListCatFriends};
      $count1 = $nbrCatFriends - $nbrCurrCatFriends;
    }
    # Parse each friend category page
    if (!$parsingDone) {
      # Make folders
      if (!-d "$saveDir\\temp") { mkdir("$saveDir\\temp"); }
      if (!-d "$saveDir\\images_$friendName" and $includeIcons) { mkdir("$saveDir\\images_$friendName"); }
      # Connect to current tab in Firefox
      my $mechFriends = WWW::Mechanize::Firefox->new(tab => 'current', autodie => 0);
      foreach my $cat (sort keys %{$refListCatFriends}) {
        my $htmlPage;
        my @friends;
        my $nbrFriends;
        # Check status for the current category ($$refListCatFriends{$cat}{status})
        # 1 : Opening
        # 2 : Scrolling done
        # 3 : Downloading done
        # 4 : Parsing done
        
        # Opening the Friends Category Tab
        if (!exists($$refListCatFriends{$cat}{status})) {
          $winPb->lblPbCurr1->Text("$STR{'opening'}: $cat");
          $winPb->lblCount1->Text("$count1/$nbrCatFriends");
          $winPb->lblPbCurr2->Text('');
          $winPb->lblCount2->Text('');
          $winPb->pbWinPb2->SetPos(0);
          &selectCatFriendPage(\$mechFriends, $cat);
					sleep($CONFIG{'TIME_TO_WAIT'});
          $$refListCatFriends{$cat}{status} = 1; # Opening done
        }
        # Scrolling the Friends Category Tab
        if ($$refListCatFriends{$cat}{status} == 1) {
          $winPb->lblPbCurr1->Text("$STR{'scrolling'}: $cat");
          &scrollFriendPage(\$mechFriends, $CONFIG{'TIME_TO_WAIT'});
          $$refListCatFriends{$cat}{status} = 2; # Scrolling done
        }
        # Saving the Friends Category Tab
        if ($$refListCatFriends{$cat}{status} == 2) {
          $winPb->lblPbCurr1->Text("$STR{'saving'}: $cat");
          $htmlPage = "$saveDir\\temp\\page.html";
					if (!-f $htmlPage or $includeIcons or !$winConfig->chDelTempFiles->Checked()) {
						&saveCurrentTab(\$mechFriends, $includeIcons, $htmlPage, "$saveDir\\temp");
					}
					$winPb->lblPbCurr2->Text('');
          $$refListCatFriends{$cat}{status} = 3; # Downloading done
        }
        # Parsing the Friends Category Tab
        my $nbrFriendsDone = keys %{$$refListCatFriends{$cat}{'profilOrder'}};
        if ($$refListCatFriends{$cat}{status} == 3) {
          $winPb->lblPbCurr1->Text("$STR{'parsing'}: $cat");
          # Parse by section and groups
          # Load content from file
          if (-T $htmlPage) {
            if (open(my $fhTemp, "<:encoding(UTF-8)", $htmlPage)) {
              my $file_as_string = do { local $/ = <$fhTemp> };
              $file_as_string    =~ s/[\r\n]//g;
							if ($file_as_string =~ /a[^\>]+_3c_ _3s-[^\>]+name="([^\"]+)"/) { $$refListCatFriends{$cat}{name} = $1; } # Get original utf-8 current cat name
              my @partsID   = split(/\:/, $$refListCatFriends{$cat}{id});
              my $id        = pop(@partsID);
              my $separator = join(':', @partsID);
              my @sections  = split(/id=\"$separator/, $file_as_string);
              my $section;
              foreach (@sections) { if (/^\:$id\"/) { $section = $_; last; } }
							if ($section =~ /_3cz/) { $section = (split(/_3cz/, $section))[0]; }
              @friends = split(/_698/, $section);
              shift(@friends);
              $nbrFriends = scalar(@friends);
              if (!$nbrFriends) {
                @friends = split(/fbProfileBrowserListItem/, $section); # Followers category
                shift(@friends);
                $nbrFriends = scalar(@friends);
              }
              close($fhTemp);
            }
          }
          # Progress bar
          $winPb->pbWinPb2->SetRange(0, $nbrFriends);
          $winPb->pbWinPb2->SetPos($nbrFriendsDone);
          $winPb->pbWinPb2->SetStep(1);
          $winPb->lblCount2->Text("$nbrFriendsDone/$nbrFriends");
          # Parse friends details
          my $k = 0;
          foreach my $friend (@friends) {
            if ($k >= $nbrFriendsDone) {
              my $url;
              my $id;
              my $img;
              # Url and Img
              if ($friend =~ / href="([^\&\"]+)(?:&|")[^\>]+hovercard\/user.php\?id=([^\&\"]+)(?:&|")[^\>]*>/) {
                $url = $1;
                $id  = $2;
              }
              # Img
              if ($friend =~ /<img class="_s0[^\"]+_r[wv] img" src="([^\"]+)" /) { $img = $1; }
              # Minimum details required
              if ($url and $id and $img) {
                $winPb->lblPbCurr2->Text("$STR{'friendsExtract'} $id...");
                if ($includeIcons and ($img =~ /\/([^\/\?]+)\?/ or $img =~ /(\w+\.jpg)/)) { # Include profile icons
                  my $imgFilename = $1; # Replace image name by profil id
									my $encID    = encode('utf8', $id);
									my $encImgFN = encode('utf8', $imgFilename);
                  rcopy("$saveDir\\temp\\$encImgFN", "$saveDir\\images_$friendName\\$encID\.jpg"); # Copy image
                  $$refListCatFriends{$cat}{profilImg}{$id} = "images_$friendName\\$encID\.jpg";
                } elsif ($format == 1) { $$refListCatFriends{$cat}{profilImageUrl}{$id} = $img; } # HTML Report
                $$refListCatFriends{$cat}{profilUrl}{$id} = $url;
                $$refListCatFriends{$cat}{profilOrder}{$nbrFriendsDone} = $id;
                # Gather profil name
                my $url2 = quotemeta($url);
                if ($friend =~ /<(?:div|span) class="fsl fwb fcb"><a href="$url2[^\>]+>([^\<]+)</) {
                  $$refListCatFriends{$cat}{profilName}{$id} = $1;
                }
                # Gather details (if available)
                if ($friend =~ /<span class="_50hf fsm fwn">(.+)<\/span><\/li>/) {
                  my $details = $1;
                  $details =~ s/<[^\>]+>//g;
                  $details = decode_entities($details);
                  $$refListCatFriends{$cat}{profilDetails}{$id} = $details;
                }
              }
              $winPb->pbWinPb2->StepIt();
              $nbrFriendsDone++;
              $winPb->lblCount2->Text("$k/$nbrFriends");
            }
            $k++;
          }
          $$refListCatFriends{$cat}{status} = 4; # Parsing done
          $winPb->pbWinPb1->StepIt();
          $winPb->lblCount1->Text("$count1/$nbrCatFriends");
        }
        $count1++;
        $nbrFriendsDone = 0;
        if ($count1 == $nbrCatFriends) { $parsingDone = 1; }
      }
    }
    # Parsing done, create the report
    $count1 = 0;
    $winPb->lblPbCurr1->Text($STR{'createOutput'}.'...');
    $winPb->lblCount1->Text('');
    if ($nbrCatFriends) {
      # Progress 1
      $winPb->lblCount1->Text("$count1/$nbrCatFriends");
      $winPb->pbWinPb1->SetRange(0, $nbrCatFriends);
      $winPb->pbWinPb1->SetPos(0);
      $winPb->pbWinPb1->SetStep(1);
      # Create and open the XLSX file
      my $filename;
      if (!$format) {
        $filename = "$saveDir\\$friendName\.xlsx";
				my $excel;
				my $count = 1;
				while (!($excel = Excel::Writer::XLSX->new($filename))) { # If file is already open, must be renamed
					$filename = "$saveDir\\$friendName [".$count++."]\.xlsx";
					if ($count == 10) { last; } # Stop after 10 attempts
				}
        # One sheet per category
        foreach my $cat (sort keys %{$refListCatFriends}) {
          &createExcelSheetWithDetails(\$excel, $cat, $$refListCatFriends{$cat}, $includeIcons, $saveDir);
          $count1++;
          $winPb->lblCount1->Text("$count1/$nbrCatFriends");
          $winPb->pbWinPb1->StepIt();
        }
        $excel->close();
      # HTML
      } elsif ($format == 1) {
        $filename = &createHTMLFriends($friendName, $refListCatFriends, $nbrCatFriends, $includeIcons, $saveDir);
      # TXT
      } else {
        $filename = "$saveDir\\$friendName.txt";
        &createTXTFriends($friendName, $filename, $refListCatFriends, $nbrCatFriends, $includeIcons, $saveDir);
      }
      # Open the file
      if ($winFriends->chFriendsOpenOutput->Checked()) { $win->ShellExecute('open', $filename,'','',1); }
    }
    # Turn off progress bar
    $winPb->lblPbCurr1->Text('');
    $winPb->lblCount1->Text('');
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    $winPb->pbWinPb1->SetPos(0);
    $winPb->pbWinPb2->SetPos(0);
    &winPb_Terminate;
    # Delete temporary files
    if ($winConfig->chDelTempFiles->Checked()) { remove_tree("$saveDir\\temp"); }
  }
  $win->Tray->Change(-tip => $STR{'dumpFriendsF'});
  if (!$win->IsVisible()) {
    $win->Tray->Change( -balloon_icon  => 'info'               ,
                        -balloon_title => 'ExtractFace'        ,
                        -balloon_tip   => $STR{'dumpFriendsF'} , );
    $win->Tray->ShowBalloon(1);
  }
  $win->ChangeCursor($ARROW);

}  #--- End dumpFriends

#--------------------------#
sub createExcelSheetWithDetails
#--------------------------#
{
  # Local variables
  my ($refExcel, $sheetName, $refData, $includeIcons, $saveDir) = @_;
  my $encodedName = encode($CONFIG{'CHARSET'}, $sheetName);
  $winPb->lblPbCurr1->Text("$STR{'createSheet'}: $encodedName");
  # Progress 2
  my $nbrItems = scalar(keys %{$$refData{profilOrder}});
  $winPb->lblPbCurr2->Text('');
  $winPb->pbWinPb2->SetRange(0, $nbrItems);
  $winPb->pbWinPb2->SetPos(0);
  $winPb->pbWinPb2->SetStep(1);
	$winPb->lblCount2->Text("0/$nbrItems");
  my $count2 = 0;
  my $sheet  = $$refExcel->add_worksheet($sheetName); # Add a sheet
  # Formats 
  my $format = $$refExcel->add_format();
  $format->set_bold();
  $format->set_align( 'center' );
  $format->set_align( 'vcenter' );
  my $format2 = $$refExcel->add_format();
  $format2->set_align( 'center' );
  $format2->set_align( 'vcenter' );
  my $format3 = $$refExcel->add_format();
  $format3->set_align( 'top' );
  my $j = 0; # Column no
  # Headers
  if ($includeIcons) { $sheet->write( 0, $j, $STR{'image'}     , $format ); $j++; }
  $sheet->write( 0, $j, $STR{'profilID'}  , $format ); $j++;
  $sheet->write( 0, $j, $STR{'url'}       , $format ); $j++;
  $sheet->write( 0, $j, $STR{'name'}      , $format ); $j++;
  $sheet->write( 0, $j, $STR{'details'}   , $format ); $j++;
  if ($includeIcons) { $sheet->write( 0, $j, $STR{'imgPath'}   , $format ); $j++; }
  $sheet->write( 0, $j, $STR{'originURL'} , $format );
  # Create content
  my $i = 1; # Row no
  my $maxWidthCol1 = 5;
  my $maxWidthCol2 = 0;
  my $maxWidthCol3 = 0;
  my $maxWidthCol4 = 0;
  my $maxWidthCol5 = 0;
  my $maxWidthCol6 = 0;
  my $maxWidthCol7 = length($$refData{'url'});
  foreach my $no (sort {$a <=> $b} keys %{$$refData{profilOrder}}) {
    $j = 0;
    my $id = $$refData{profilOrder}{$no};
    $winPb->lblPbCurr2->Text("$STR{'writing'}: $id");
    # Image column
    if ($includeIcons) {
      my $imgPath = "$saveDir\\$$refData{profilImg}{$id}";
      my $info = image_info($imgPath);
      if (!$info->{error}) { # Insert only if image is not corrupted
        $sheet->insert_image($i, $j, $imgPath); # Ignore if not a valid image
        if ($info->{height}) {
          my $colHeight = $info->{height} / 1.33;
          $sheet->set_row($i, $colHeight);
        }
        else { $sheet->set_row($i, 30); }
        if ($info->{width}) {
          my $colWidth = $info->{width} / 7.2;
          if ($colWidth > $maxWidthCol1) { $maxWidthCol1 = $colWidth; }
        }
      }
      $j++;
    }
    # Profil ID column
    $sheet->write_string($i, $j, $id);
    $sheet->set_column($j, 6, undef, $format3);
    if (length($id) > $maxWidthCol2) { $maxWidthCol2 = length($id); }
    $j++;
    # URL column
    $sheet->write($i, $j, $$refData{profilUrl}{$id});
    if (length($$refData{profilUrl}{$id}) > $maxWidthCol3) {
      $maxWidthCol3 = length($$refData{profilUrl}{$id});
    }
    $j++;
    # Name column
    if ($$refData{'profilName'}{$id}) {
      $sheet->write($i, $j, $$refData{profilName}{$id});
      if (length($$refData{profilName}{$id}) > $maxWidthCol4) {
        $maxWidthCol4 = length($$refData{profilName}{$id});
      }
    }
    $j++;
    # Profil Details column
    if ($$refData{'profilDetails'}{$id}) {
      $sheet->write($i, $j, $$refData{profilDetails}{$id});
      if (length($$refData{profilDetails}{$id}) > $maxWidthCol5) {
        $maxWidthCol5 = length($$refData{profilDetails}{$id});
      }
    }
    $j++;
    # Image Path column
    if ($includeIcons) {
      $sheet->write($i, $j, $$refData{profilImg}{$id});
      if (length($$refData{profilImg}{$id}) > $maxWidthCol6) {
        $maxWidthCol6 = length($$refData{'profilImg'}{$id});
      }
      $j++;
    }
    # Original URL column
    $sheet->write($i, $j, $$refData{'url'});
    # Ajust column sizes
    $j = 0;
    if ($includeIcons) { $sheet->set_column(0, 0, $maxWidthCol1, $format2); $j++; }
    $sheet->set_column($j, $j, $maxWidthCol2); $j++;
    $sheet->set_column($j, $j, $maxWidthCol3); $j++;
    $sheet->set_column($j, $j, $maxWidthCol4); $j++;
    $sheet->set_column($j, $j, $maxWidthCol5); $j++;
    if ($includeIcons) { $sheet->set_column($j, $j, $maxWidthCol6); $j++; }
    $sheet->set_column($j, $j, $maxWidthCol7);
    $i++;
		$winPb->pbWinPb2->StepIt();
		$count2++;
		$winPb->lblCount2->Text("$count2/$nbrItems");
  }

}  #--- End createExcelSheetWithDetails

#--------------------------#
sub createHTMLFriends
#--------------------------#
{
  # Local variables
  my ($friendName, $refListCatFriends, $nbrCatFriends, $includeIcons, $saveDir) = @_;
  my $firstPage; # First page is the main page
  my $first = 0;
  my $count = 0;
  # List of pages
  my %listPages;
  foreach my $cat (sort keys %{$refListCatFriends}) {
    my $name = $$refListCatFriends{$cat}{name};
    my $url  = (split(/\//, $$refListCatFriends{$cat}{url}))[-1];
    if ($url =~ /([^\?]+)/) {
      my $page = $1;
      if ($page =~ /\%3A(\d+)$/) { $listPages{$name} = "$friendName - $1\.html";    }
      else                       { $listPages{$name} = "$friendName - $page\.html"; }
    }
  }
  # Create one page per category
  foreach my $cat (sort keys %{$refListCatFriends}) {
    my $encodedName = encode($CONFIG{'CHARSET'}, $cat);
    $winPb->lblPbCurr1->Text("$STR{'createPage'}: $encodedName");
    my $filename = "$saveDir\\$listPages{$$refListCatFriends{$cat}{name}}";
    if ($first == 0) { $firstPage = $filename; $first = 1; } # Keep the filename of the first page
    open(HTML, ">:encoding(UTF-8)", $filename);
    print HTML "<!DOCTYPE html>\n";
    print HTML "<html>\n<head>\n<title>$$refListCatFriends{$cat}{name}</title>\n";
    print HTML "<meta charset=\"UTF-8\">\n";
		print HTML "<style>\n";
		print HTML "table, th, td {\n";
		print HTML "  border: 1px solid black;\n";
		print HTML "  border-collapse: collapse;\n";
		print HTML "}\n";
		print HTML "th, td {\n";
		print HTML "  padding: 5px;\n";
		print HTML "}\n";
		print HTML "</style>\n";
    print HTML "</head>\n";
    print HTML "<body>\n";
		print HTML "<h1 style=\"color:#003300;font-size: 18pt;font-variant: small-caps;font-weight: bold;\;text-align: center;\">";
    print HTML "$$refListCatFriends{$cat}{name}</h1>\n";
    print HTML "<table style=\"margin: auto;\">\n";
    print HTML "<tr><th colspan=4 style=\"height: 50px; color:#003300; background-color:#EEEEEE; font-size: 14pt; font-variant: small-caps; font-weight: bold;\">\n";
    my $header;
    foreach my $catListPages (sort keys %listPages) {
      if ($catListPages eq $cat) { $header .= "$catListPages - "; }
      else                       { $header .= "<a href=\"./$listPages{$catListPages}\">$catListPages</a> - "; }
    }
    chop($header); chop($header); chop($header);
    print HTML "$header</th></tr>\n";
    print HTML "<tr><td colspan=4 style=\"text-align: center;\">Origin url: <a href=\"$$refListCatFriends{$cat}{url}\">$$refListCatFriends{$cat}{url}</a></td></tr>\n";
    my $col = 0; # 2 columns per friend, first is profile icon, second is details
    foreach my $no (sort {$a <=> $b} keys %{$$refListCatFriends{$cat}{profilOrder}}) {
      if ($col == 0) { print HTML "<tr>"; }
      if (my $id = $$refListCatFriends{$cat}{profilOrder}{$no}) {
        if ($$refListCatFriends{$cat}{profilImg}{$id}) { print HTML "<td><img src=\"$$refListCatFriends{$cat}{profilImg}{$id}\" alt=\"\"></td>";      }
        else                                           { print HTML "<td><img src=\"$$refListCatFriends{$cat}{profilImageUrl}{$id}\" alt=\"\"></td>"; }
        $col++;
        print HTML "<td><strong>Name</strong>: $$refListCatFriends{$cat}{profilName}{$id}<br>";
        print HTML "<strong>Profile ID</strong>: $id</strong><br>";
        print HTML "<strong>Profile url</strong>: <a href=\"$$refListCatFriends{$cat}{profilUrl}{$id}\" target=\"_blank\">$$refListCatFriends{$cat}{profilUrl}{$id}</a><br>";
        print HTML "<strong>Details</strong>: $$refListCatFriends{$cat}{profilDetails}{$id}</td>";
        $col++;
      } else { print HTML "<td></td><td></td>"; $col += 2; }
      if ($col == 4) { print HTML "</tr>\n"; $col = 0; }
    }
    print HTML "</body>\n</html>";
    close(HTML);
    $count++;
    $winPb->lblCount1->Text("$count/$nbrCatFriends");
    $winPb->pbWinPb1->StepIt();
  }
  return($firstPage);  
  
}  #--- End createHTMLFriends

#--------------------------#
sub createTXTFriends
#--------------------------#
{
  # Local variables
  my ($friendName, $filename, $refListCatFriends, $nbrCatFriends, $includeIcons, $saveDir) = @_;
  my $count = 0;
  $winPb->lblPbCurr1->Text("$STR{'createTXT'}");
  open(my $txt, ">:encoding(UTF-8)", $filename);
  print $txt "CAT NAME\tCAT URL\tPROFILE ID\tURL\tNAME\tDETAILS\n"; # Header
  foreach my $cat (sort keys %{$refListCatFriends}) {
    foreach my $no (sort {$a <=> $b} keys %{$$refListCatFriends{$cat}{profilOrder}}) {
      my $id = $$refListCatFriends{$cat}{profilOrder}{$no};
      print $txt "$cat\t$$refListCatFriends{$cat}{url}\t$id\t$$refListCatFriends{$cat}{profilUrl}{$id}".
                 "\t$$refListCatFriends{$cat}{profilName}{$id}$$refListCatFriends{$cat}{profilDetails}{$id}\n";
    }
    $count++;
    $winPb->lblCount1->Text("$count/$nbrCatFriends");
    $winPb->pbWinPb1->StepIt();
  }
  close($txt);
  
}  #--- End createTXTFriends

#--------------------------#
sub winFriends_Terminate
#--------------------------#
{
  # Remember position
  if ($winConfig->chRememberPos->Checked()) {
    my $winLeft = $winFriends->AbsLeft();
    my $winTop  = $winFriends->AbsTop();
    $CONFIG{'WINFRIENDS_LEFT'} = $winLeft;
    $CONFIG{'WINFRIENDS_TOP'}  = $winTop;
    &saveConfig(\%CONFIG);
  }
  return(-1);

}  #--- End winFriends_Terminate

#--------------------------#
sub winEvent
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Reset window
    $winEvent->tfEventName->Text('');
    $winEvent->tfEventID->Text('');
    $winEvent->tfAuthorID->Text('');
    $winEvent->tfDataURL->Text('');
    $winEvent->chGoing->Text('Going');
    $winEvent->chMaybe->Text('Maybe');
    $winEvent->chInvited->Text('Invited');
    $winEvent->chDeclined->Text('Declined');
    $winEvent->chGoing->Checked(1);
    $winEvent->chMaybe->Checked(1);
    $winEvent->chInvited->Checked(1);
    $winEvent->chDeclined->Checked(1);
    # Start the thread
    $THR = threads->create(\&winEventThr);
    usleep(500000);
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINEVENT_LEFT'} and $CONFIG{'WINEVENT_TOP'}) {
      $winEvent->Left($CONFIG{'WINEVENT_LEFT'});
      $winEvent->Top($CONFIG{'WINEVENT_TOP'});
    } else { $winEvent->Center(); }
    $winEvent->DoModal();
  }

}  #--- End winEvent

#--------------------------#
sub btnEventRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Reset window
    $winEvent->tfEventName->Text('');
    $winEvent->tfEventID->Text('');
    $winEvent->tfAuthorID->Text('');
    $winEvent->tfDataURL->Text('');
    $winEvent->chGoing->Text('Going');
    $winEvent->chMaybe->Text('Maybe');
    $winEvent->chInvited->Text('Invited');
    $winEvent->chDeclined->Text('Declined');
    $winEvent->chGoing->Checked(1);
    $winEvent->chMaybe->Checked(1);
    $winEvent->chInvited->Checked(1);
    $winEvent->chDeclined->Checked(1);
    # Start the thread
    $THR = threads->create(\&winEventThr);
  }
  
}  #--- End btnEventRefresh_Click

#--------------------------#
sub winEventThr
#--------------------------#
{
  # Local variables
  my $saveDir = $winEvent->tfDirSaveEvent->Text();
  my $tempDir = "$USERDIR\\temp";
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($msgErr =~ /NS_ERROR_FILE_IS_LOCKED/) {
      # Restart a new thread to continue
      $THR = threads->create(\&winEventThr);
    } else {
      if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
			my $err = (split(/ at /, $msgErr))[0];
      Win32::GUI::MessageBox($winEvent, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
    }
  };
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      $winEvent->btnEventOk->Disable();
      Win32::GUI::MessageBox($winEvent, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  if ($mech->uri() =~ /facebook.com/) {
    # Valid current page
    my $currURL = $mech->uri();
    my $idEvent;
    if ($currURL =~ /https:\/\/(?:www|web).facebook.com\/events\/(\d+)\/?/) { $idEvent = $1; }
    else {
      $winEvent->btnEventOk->Disable();
      Win32::GUI::MessageBox($winEvent, $STR{'warn3'}, $STR{'warn2T'}, 0x40010);
      threads->exit();
    }
    $winEvent->ChangeCursor($HOURGLASS);
    $winEvent->lblInProgress->Text($STR{'gatherEvent'}.'...');
    # Gather event details
    my $eventDetailsURL = "https://www.facebook.com/events/ajax/guest_list/?acontext[ref]=51&acontext[source]=1&acontext[action_history]=[{%22surface%22%3A%22permalink%22%2C%22mechanism%22%3A%22surface%22%2C%22extra_data%22%3A[]}]&event_id=$idEvent&initial_tab=going&__pc=EXP1%3ADEFAULT&__asyncDialog=6&__a=1";
    if (!-d "$tempDir") { mkdir("$tempDir"); }
    my $localDataFile = "$tempDir\\data.txt";
    my $mechData = WWW::Mechanize::Firefox->new(create => 1, autodie => 0, );
    $mechData->get($eventDetailsURL, synchronize => 0);
    sleep($CONFIG{'TIME_TO_WAIT'});
    my $status = $mechData->save_content($localDataFile, $tempDir);
    while ($status->{currentState} != $status->{PERSIST_STATE_FINISHED}) { sleep(1); }
    # Parse html page
    open(my $tmp, $localDataFile);
    my $file_as_string = do { local $/ = <$tmp> };
    $file_as_string =~ s/[\r\n]//g;
    # Event ID
    if ($file_as_string =~ /"eventID":"([^\"]+)"/ ) {
      $winEvent->tfEventID->Text($1);
      $winEvent->tfEventName->Text($1);
    }
    # Author ID
    if ($file_as_string =~ /"authorID":"([^\"]+)"/) { $winEvent->tfAuthorID->Text($1); }
    # URL of content
    if ($file_as_string =~ /"prefetchURI":"([^\"]+)"/) {
      my $dataURL = $1;
      $dataURL =~ s#\\\/#\/#g;
      $dataURL =~ s/&amp;/&/g;
      $dataURL =~ s/\\u([[:xdigit:]]{4})/chr(hex $1)/eg;
      $dataURL = "https://www.facebook.com" . $dataURL . "&__pc=EXP1%3ADEFAULT&__a=1&__req=a";
      $winEvent->tfDataURL->Text($dataURL);
    }
    # Guest list name
    my %glText;
    if ($file_as_string =~ /"typeaheadSubtitles":{([^\}]+)}/) {
      my $data = $1;
      my @lists = split(/,/, $data);
      foreach (@lists) {
        my ($lname, $ltext) = split(/:/, $_);
        $lname =~ s/"//g;
        $ltext =~ s/"//g;
        $glText{$lname} = $ltext;
      }
    }
    # Guest list members count
    my %glCount;
    if ($file_as_string =~ /"adminRSVPNuxCount":0,"counts":{([^\}]+)}/) {
      my $data = $1;
      my @lists = split(/,/, $data);
      foreach (@lists) {
        my ($lname, $lcount) = split(/:/, $_);
        $lname =~ s/"//g;
        $glCount{$lname} = $lcount;
      }
    }
    close($tmp);
    # Adjust Guest list checkbox text
    if ($glCount{going}    and $glText{going}   ) {
      my $encodedStr = encode($CONFIG{'CHARSET'}, "$glText{going} [$glCount{going}]");
      $encodedStr =~ s/\\u([[:xdigit:]]{4})/chr(hex $1)/eg;
      $winEvent->chGoing->Text($encodedStr);
    }
    if ($glCount{maybe}    and $glText{maybe}   ) {
      my $encodedStr = encode($CONFIG{'CHARSET'}, "$glText{maybe} [$glCount{maybe}]");
      $encodedStr =~ s/\\u([[:xdigit:]]{4})/chr(hex $1)/eg;
      $winEvent->chMaybe->Text($encodedStr);
    }
    if ($glCount{invited}  and $glText{invited} ) {
      my $encodedStr = encode($CONFIG{'CHARSET'}, "$glText{invited} [$glCount{invited}]");
      $encodedStr =~ s/\\u([[:xdigit:]]{4})/chr(hex $1)/eg;
      $winEvent->chInvited->Text($encodedStr);
    }
    if ($glCount{declined} and $glText{declined}) {
      my $encodedStr = encode($CONFIG{'CHARSET'}, "$glText{declined} [$glCount{declined}]");
      $encodedStr =~ s/\\u([[:xdigit:]]{4})/chr(hex $1)/eg;
      $winEvent->chDeclined->Text($encodedStr);
    }
    # Delete temporary files
    if ($winConfig->chDelTempFiles->Checked()) { remove_tree($tempDir); }
  } else { Win32::GUI::MessageBox($winEvent, $STR{'warn4'}, $STR{'err1T'}, 0x40010); }
  $winEvent->lblInProgress->Text('');
  $winEvent->ChangeCursor($ARROW);
  &isDumpEventReady();

}  #--- End winEventThr

#--------------------------#
sub tfEventName_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winEvent->tfDirSaveEvent->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winEvent->chSaveEventDir->Checked()) {
    $CONFIG{'DIR_SAVE_EVENT'} = $saveDir;
    &saveConfig(\%CONFIG);
  }
  &isDumpEventReady();

}  #--- End tfEventName_Change

#--------------------------#
sub tfDirSaveEvent_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winEvent->tfDirSaveEvent->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winEvent->chSaveEventDir->Checked()) {
    $CONFIG{'DIR_SAVE_EVENT'} = $saveDir;
    &saveConfig(\%CONFIG);
  }
  &isDumpEventReady();

}  #--- End tfDirSaveEvent_Change

#--------------------------#
sub btnDirSaveEvent_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winEvent->tfDirSaveEvent->Text();
  my $dir;
  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) {
      while ($lastDir =~ /[^\\]$/) { chop($lastDir); }
    }
    $dir = Win32::GUI::BrowseForFolder( -owner      => $winEvent      ,
                                        -title      => $STR{'selDir'} ,
                                        -folderonly => 1              ,
                                        -directory  => $lastDir       ,
                                        -newui      => 1              , );
  } else {
    $dir = Win32::GUI::BrowseForFolder( -owner      => $winEvent      ,
                                        -title      => $STR{'selDir'} ,
                                        -folderonly => 1              ,
                                        -newui      => 1              , );
  }
  # Selected folder
  if ($dir and -d $dir) {
    if ($dir =~ /\\$/) { chop($dir); }
    $winEvent->tfDirSaveEvent->Text($dir);
  }
  
}  #--- End btnDirSaveEvent_Click

#--------------------------#
sub btnBrowseDirSaveEvent_Click
#--------------------------#
{
	&exploreDir($winEvent->tfDirSaveEvent->Text());
	
}  #--- End btnBrowseDirSaveEvent_Click

#--------------------------#
sub chSaveEventDir_Click
#--------------------------#
{
  # Local variables
  my $dir = $winEvent->tfDirSaveEvent->Text();
  # If directory exists, save it
  if ($dir and -d $dir and $winEvent->chSaveEventDir->Checked()) {
    $CONFIG{'REMEMBER_SAVE_EVENT'} = 1;
    $CONFIG{'DIR_SAVE_EVENT'} = $dir;
    &saveConfig(\%CONFIG);
  # Don't save
  } elsif (!$winEvent->chSaveEventDir->Checked()) {
    $CONFIG{'REMEMBER_SAVE_EVENT'} = 0;
    delete($CONFIG{'DIR_SAVE_EVENT'});
    &saveConfig(\%CONFIG);
  }

}  #--- End chSaveEventDir_Click

#--------------------------#
sub chGoing_Click
#--------------------------#
{
  &isDumpEventReady();

}  #--- End chGoing_Click

#--------------------------#
sub chMaybe_Click
#--------------------------#
{
  &isDumpEventReady();

}  #--- End chMaybe_Click

#--------------------------#
sub chInvited_Click
#--------------------------#
{
  &isDumpEventReady();

}  #--- End chInvited_Click

#--------------------------#
sub chDeclined_Click
#--------------------------#
{
  &isDumpEventReady();

}  #--- End chDeclined_Click

#--------------------------#
sub isDumpEventReady
#--------------------------#
{
  # Local variables
  my $eventName = $winEvent->tfEventName->Text();
  my $saveDir   = $winEvent->tfDirSaveEvent->Text();
  # Valid directory and valid name for save ?
  if (!$saveDir or !(-d $saveDir) or !$eventName) {
    $winEvent->btnEventOk->Disable();
    return(0);
  }
  # No selected lists
  if (!$winEvent->chGoing->Checked()   and !$winEvent->chMaybe->Checked()   and
      !$winEvent->chInvited->Checked() and !$winEvent->chDeclined->Checked()) {
    $winEvent->btnEventOk->Disable();
    return(0);
  }
  $winEvent->btnEventOk->Enable();

}  #--- End isDumpEventReady

#--------------------------#
sub chEventProfileIcons_Click
#--------------------------#
{
  # Save the choice
  if ($winEvent->chEventProfileIcons->Checked()) {
    $CONFIG{'EVENT_PROFILE_ICONS'} = 1;
    &saveConfig(\%CONFIG);
  # Don't save
  } else {
    $CONFIG{'EVENT_PROFILE_ICONS'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chEventProfileIcons_Click

#--------------------------#
sub chEventOpenXLSX_Click
#--------------------------#
{
  # Save the choice
  if ($winEvent->chEventOpenXLSX->Checked()) {
    $CONFIG{'EVENT_OPEN_XLSX'} = 1;
    &saveConfig(\%CONFIG);
  # Don't save
  } else {
    $CONFIG{'EVENT_OPEN_XLSX'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chEventOpenXLSX_Click

#--------------------------#
sub btnEventOk_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Remember position
    if ($winConfig->chRememberPos->Checked()) {
      my $winLeft = $winEvent->AbsLeft();
      my $winTop  = $winEvent->AbsTop();
      $CONFIG{'WINEVENT_LEFT'} = $winLeft;
      $CONFIG{'WINEVENT_TOP'}  = $winTop;
      &saveConfig(\%CONFIG);
    }
    # Local variables
    my $eventName = $winEvent->tfEventName->Text();
    $eventName    =~ s/[\<\>\:\"\/\\\|\?\*]/-/g;
    my $saveDir   = $winEvent->tfDirSaveEvent->Text();
    my %lists;
    my $nbrRetries = 0;
    my $count      = 0;
    my $step       = 1;
    if ($eventName and -d $saveDir) {
      # Start the thread
      $THR = threads->create(\&dumpEvent, $eventName, $saveDir, \%lists, $nbrRetries, $count, $step);
      return(-1);
    } else { Win32::GUI::MessageBox($win, $STR{'err5'}, $STR{'err1T'}, 0x40010); }
  }

}  #--- End btnEventOk_Click

#--------------------------#
sub dumpEvent
#--------------------------#
{
  # Local variables
  my ($eventName, $saveDir, $refLists, $nbrRetries, $count, $step) = @_;
  # Cancel button
  $SIG{'KILL'} = sub {
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'dumpEventC'});
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    &winPb2_Terminate;
    threads->exit();
  };
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
    $win->ChangeCursor($ARROW);
    # Progress window
    $winPb2->lblPbCurr->Text('');
    # Retry 10 times
    if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $nbrRetries++; }
    if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
      # Restart a new thread to continue
      if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $winPb2->lblPbCurr->Text($STR{'crash'}.'...'); }
      sleep(2);
      $THR = threads->create(\&dumpEvent, $eventName, $saveDir, $refLists, $nbrRetries, $count, $step);
    } else {
			my $err = (split(/ at /, $msgErr))[0];
			Win32::GUI::MessageBox($winPb2, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    }
    # Kill this thread
    threads->exit();
  };
  # First execution
  if (!$count) {
    # Turn on progress bar
    $winPb2->Center($winEvent);
    $winPb2->Show();
    $win->Disable();
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'dumpEventP'}.'...');
  }
  # Selected list
  my %selectedLists;
  if ($winEvent->chGoing->Checked()   ) { $selectedLists{going}    = 1; }
  if ($winEvent->chMaybe->Checked()   ) { $selectedLists{maybe}    = 1; }
  if ($winEvent->chInvited->Checked() ) { $selectedLists{invited}  = 1; }
  if ($winEvent->chDeclined->Checked()) { $selectedLists{declined} = 1; }
  # Connect to current tab
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($winPb2, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  # Target url
  my $currURL   = $mech->uri();
  my $targetURL = $winEvent->tfDataURL->Text();
  if ($step == 1) {
    if ($targetURL) {
      $winPb2->lblPbCurr->Text($STR{'dumpEventP'}.'...');
      # Download the data
      if (!-d "$saveDir\\temp") { mkdir("$saveDir\\temp"); }
      if (!-d "$saveDir\\images_$eventName") { mkdir("$saveDir\\images_$eventName"); }
      my $localDataFile = "$saveDir\\temp\\data.txt";
      if (my $mechData = WWW::Mechanize::Firefox->new(tab => qr{'www.facebook.com/events/ajax/guest_list'}, create => 1, autodie => 0, )) {
        $mechData->get($targetURL, synchronize => 1);
        my $status = $mechData->save_content($localDataFile);
        while ($status->{currentState} != $status->{PERSIST_STATE_FINISHED}) { sleep(1); }
      }
      # Parse the data
      open(my $tmp, '<:encoding(UTF-8)', $localDataFile);
      my $data = do { local $/ = <$tmp> };
      close($tmp);
      $data =~ s/[\r\n]//g;
      my @tabData = split(/},/, $data);
      undef $data;
      my $nbrLines = scalar(@tabData);
      foreach my $line (@tabData) {
        my %memberData;
        if ($line =~ /{("uniqueID":[^\}]+)}/) {
          my @fields = split(/,/, $1);
          foreach my $field (@fields) {
            my ($key, $value) = split(/:[^\\]/, $field);
            $key   =~ s/"//g;
            $value =~ s/"//g;
            $memberData{$key} = $value;
          }
          # Save member data
          if ($memberData{uniqueID} and $memberData{tab} and
              exists($selectedLists{$memberData{tab}}) and
              !exists($$refLists{$memberData{tab}}{profilUrl}{$memberData{uniqueID}})) {
            # Url
            if (!exists($$refLists{$memberData{tab}}{url})) { $$refLists{$memberData{tab}}{url} = $currURL; }
            # Profil order
            $$refLists{$memberData{tab}}{profilOrder}{$count} = $memberData{uniqueID};
            # Profil URL
            if ($memberData{uri}) {
              $memberData{uri} =~ s#\\\/#\/#g;
              $$refLists{$memberData{tab}}{profilUrl}{$memberData{uniqueID}} = $memberData{uri};
            }
            # Profil Img
            if ($memberData{photo}) {
              $memberData{photo} =~ s#\\\/#\/#g;
              $memberData{photo} =~ s/&amp;/&/g;
              $$refLists{$memberData{tab}}{profilImg}{$memberData{uniqueID}} = $memberData{photo};
              # Download the image
              if ($winEvent->chEventProfileIcons->Checked()) {
                if (!-e("$saveDir\\images_$eventName\\$memberData{uniqueID}\.jpg")) {
									my $encPhoto = encode('utf8', $memberData{photo});
									my $encID    = encode('utf8', $memberData{uniqueID});
                  $mech->save_url($encPhoto, "$saveDir\\images_$eventName\\$encID\.jpg");
                }
              }
            }
            # Profil Name
            if ($memberData{title}) {
              my $name = $memberData{'title'};
              $name =~ s/\\u([[:xdigit:]]{4})/chr(hex $1)/eg;
              $$refLists{$memberData{tab}}{profilName}{$memberData{uniqueID}} = $name;
            }
            $count++;
          }
        } else { $count++; }
        $winPb2->lblCount->Text("$count/$nbrLines");
      }
      $step = 2;
    } else {
      Win32::GUI::MessageBox($winPb2, $STR{'err6'}, $STR{'err1T'}, 0x40010);
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => $STR{'dumpEventC'});
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      &winPb2_Terminate;
      threads->exit();
    }
  }
  # Check profile icons
  if ($winEvent->chEventProfileIcons->Checked() and $step == 2) {
    $winPb2->lblPbCurr->Text($STR{'checkIcons'}.'...');
    my $count2 = 0;
    foreach my $guestList (keys %{$refLists}) {
      foreach my $id (keys %{$$refLists{$guestList}{profilImg}}) {
				my $encID = encode('utf8', $id);
        $count2++;
        $winPb2->lblCount->Text($count2);
        my $imgPath = "$saveDir\\images_$eventName\\$encID\.jpg";
        if (!-e $imgPath and $$refLists{$guestList}{profilImg}{$id}) { # Profile icon doesn't exist, try to download
          $mech->save_url($$refLists{$guestList}{profilImg}{$id}, "$saveDir\\images_$eventName\\$encID\.jpg");
        }
        # Check again
        if (-e $imgPath) { # Profile icon exists, check infos
          my $info = image_info($imgPath);
          my $dim;
          if (!$info->{error}) { $dim = dim($info); } # No error, get dim
          if (($info->{error} or !$dim) and $$refLists{$guestList}{profilImg}{$id}) { # Error with the image or no dim, try to download again
            unlink("$saveDir\\images_$eventName\\$id\.jpg");
            $mech->save_url($$refLists{$guestList}{profilImg}{$id}, "$saveDir\\images_$eventName\\$encID\.jpg");
            $info = image_info($imgPath);
          }
          # No error, replace profile icon URL by profile icon path
          if (!$info->{error}) {
            $dim = dim($info);
            if ($dim) { $$refLists{$guestList}{profilImg}{$id} = "images_$eventName\\$encID\.jpg"; }
          }
        }
      }
    }
    $step = 3;
  }
  # Save in a XLSX file
  $winPb2->lblPbCurr->Text($STR{'createXLSX'}.'...');
  my $nbrMembers = $count;
  if ($nbrMembers) {
		# Create and open the XLSX file
    my $filename = "$saveDir\\$eventName\.xlsx";
    my $excel;
		my $count = 1;
		while (!($excel = Excel::Writer::XLSX->new($filename))) { # If file is already open, must be renamed
			$filename = "$saveDir\\$eventName [".$count++."]\.xlsx";
			if ($count == 10) { last; } # Stop after 10 attempts
		}
    # A sheet for each guest list
    foreach my $guestList (sort keys %{$refLists}) {
      &createExcelSheetWithDetails(\$excel, $guestList, $$refLists{$guestList}, $winEvent->chEventProfileIcons->Checked(), $saveDir);
    }
    $excel->close(); # Close XLSX file
    # Open the file
    if ($winEvent->chEventOpenXLSX->Checked()) { $win->ShellExecute('open', $filename,'','',1); }
  }
  # Turn off progress bar
  $winPb2->lblPbCurr->Text('');
  $winPb2->lblCount->Text('');
  &winPb2_Terminate;
  # Delete temporary files
  if ($winConfig->chDelTempFiles->Checked()) { remove_tree("$saveDir\\temp"); }
	# Final message
  $win->Tray->Change(-tip => $STR{'dumpEventF'});
  if (!$win->IsVisible()) {
    $win->Tray->Change( -balloon_icon  => 'info'             ,
                        -balloon_title => 'ExtractFace'      ,
                        -balloon_tip   => $STR{'dumpEventF'} , );
    $win->Tray->ShowBalloon(1);
  }
  $win->ChangeCursor($ARROW);

}  #--- End dumpEvent

#--------------------------#
sub winEvent_Terminate
#--------------------------#
{
  # Remember position
  if ($winConfig->chRememberPos->Checked()) {
    my $winLeft = $winEvent->AbsLeft();
    my $winTop  = $winEvent->AbsTop();
    $CONFIG{'WINEVENT_LEFT'} = $winLeft;
    $CONFIG{'WINEVENT_TOP'}  = $winTop;
    &saveConfig(\%CONFIG);
  }
  return(-1);

}  #--- End winEvent_Terminate

#--------------------------#
sub winContrib
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    $THR = threads->create(\&winContribThr);
    usleep(500000);
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINCONTRIB_LEFT'} and $CONFIG{'WINCONTRIB_TOP'}) {
      $winContrib->Left($CONFIG{'WINCONTRIB_LEFT'});
      $winContrib->Top($CONFIG{'WINCONTRIB_TOP'});
    } else { $winContrib->Center(); }
    $winContrib->DoModal();
  }

}  #--- End winContrib

#--------------------------#
sub winContribThr
#--------------------------#
{
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($msgErr =~ /NS_ERROR_FILE_IS_LOCKED/) {
      # Restart a new thread to continue
      $THR = threads->create(\&winContribThr);
    } else {
      if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
			my $err = (split(/ at /, $msgErr))[0];
      Win32::GUI::MessageBox($winContrib, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
    }
  };
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      $winContrib->btnContribOk->Disable();
      Win32::GUI::MessageBox($winContrib, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  my $currURL  = $mech->uri();
  if ($currURL =~ /facebook.com/) {
    my $title;
		if    ($currURL =~ /https:\/\/(?:www|web).facebook.com\/profile.php\?id=([^\/\&]+)/) { $title = $1; }
    elsif ($currURL =~ /https:\/\/(?:www|web).facebook.com\/([^\/\?]+)/                ) { $title = $1; }
    if ($title =~ /#$/) { chop($title); }
    $winContrib->tfContribName->Text($title);
  } else {
    $winContrib->btnContribOk->Disable();
    Win32::GUI::MessageBox($winContrib, $STR{'warn4'}, $STR{'warn2T'}, 0x40010);
  }
  &isDumpContribReady();

}  #--- End winContribThr

#--------------------------#
sub tfContribName_Change
#--------------------------#
{
  &isDumpContribReady();

}  #--- End tfContribName_Change

#--------------------------#
sub tfDirSaveContrib_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winContrib->tfDirSaveContrib->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winContrib->chSaveContribDir->Checked()) {
    $CONFIG{'DIR_SAVE_CONTRIB'} = $saveDir;
    &saveConfig(\%CONFIG);
  }
  &isDumpContribReady();

}  #--- End tfDirSaveContrib_Change

#--------------------------#
sub btnDirSaveContrib_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winContrib->tfDirSaveContrib->Text();
  my $dir;
  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) {
      while ($lastDir =~ /[^\\]$/) { chop($lastDir); }
    }
    $dir = Win32::GUI::BrowseForFolder( -owner      => $winContrib    ,
                                        -title      => $STR{'selDir'} ,
                                        -folderonly => 1              ,
                                        -directory  => $lastDir       ,
                                        -newui      => 1              , );
  } else {
    $dir = Win32::GUI::BrowseForFolder( -owner      => $winContrib    ,
                                        -title      => $STR{'selDir'} ,
                                        -folderonly => 1              ,
                                        -newui      => 1              , );
  }
  # Selected folder
  if ($dir and -d $dir) {
    if ($dir =~ /\\$/) { chop($dir); }
    $winContrib->tfDirSaveContrib->Text($dir);
  }
  
}  #--- End btnDirSaveContrib_Click

#--------------------------#
sub btnBrowseDirSaveContrib_Click
#--------------------------#
{
	&exploreDir($winContrib->tfDirSaveContrib->Text());
	
}  #--- End btnBrowseDirSaveContrib_Click

#--------------------------#
sub chSaveContribDir_Click
#--------------------------#
{
  # Local variables
  my $dir = $winContrib->tfDirSaveContrib->Text();
  # If directory exists, save it
  if ($dir and -d $dir and $winContrib->chSaveContribDir->Checked()) {
    $CONFIG{'REMEMBER_SAVE_CONTRIB'} = 1;
    $CONFIG{'DIR_SAVE_CONTRIB'} = $dir;
    &saveConfig(\%CONFIG);
  # Don't save
  } elsif (!$winContrib->chSaveContribDir->Checked()) {
    $CONFIG{'REMEMBER_SAVE_CONTRIB'} = 1;
    delete($CONFIG{'DIR_SAVE_CONTRIB'});
    &saveConfig(\%CONFIG);
  }

}  #--- End chSaveContribDir_Click

#--------------------------#
sub chContribProfileIcons_Click
#--------------------------#
{
  # Save the choice
  if ($winContrib->chContribProfileIcons->Checked()) {
    $CONFIG{'CONTRIB_PROFILE_ICONS'} = 1;
    &saveConfig(\%CONFIG);
  # Don't save
  } else {
    $CONFIG{'CONTRIB_PROFILE_ICONS'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chContribProfileIcons_Click

#--------------------------#
sub chContribOpenXLSX_Click
#--------------------------#
{
  # Save the choice
  if ($winContrib->chContribOpenXLSX->Checked()) {
    $CONFIG{'CONTRIB_OPEN_XLSX'} = 1;
    &saveConfig(\%CONFIG);
  # Don't save
  } else {
    $CONFIG{'CONTRIB_OPEN_XLSX'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chContribOpenXLSX_Click

#--------------------------#
sub chContribComments_Click
#--------------------------#
{
  &isDumpContribReady();

}  #--- End chContribComments_Click

#--------------------------#
sub chContribLikes_Click
#--------------------------#
{
  &isDumpContribReady();

}  #--- End chContribLikes_Click

#--------------------------#
sub chContribVPosts_Click
#--------------------------#
{
  if ($winContrib->chContribVPosts->Checked()) {
    $winContrib->chContribDontScrollVPosts->Enable();
  } else { $winContrib->chContribDontScrollVPosts->Disable(); }
  &isDumpContribReady();

}  #--- End chContribVPosts_Click

#--------------------------#
sub isDumpContribReady
#--------------------------#
{
  # Local variables
  my $contribName = $winContrib->tfContribName->Text();
  my $saveDir     = $winContrib->tfDirSaveContrib->Text();
  # Valid directory and valid name for save ?
  if (!$saveDir or !(-d $saveDir) or !$contribName) { $winContrib->btnContribOk->Disable(); return(0); }
  # At least one type checked
  if (!$winContrib->chContribComments->Checked() and
      !$winContrib->chContribLikes->Checked()    and
      !$winContrib->chContribVPosts->Checked()) {
    $winContrib->btnContribOk->Disable();
    return(0);
  }
  $winContrib->btnContribOk->Enable();

}  #--- End isDumpContribReady

#--------------------------#
sub btnContribOk_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Remember position
    if ($winConfig->chRememberPos->Checked()) {
      my $winLeft = $winContrib->AbsLeft();
      my $winTop  = $winContrib->AbsTop();
      $CONFIG{'WINCONTRIB_LEFT'} = $winLeft;
      $CONFIG{'WINCONTRIB_TOP'}  = $winTop;
      &saveConfig(\%CONFIG);
    }
    # Local variables
    my $contribName = $winContrib->tfContribName->Text();
    $contribName    =~ s/[\<\>\:\"\/\\\|\?\*]/-/g;
    my $saveDir     = $winContrib->tfDirSaveContrib->Text();
    my %comments;
    my %likePages;
    my %likes;
    my %vPosts;
    my $nbrComments   = 0;
    my $nbrLikePages  = 0;
    my $nbrLikes      = 0;
    my $nbrVPosts     = 0;
    my $nbrRetries    = 0;
    my $step          = 1;
    my $done          = 0;
    my $count         = 0;
    if ($contribName and -d $saveDir) {
      # Start the thread
      $THR = threads->create(\&dumpContrib, $contribName, $saveDir, \%comments, \%likePages,
                             \%likes, \%vPosts, $nbrComments, $nbrLikePages, $nbrLikes, $nbrVPosts,
                             $nbrRetries, $step, $done, $count);
      return(-1);
    } else { Win32::GUI::MessageBox($win, $STR{'err5'}, $STR{'err1T'}, 0x40010); }
  }

}  #--- End btnContribOk_Click

#--------------------------#
sub dumpContrib
#--------------------------#
{
  # Local variables
  my ($contribName, $saveDir, $refComments, $refLikePages, $refLikes, $refVPosts, $nbrComments,
      $nbrLikePages, $nbrLikes, $nbrVPosts, $nbrRetries, $step, $done, $count) = @_;
  # Cancel button
  $SIG{'KILL'} = sub {
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'dumpContribC'});
    # Turn off progress bar
    $winPb->lblPbCurr1->Text('');
    $winPb->lblCount1->Text('');
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    $winPb->pbWinPb1->SetPos(0);
    $winPb->pbWinPb2->SetPos(0);
    &winPb_Terminate;
    threads->exit();
  };
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
    $win->ChangeCursor($ARROW);
    # Retry 10 times
    if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $nbrRetries++; }
    if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
      # Restart a new thread to continue
      if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $winPb->lblPbCurr1->Text($STR{'crash'}.'...'); }
      sleep(2);
      $THR = threads->create(\&dumpContrib, $contribName, $saveDir, $refComments, $refLikePages,
                             $refLikes, $refVPosts, $nbrComments, $nbrLikePages, $nbrLikes, $nbrVPosts,
                             $nbrRetries, $step, $done, $count);
    } else {
			my $err = (split(/ at /, $msgErr))[0];
			Win32::GUI::MessageBox($winPb2, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    }
    # Kill this thread
    threads->exit();
  };
  # Connect to current tab
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($winPb2, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  # Operations
  # $step == 1 : Save the page
  # $step == 2 : Dump Contributors - Comments
  # $step == 3 : Dump Contributors - Likes
  # $step == 4 : Dump Contributors - VPosts
  # $step == 5 : Create Excel Sheet - Comments
  # $step == 6 : Create Excel Sheet - Likes
  # $step == 7 : Create Excel Sheet - VPosts
  my $currURL  = $mech->uri();
  if ($currURL =~ /#$/) { chop($currURL); }
  my $nbrOperations = 1;
  if ($winContrib->chContribComments->Checked()) { $nbrOperations += 2; }
  if ($winContrib->chContribLikes->Checked()   ) { $nbrOperations += 2; }
  if ($winContrib->chContribVPosts->Checked()  ) { $nbrOperations += 2; }
  if (!-d "$saveDir\\temp") { mkdir("$saveDir\\temp"); }
  my $localDataFile = "$saveDir\\temp\\temp.html";
  # First execution
  if ($step == 1) {
    # Turn on progress bar
    $winPb->Center($winContrib);
    $winPb->Show();
    $win->Disable();
    $winPb->lblCount1->Text("0/$nbrOperations");
    $winPb->pbWinPb1->SetRange(0, $nbrOperations);
    $winPb->pbWinPb1->SetPos(0);
    $winPb->pbWinPb1->SetStep(1);
    $winPb->lblPbCurr1->Text('');
    $winPb->lblCount1->Text('');
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'dumpContribP'}.'...');
    # Save current tab
    $winPb->lblPbCurr1->Text($STR{'saveTab'}.'...');
    my $status = $mech->save_content($localDataFile);
    while ($status->{currentState} != $status->{PERSIST_STATE_FINISHED}) { sleep(1); }
    # Create image folder
    if (!-d "$saveDir\\images_$contribName" and $winContrib->chContribProfileIcons->Checked()) {
      mkdir("$saveDir\\images_$contribName");
    }
    $step = 2;
    $done++;
    $winPb->pbWinPb1->StepIt();
    $winPb->lblCount1->Text("$done/$nbrOperations");
  }
  # Gather Comment Contributors
  if ($winContrib->chContribComments->Checked() and $step == 2) {
    $winPb->lblPbCurr1->Text($STR{'dumpCommentsP'}.'...');
    # First execution
    if (!$nbrComments) {
      $winPb->lblPbCurr2->Text('');
      $winPb->lblCount2->Text('');
      $winPb->pbWinPb2->SetPos(0);
    } else { $nbrComments--; } # If resume, start from last processed
    my @commentNodes;
    if (open(my $fhTemp, "<:encoding(UTF-8)", $localDataFile)) {
      my $file_as_string = do { local $/ = <$fhTemp> };
      $file_as_string =~ s/[\r\n]//g;
      @commentNodes = split(/UFIImageBlockImage/, $file_as_string);
      shift(@commentNodes);
      close($fhTemp);
    }
    my $nbrCommentsToDo = scalar(@commentNodes);
    $winPb->pbWinPb2->SetRange(0, $nbrCommentsToDo);
    $winPb->pbWinPb2->SetStep(1);
    $winPb->lblCount2->Text("$nbrComments/$nbrCommentsToDo");
    my $i = 0;
    foreach my $commentNode (@commentNodes) {
      if ($i >= $nbrComments and $commentNode !~ /^" role="presentation"/) {
        my $commentId;
        my $commentUrl;
        my $commentImg;
        my $commentName;
        if ($commentNode =~ /href="([^\&\"]+)(?:&|")[^\>]+hovercard.php\?id=([^\&\"]+)(?:&|")/) {
          $commentUrl  = $1;
          $commentUrl  =~ s/&amp;/&/g;
          $commentId   = $2;
        } elsif ($commentNode =~ /hovercard.php\?id=([^\&\"]+)(?:&|")[^\>]+href="([^\&\"]+)(?:&|")/) {
          $commentId   = $1;
          $commentUrl  = $2;
          $commentUrl  =~ s/&amp;/&/g;
        }
        if ($commentNode =~ /src="([^\"]+)"/) { $commentImg  = $1; }
        if ($commentNode =~ /alt="([^\"]+)"/) { $commentName = $1; }
        if ($commentUrl and $commentId and $commentImg and $commentName and $commentName ne $contribName) {
          if ($currURL =~ /$commentId/) { } # On photo page, profile owner id
          else {
            $winPb->lblPbCurr2->Text("$STR{'friendsExtract'} $commentId...");
            # Already exists, count
            if (exists($$refComments{$commentUrl}{Nbr})) {
              $$refComments{$commentUrl}{Nbr}++;
            # Add a new entry
            } else {
              $$refComments{$commentUrl}{Nbr}  = 1;
              $$refComments{$commentUrl}{Id}   = $commentId;
              $$refComments{$commentUrl}{Name} = $commentName;
              # Include profile icon
							my $encCommentId = encode('utf8', $commentId);
              if ($winContrib->chContribProfileIcons->Checked() and $commentImg) {
                my $imgUrl = $commentImg =~ s/&amp;/&/gr;
                if (!-e("$saveDir\\images_$contribName\\$commentId\.jpg")) {
                  $mech->save_url($imgUrl, "$saveDir\\images_$contribName\\$encCommentId\.jpg");
                # File already exists, test if corrupted, if so, download it again
                } else {
                  my $info = image_info("$saveDir\\images_$contribName\\$commentId\.jpg");
                  if ($info->{error}) {
                    $mech->save_url($imgUrl, "$saveDir\\images_$contribName\\$commentId\.jpg");
                  }
                }
                $$refComments{$commentUrl}{ImgPath} = "images_$contribName\\$encCommentId\.jpg";
              }
            }
          }
        }
        $nbrComments++;
        $winPb->pbWinPb2->StepIt();
        $winPb->lblCount2->Text("$nbrComments/$nbrCommentsToDo");
      }
      $i++;
    }
    # Update progress
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    $winPb->pbWinPb2->SetPos(0);
    $step = 3;
    $done++;
    $winPb->pbWinPb1->StepIt();
    $winPb->lblCount1->Text("$done/$nbrOperations");
  } elsif (!$winContrib->chContribComments->Checked()) { $step = 3; }
  # Gather Likes
  if ($winContrib->chContribLikes->Checked() and $step == 3) {
    $winPb->lblPbCurr1->Text($STR{'dumpLikesP'}.'...');
    # First execution, gather like page urls
    if (!$nbrLikePages and !$nbrLikes) {
      $winPb->lblPbCurr2->Text('');
      $winPb->lblCount2->Text('');
      $winPb->pbWinPb2->SetPos(0);
      # Parse the page
      if (open(my $fhTemp, "<:encoding(UTF-8)", $localDataFile)) {
        my $file_as_string = do { local $/ = <$fhTemp> };
        $file_as_string =~ s/[\r\n]//g;
        my @section = split(/fbTimelineSection fbTimelineCompactSection fbTimelineSectionTransparent/, $file_as_string);
        undef($file_as_string);
        foreach my $section (@section) {
          my @parts = split(/_ipp/, $section);
          shift(@parts);
          foreach my $part (@parts) {
            if ($part =~ /href=\"([^\"]+)\"/) {
              my $url = $1;
              if ($url =~ /ft_ent_identifier/) {
                $url =~ s/&amp;/&/g;
                if (!exists($$refLikePages{$url})) { $$refLikePages{$url} = 0; }
              }
            }
          }
          my @parts2 = split(/UFICommentLikeButton/, $section);
          shift(@parts2);
          foreach my $part (@parts2) {
            if ($part =~ /href=\"([^\"]+)\"/) {
              my $url = $1;
              if ($url =~ /likes/) {
                $url =~ s/&amp;/&/g;
                if (!exists($$refLikePages{$url})) { $$refLikePages{$url} = 0; }
              }
            }
          }
        }
        close($fhTemp);
      }
      # Set progress bar
      $nbrLikePages = scalar(keys %{$refLikePages});
      $winPb->pbWinPb2->SetRange(0, $nbrLikePages);
      $winPb->pbWinPb2->SetPos(0);
      $winPb->pbWinPb2->SetStep(1);
      $winPb->lblCount2->Text("0/$nbrLikePages");
    }
    if ($nbrLikePages > 0) {
      # Connect to Firefox (creates a new tab at first execution)
      my $mechLikePage = WWW::Mechanize::Firefox->new(tab => qr{Facebook}, create => 1, autodie => 0);
      foreach my $likePageUrl (sort keys %{$refLikePages}) {
        # Get the page, scroll to bottom then save the page content
        $winPb->lblPbCurr2->Text("$STR{'opening'} $likePageUrl...");
        $mechLikePage->get($likePageUrl, synchronize => 0);
        sleep($CONFIG{'TIME_TO_WAIT'});
        $winPb->lblPbCurr2->Text("$STR{'scrolling'} $likePageUrl...");
        &scrollLikePage(\$mechLikePage, $CONFIG{'TIME_TO_WAIT'});
        $winPb->lblPbCurr2->Text("$STR{'downloading'} $likePageUrl...");
        my $htmlPage = "$saveDir\\temp\\likePage.html";
        my $status;
        if ($winContrib->chContribProfileIcons->Checked()) {
          $status = $mechLikePage->save_content($htmlPage, "$saveDir\\temp");
        } else { $status = $mechLikePage->save_content($htmlPage); }
        while ($status->{currentState} != $status->{PERSIST_STATE_FINISHED}) { usleep(100000); }
        my $i = 0;
        # Gather each profile details
        my @likeProfiles;
        $winPb->lblPbCurr2->Text("$STR{'parsing'} $likePageUrl...");
        if (open(my $fhTemp, "<:encoding(UTF-8)", $htmlPage)) {
          my $file_as_string = do { local $/ = <$fhTemp> };
          $file_as_string =~ s/[\r\n]//g;
          @likeProfiles     = split(/_5i_q/, $file_as_string);
          shift(@likeProfiles);
          my @likeProfiles2 = split(/fbProfileBrowserListItem/, $file_as_string);
          shift(@likeProfiles2);
          push(@likeProfiles, @likeProfiles2);
          undef($file_as_string);
          close($fhTemp);
        }
        foreach my $likeProfile (@likeProfiles) {
          if ($i >= $$refLikePages{$likePageUrl}) {
            my $likeId;
            my $likeUrl;
            my $likeImg;
            my $likeName;
            # Gather url and id
            if ($likeProfile =~ /<(a[^\>]+)\>\<([^\<]+)\</) {
              my $profileTag = $1;
              my $imgTag     = $2;
              if ($profileTag =~ /href="([^\&\"]+)(?:&|")[^\>]+data-hovercard="([^\"]+)\"/) {
                $likeUrl = $1;
                my $temp = $2;
                if ($temp =~ /hovercard\/user\.php\?id=([^\&]+)&/) { $likeId = $1; }
              }
            }
            # Gather Image link
            if ($likeProfile =~ / src="([^\"]+)\"/) { $likeImg = $1; }
            # Gather name
            if ($likeProfile =~ /\<a[^\>]+\>([^\<]+)\</) { $likeName = $1; }
            if ($likeUrl and $likeId and $likeImg and $likeName and $likeName ne $contribName) {
              if ($currURL =~ /$likeId/) { } # On photo page, profile owner id
              else {
                # Already exists, count
                if (exists($$refLikes{$likeUrl}{Nbr})) {
                  $$refLikes{$likeUrl}{Nbr}++;
                # Add a new entry
                } else {
                  $nbrLikes++;
                  $$refLikes{$likeUrl}{Nbr}  = 1;
                  $$refLikes{$likeUrl}{Id}   = $likeId;
                  $$refLikes{$likeUrl}{Name} = $likeName;
                  # Save the profil icon
									my $encLikeId = encode('utf8', $likeId);
                  if ($winContrib->chContribProfileIcons->Checked() and $likeImg =~ /\/([^\/\?]+)\?/ or $likeImg =~ /(\w+\.jpg)/) { # Include profile icons
                    my $imgFilename = $1; # Replace image name by profil id
                    if (!-e "$saveDir\\images_$contribName\\$likeId\.jpg") {
											my $encImgFN  = encode('utf8', $imgFilename);
                      rcopy("$saveDir\\temp\\$encImgFN", "$saveDir\\images_$contribName\\$encLikeId\.jpg"); # Copy image
                    }
                    $$refLikes{$likeUrl}{ImgPath} = "images_$contribName\\$encLikeId\.jpg";
                  }
                }
              }
              $$refLikePages{$likePageUrl}++;
            }
          }
          $i++;
        }
        delete($$refLikePages{$likePageUrl});
        $winPb->pbWinPb2->StepIt();
        my $nbrLikePagesDone = $nbrLikePages - scalar(keys %{$refLikePages});
        $winPb->lblCount2->Text("$nbrLikePagesDone/$nbrLikePages");
      }
    }
    # Update progress
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    $winPb->pbWinPb2->SetPos(0);
    $step = 4;
    $done++;
    $winPb->pbWinPb1->StepIt();
    $winPb->lblCount1->Text("$done/$nbrOperations");
  } elsif (!$winContrib->chContribLikes->Checked()) { $step = 4; }
  # Gather VPosts (Visitor Posts)
  if ($winContrib->chContribVPosts->Checked() and $step == 4) {
    $winPb->lblPbCurr1->Text($STR{'dumpVPostsP'}.'...');
    # Open the Visitor Posts popup if not already open
    my $vPostsHeader = $mech->selector('div._2h4b._50f3', any => 1);
    if (!$vPostsHeader) {
      my @vPostsUrl = $mech->selector('a._g3j');
      foreach (@vPostsUrl) { if ($_->{href} =~ /posts_to_page/) { $_->click(); } }
      sleep($CONFIG{'TIME_TO_WAIT'});
    }
    # First execution
    if (!$nbrVPosts) {
      if (!$winContrib->chContribDontScrollVPosts->Checked()) {
        # Display all Visitor Posts
        $winPb->lblPbCurr1->Text("$STR{'scrolling'} $STR{'chContribVPosts'}...");
        &scrollVPostsPage(\$mech, $CONFIG{'TIME_TO_WAIT'});
      }
      $winPb->lblPbCurr2->Text('');
      $winPb->lblCount2->Text('');
      $winPb->pbWinPb2->SetPos(0);
    } else { $nbrVPosts--; } # If resume, start from last processed
    # Gather all posters    
    my @vPostsCode = $mech->selector('div._5x46');
    my $nbrVPostsToDo = scalar(@vPostsCode);
    $winPb->pbWinPb2->SetRange(0, $nbrVPostsToDo);
    $winPb->pbWinPb2->SetStep(1);
    $winPb->lblCount2->Text("$nbrVPosts/$nbrVPostsToDo");
    my $i = 0;
    foreach my $vPostCode (@vPostsCode) {
      if ($i >= $nbrVPosts) {
        my $vPostsId;
        my $vPostsUrl;
        my $vPostsImg;
        my $vPostsName;
        if ($vPostCode->{outerHTML} =~ / href="([^\&\"]+)(?:&|")[^\>]+hovercard\/user\.php\?id=([^\&\"]+)(?:&|")[^\>]+\>([^\<]+)\</) {
          $vPostsUrl  = $1;
          $vPostsId   = $2;
          $vPostsName = $3;
        }
        if ($vPostCode->{innerHTML} =~ /src="([^\"]+)"/) { $vPostsImg = $1; }
        if ($vPostsUrl and $vPostsId and $vPostsImg and $vPostsName and $vPostsName ne $contribName) {
          $winPb->lblPbCurr2->Text("$STR{'friendsExtract'} $vPostsId...");
          # Already exists, count
          if (exists($$refVPosts{$vPostsUrl}{Nbr})) { $$refVPosts{$vPostsUrl}{Nbr}++; }
          # Add a new entry
          else {
            $$refVPosts{$vPostsUrl}{Nbr}  = 1;
            $$refVPosts{$vPostsUrl}{Id}   = $vPostsId;
            $$refVPosts{$vPostsUrl}{Name} = $vPostsName;
            # Include profile icon
            if ($winContrib->chContribProfileIcons->Checked() and $vPostsImg) {
              my $imgUrl = $vPostsImg =~ s/&amp;/&/gr;
							my $encVPostsId = encode('utf8', $vPostsId);
              if (!-e("$saveDir\\images_$contribName\\$encVPostsId\.jpg")) {
                $mech->save_url($imgUrl, "$saveDir\\images_$contribName\\$encVPostsId\.jpg");
              # File already exists, test if corrupted, if so, download it again
              } else {
                my $info = image_info("$saveDir\\images_$contribName\\$encVPostsId\.jpg");
                if ($info->{error}) {
                  $mech->save_url($imgUrl, "$saveDir\\images_$contribName\\$encVPostsId\.jpg");
                }
              }
              $$refVPosts{$vPostsUrl}{ImgPath} = "images_$contribName\\$encVPostsId\.jpg";
            }
          }
        }
        $nbrVPosts++;
        $winPb->pbWinPb2->StepIt();
        $winPb->lblCount2->Text("$nbrVPosts/$nbrVPostsToDo");
      }
      $i++;
    }
    # Update progress
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    $winPb->pbWinPb2->SetPos(0);
    $step = 5;
    $done++;
    $winPb->pbWinPb1->StepIt();
    $winPb->lblCount1->Text("$done/$nbrOperations");
  } elsif (!$winContrib->chContribVPosts->Checked()) { $step = 5; }
  # Create and open the XLSX file
  $winPb->lblPbCurr1->Text($STR{'createXLSX'}.'...');
  if ($nbrComments or $nbrLikes or $nbrVPosts) {
    my $filename = "$saveDir\\$contribName - $STR{'contributors'}\.xlsx";
		my $excel;
		my $count = 1;
		while (!($excel = Excel::Writer::XLSX->new($filename))) { # If file is already open, must be renamed
			$filename = "$saveDir\\$contribName - $STR{'contributors'} [".$count++."]\.xlsx";
			if ($count == 10) { last; } # Stop after 10 attempts
		}
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    $winPb->pbWinPb2->SetPos(0);
    # A sheet for each types
    # Comments
    if ($winContrib->chContribComments->Checked()) {
      $winPb->lblPbCurr1->Text($STR{'createSheet'}.' - '.$STR{'chContribComments'}.'...');
      &createExcelSheet(\$excel, $STR{'chContribComments'}, $currURL, $refComments, $winContrib->chContribProfileIcons->Checked(), $saveDir);
      if ($step == 5) {
        $step = 6;
        $done++;
        $winPb->pbWinPb1->StepIt();
        $winPb->lblCount1->Text("$done/$nbrOperations");
      }
    } elsif (!$winContrib->chContribComments->Checked()) { $step = 6; }
    # Likes
    if ($winContrib->chContribLikes->Checked()) {
      $winPb->lblPbCurr1->Text($STR{'createSheet'}.' - '.$STR{'chContribLikes'}.'...');
      &createExcelSheet(\$excel, $STR{'chContribLikes'}, $currURL, $refLikes, $winContrib->chContribProfileIcons->Checked(), $saveDir);
      if ($step == 6) {
        $step = 7;
        $done++;
        $winPb->pbWinPb1->StepIt();
        $winPb->lblCount1->Text("$done/$nbrOperations");
      }
    } elsif (!$winContrib->chContribLikes->Checked()) { $step = 7; }
    # VPosts
    if ($winContrib->chContribVPosts->Checked()) {
      $winPb->lblPbCurr1->Text($STR{'createSheet'}.' - '.$STR{'chContribVPosts'}.'...');
      &createExcelSheet(\$excel, $STR{'chContribVPosts'}, $currURL, $refVPosts, $winContrib->chContribProfileIcons->Checked(), $saveDir);
      if ($step == 7) {
        $step = 8;
        $done++;
        $winPb->pbWinPb1->StepIt();
        $winPb->lblCount1->Text("$done/$nbrOperations");
      }
    } elsif (!$winContrib->chContribVPosts->Checked()) { $step = 8; }
    $excel->close(); # Close XLSX file
    # Delete temporary file
    if ($winConfig->chDelTempFiles->Checked() and -d "$saveDir\\temp") { remove_tree("$saveDir\\temp"); }
    # Open the file
    if ($winContrib->chContribOpenXLSX->Checked()) { $win->ShellExecute('open', $filename,'','',1); }
  }
  # Turn off progress bar
  $winPb->lblPbCurr1->Text('');
  $winPb->lblCount1->Text('');
  $winPb->lblPbCurr2->Text('');
  $winPb->lblCount2->Text('');
  $winPb->pbWinPb1->SetPos(0);
  $winPb->pbWinPb2->SetPos(0);
  &winPb_Terminate;
  # Delete temporary files
  if ($winConfig->chDelTempFiles->Checked()) { remove_tree("$saveDir\\temp"); }
  $win->Tray->Change(-tip => $STR{'dumpContribF'});
  if (!$win->IsVisible()) {
    $win->Tray->Change( -balloon_icon  => 'info'             ,
                        -balloon_title => 'ExtractFace'      ,
                        -balloon_tip   => $STR{'dumpContribF'} , );
    $win->Tray->ShowBalloon(1);
  }
  $win->ChangeCursor($ARROW);

}  #--- End dumpContrib

#--------------------------#
sub createExcelSheet
#--------------------------#
{
  # Local variables
  my ($refExcel, $sheetName, $currURL, $refData, $includeIcon, $saveDir) = @_;
  # Create the sheet
  my $sheet = $$refExcel->add_worksheet($sheetName); # Add a sheet
  # Formats
  my $format = $$refExcel->add_format();
  $format->set_bold();
  $format->set_align( 'center' );
  $format->set_align( 'vcenter' );
  my $format2 = $$refExcel->add_format();
  $format2->set_align( 'center' );
  $format2->set_align( 'vcenter' );
  my $format3 = $$refExcel->add_format();
  $format3->set_align( 'top' );
  # Headers
  $sheet->write( 0, 0, $STR{'image'}    , $format );
  $sheet->write( 0, 1, $STR{'profilID'} , $format );
  $sheet->write( 0, 2, $STR{'url'}      , $format );
  $sheet->write( 0, 3, $STR{'name'}     , $format );
  $sheet->write( 0, 4, $STR{'imgPath2'} , $format );
  $sheet->write( 0, 5, $STR{'originURL'}, $format );
  $sheet->write( 0, 6, $STR{'count'}    , $format );
  # Create content
  my $i = 1;
  my $maxWidthCol1 = 5;
  my $maxWidthCol2 = 0;
  my $maxWidthCol3 = 0;
  my $maxWidthCol4 = 0;
  my $maxWidthCol5 = 0;
  my $maxWidthCol6 = length($currURL);
  my $maxWidthCol7 = length($STR{'count'});
  foreach my $entry (keys %{$refData}) {
    # Image column
    if ($includeIcon and -e "$saveDir\\$$refData{$entry}{ImgPath}") {
      my $info = image_info("$saveDir\\$$refData{$entry}{ImgPath}");
      if (!$info->{error}) { # Insert only if image is not corrupted
        $sheet->insert_image($i, 0, "$saveDir\\$$refData{$entry}{ImgPath}");
        if ($info->{height}) { # Set row height
          my $colHeight = $info->{height} / 1.33;
          $sheet->set_row($i, $colHeight);
        }
        else { $sheet->set_row($i, 30); }
        if ($info->{width}) { # Set row width
          my $colWidth = $info->{width} / 7.2;
          if ($colWidth > $maxWidthCol1) { $maxWidthCol1 = $colWidth; }
        }
      }
    }
    # Profil ID column
    $sheet->write_string($i, 1, $$refData{$entry}{Id});
    if (length($$refData{$entry}{Id}) > $maxWidthCol2) {
      $maxWidthCol2 = length($$refData{$entry}{'Id'});
    }
    # URL column
    $sheet->write($i, 2, $entry);
    if (length($entry) > $maxWidthCol3) { $maxWidthCol3 = length($entry); }
    # Name column
    if ($$refData{$entry}{Name}) {
      $sheet->write($i, 3, $$refData{$entry}{Name});
      if (length($$refData{$entry}{Name}) > $maxWidthCol4) {
        $maxWidthCol4 = length($$refData{$entry}{Name});
      }
    }
    # Image Path column
    $sheet->write($i, 4, $$refData{$entry}{ImgPath});
    if (length($$refData{$entry}{ImgPath}) > $maxWidthCol5) {
      $maxWidthCol5 = length($$refData{$entry}{ImgPath});
    }
    # Original URL column
    $sheet->write($i, 5, $currURL);
    # Count
    $sheet->write($i, 6, $$refData{$entry}{Nbr});
    $i++;
  }
  # Ajust column size
  $sheet->set_column(1, 6, undef, $format3);
  $sheet->set_column(0, 0, $maxWidthCol1, $format2);
  $sheet->set_column(1, 1, $maxWidthCol2);
  $sheet->set_column(2, 2, $maxWidthCol3);
  $sheet->set_column(3, 3, $maxWidthCol4);
  $sheet->set_column(4, 4, $maxWidthCol5);
  $sheet->set_column(5, 5, $maxWidthCol6);
  $sheet->set_column(6, 6, $maxWidthCol7);

}  #--- End createExcelSheet

#--------------------------#
sub winContrib_Terminate
#--------------------------#
{
  # Remember position
  if ($winConfig->chRememberPos->Checked()) {
    my $winLeft = $winContrib->AbsLeft();
    my $winTop  = $winContrib->AbsTop();
    $CONFIG{'WINCONTRIB_LEFT'} = $winLeft;
    $CONFIG{'WINCONTRIB_TOP'}  = $winTop;
    &saveConfig(\%CONFIG);
  }
  return(-1);

}  #--- End winContrib_Terminate

#--------------------------#
sub winGroupMembers
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    $winGroupMembers->tfGroupMembersName->Text('');
		$winGroupMembers->GridGroupMembers->DeleteNonFixedRows();
    # Start the thread
    $THR = threads->create(\&winGroupMembersThr);
    usleep(500000);
		$winGroupMembers->GridGroupMembers->AutoSize();
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINGROUP_MEMBERS_LEFT'} and $CONFIG{'WINGROUP_MEMBERS_TOP'}) {
      $winGroupMembers->Left($CONFIG{'WINGROUP_MEMBERS_LEFT'});
      $winGroupMembers->Top($CONFIG{'WINGROUP_MEMBERS_TOP'});
    } else { $winGroupMembers->Center(); }
    $winGroupMembers->DoModal();
  }

}  #--- End winGroupMembers

#--------------------------#
sub btnGroupMembersRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    $winGroupMembers->tfGroupMembersName->Text('');
		$winGroupMembers->GridGroupMembers->DeleteNonFixedRows();
    $THR = threads->create(\&winGroupMembersThr);
  }
  
}  #--- End btnGroupMembersRefresh_Click

#--------------------------#
sub winGroupMembersThr
#--------------------------#
{
  # Local variables
  my $saveDir = $winGroupMembers->tfDirSaveGroupMembers->Text();
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($msgErr =~ /NS_ERROR_FILE_IS_LOCKED/) {
      # Restart a new thread to continue
      $THR = threads->create(\&winGroupMembersThr);
    } else {
      if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
			my $err = (split(/ at /, $msgErr))[0];
      Win32::GUI::MessageBox($winGroupMembers, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
    }
		threads->exit();
  };
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      $winGroupMembers->btnGroupMembersOk->Disable();
      Win32::GUI::MessageBox($winGroupMembers, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
	$winGroupMembers->GridGroupMembers->DeleteNonFixedRows();
	my $currURL = $mech->uri();
  if ($currURL =~ /facebook.com/) {
		my $type;
		my $idGroup;
		my $newURL;
    # Valid current page
		if ($currURL =~ /https:\/\/(?:www|web).facebook.com\/groups\/(\w+)/) {
			$idGroup = $1;
			my $load = 1;
			if (my $pageSel = $mech->selector('div.uiHeader.uiHeaderTopAndBottomBorder.uiHeaderSection a', any => 1)) {
				if ($currURL = $pageSel->{href}) {
					if ($currURL !~ /^http/) { $currURL = 'https://www.facebook.com'.$currURL; }
					$type = 1;
				}
			} elsif (my @menu = $mech->selector('div._2yaa')) {
				foreach (@menu) {
					if ($_->{outerHTML} =~ /data-key="members"/) {
						if ($currURL =~ /\/$/) { chop($currURL); }
						if ($currURL !~ /members$/ and $currURL !~ /admins$/) { $currURL = $currURL . '/members'; }
						else { $load = 0; $newURL  = $currURL; }
						$type = 2;
					}
				}
			}
			if ($type and $currURL and $load) {
				$mech->get($currURL, synchronize => 0);
				sleep($CONFIG{'TIME_TO_WAIT'});
				$newURL = sprintf($mech->uri());
			}
		} elsif ($currURL =~ /https:\/\/(?:www|web).facebook.com\/browse\/group_members\/\?gid=(\w+)/) {
			$idGroup = $1;
			$type    = 1;
			$newURL  = $currURL;
		}
		# Right page, get the values
    if ($type and $newURL and ($type == 1 and   $newURL =~ /https:\/\/(?:www|web).facebook.com\/browse\/group_members\/\?gid=$idGroup/) or
															($type == 2 and (($newURL =~ /https:\/\/(?:www|web).facebook.com\/groups\/$idGroup\/members\/?/) or
																							 ($newURL =~ /https:\/\/(?:www|web).facebook.com\/groups\/$idGroup\/admins\/?/)))) {
			$winGroupMembers->tfGroupMembersName->Text($idGroup);
			my %categories;
			# Type with single list
			if ($type == 1) { $categories{$STR{'groupMembers'}}{url} = $newURL; }
			# Type with tab selection
			else {
				if (my $membersPageName = $mech->selector('a._5bv4', any => 1)) {
					if ($membersPageName->{innerHTML} =~ /^(\w+)/) { $categories{$1}{url} = $membersPageName->{href}; }
				}
				if (my $adminsPageName  = $mech->selector('a._5bv3', any => 1)) {
					if ($adminsPageName->{innerHTML}  =~ /^(\w+)/) { $categories{$1}{url} = $adminsPageName->{href};  }
				}
			}
      foreach my $cat (sort keys %categories) {
        if (my $i = $winGroupMembers->GridGroupMembers->InsertRow($cat, -1)) {
          $winGroupMembers->GridGroupMembers->SetCellText($i, 0, ''        );
          $winGroupMembers->GridGroupMembers->SetCellType($i, 0, GVIT_CHECK);
          $winGroupMembers->GridGroupMembers->SetCellCheck($i, 0, 1);
          $categories{$cat}{name} = encode($CONFIG{'CHARSET'}, $cat);
          $winGroupMembers->GridGroupMembers->SetCellText($i, 1, $categories{$cat}{name});
          $winGroupMembers->GridGroupMembers->SetCellText($i, 2, $categories{$cat}{url});
          $winGroupMembers->GridGroupMembers->AutoSize();
          $winGroupMembers->GridGroupMembers->ExpandLastColumn();
          $winGroupMembers->GridGroupMembers->Refresh();
        }
      }
		# Wrong page
		} else {
      $winGroupMembers->btnGroupMembersOk->Disable();
      Win32::GUI::MessageBox($winGroupMembers, $STR{'warn3'}, $STR{'warn2T'}, 0x40010);
      threads->exit();
    }
  } else { Win32::GUI::MessageBox($winGroupMembers, $STR{'warn4'}, $STR{'err1T'}, 0x40010); }
  $winGroupMembers->ChangeCursor($ARROW);
  &isDumpGroupMembersReady();

}  #--- End winGroupMembersThr

#--------------------------#
sub tfGroupMembersName_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winGroupMembers->tfDirSaveGroupMembers->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winGroupMembers->chSaveGroupMembersDir->Checked()) {
    $CONFIG{'DIR_SAVE_GROUP_MEMBERS'} = $saveDir;
    &saveConfig(\%CONFIG);
  }
  &isDumpGroupMembersReady();

}  #--- End tfGroupMembersName_Change

#--------------------------#
sub cbGroupMembersFormat_Change
#--------------------------#
{
  # No profile icon for txt format
  if ($winGroupMembers->cbGroupMembersFormat->GetCurSel() == 2) {
    $winGroupMembers->chGroupMembersProfileIcons->Disable();
  } else { $winGroupMembers->chGroupMembersProfileIcons->Enable(); }
  
}  #--- End cbGroupMembersFormat_Change

#--------------------------#
sub tfDirSaveGroupMembers_Change
#--------------------------#
{
  # Local variables
  my $GroupMembersName = $winGroupMembers->tfGroupMembersName->Text();
  my $saveDir          = $winGroupMembers->tfDirSaveGroupMembers->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winGroupMembers->chSaveGroupMembersDir->Checked()) {
    $CONFIG{'DIR_SAVE_GROUP_MEMBERS'} = $saveDir;
    &saveConfig(\%CONFIG);
  }
  &isDumpGroupMembersReady();

}  #--- End tfDirSaveGroupMembers_Change

#--------------------------#
sub btnDirSaveGroupMembers_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winGroupMembers->tfDirSaveGroupMembers->Text();
  my $dir;
  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) {
      while ($lastDir =~ /[^\\]$/) { chop($lastDir); }
    }
    $dir = Win32::GUI::BrowseForFolder( -owner      => $winGroupMembers	,
                                        -title      => $STR{'selDir'} 	,
                                        -folderonly => 1              	,
                                        -directory  => $lastDir       	,
                                        -newui      => 1              	, );
  } else {
    $dir = Win32::GUI::BrowseForFolder( -owner      => $winGroupMembers	,
                                        -title      => $STR{'selDir'} 	,
                                        -folderonly => 1              	,
                                        -newui      => 1              	, );
  }
  # Selected folder
  if ($dir and -d $dir) {
    if ($dir =~ /\\$/) { chop($dir); }
    $winGroupMembers->tfDirSaveGroupMembers->Text($dir);
  }
  
}  #--- End btnDirSaveGroupMembers_Click

#--------------------------#
sub btnBrowseDirSaveGroupMembers_Click
#--------------------------#
{
	&exploreDir($winGroupMembers->tfDirSaveGroupMembers->Text());
	
}  #--- End btnBrowseDirSaveGroupMembers_Click

#--------------------------#
sub chSaveGroupMembersDir_Click
#--------------------------#
{
  # Local variables
  my $dir = $winGroupMembers->tfDirSaveGroupMembers->Text();
  # If directory exists, save it
  if ($dir and -d $dir and $winGroupMembers->chSaveGroupMembersDir->Checked()) {
    $CONFIG{'REMEMBER_SAVE_GROUP_MEMBERS'} = 1;
    $CONFIG{'DIR_SAVE_GROUP_MEMBERS'} = $dir;
    &saveConfig(\%CONFIG);
  # Don't save
  } elsif (!$winGroupMembers->chSaveGroupMembersDir->Checked()) {
    $CONFIG{'REMEMBER_SAVE_GROUP_MEMBERS'} = 0;
    delete($CONFIG{'DIR_SAVE_GROUP_MEMBERS'});
    &saveConfig(\%CONFIG);
  }

}  #--- End chSaveGroupMembersDir_Click

#--------------------------#
sub chGroupMembersProfileIcons_Click
#--------------------------#
{
  # Save the choice
  if ($winGroupMembers->chGroupMembersProfileIcons->Checked()) {
    $CONFIG{'GROUP_MEMBERS_INCLUDE_ICONS'} = 1;
    &saveConfig(\%CONFIG);
  # Don't save
  } else {
    $CONFIG{'GROUP_MEMBERS_INCLUDE_ICONS'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chGroupMembersProfileIcons_Click

#--------------------------#
sub chGroupMembersOpenOutput_Click
#--------------------------#
{
  # Save the choice
  if ($winGroupMembers->chGroupMembersOpenOutput->Checked()) {
    $CONFIG{'GROUP_MEMBERS_OPEN_OUTPUT'} = 1;
    &saveConfig(\%CONFIG);
  # Don't save
  } else {
    $CONFIG{'GROUP_MEMBERS_OPEN_OUTPUT'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chGroupMembersOpenOutput_Click

#--------------------------#
sub GridGroupMembers_Click
#--------------------------#
{
  # Local variables
  my ($row, $column) = @_;
  # Select
  if (!$column) {
    my $selStatus = $winGroupMembers->GridGroupMembers->GetCellCheck($row, $column);
    if (!$row) {
      # Check all
      if (!$selStatus) {
				for (my $i = 0; $i < $winGroupMembers->GridGroupMembers->GetRows(); $i++) { $winGroupMembers->GridGroupMembers->SetCellCheck($i, 0, 1); }
      # Uncheck all
			} else {
				for (my $i = 0; $i < $winGroupMembers->GridGroupMembers->GetRows(); $i++) { $winGroupMembers->GridGroupMembers->SetCellCheck($i, 0, 0); }
			}
    } else {
      # Check
      if (!$selStatus) { $winGroupMembers->GridGroupMembers->SetCellCheck($row, $column, 1); }
      # Uncheck
      else {
				$winGroupMembers->GridGroupMembers->SetCellCheck($row, $column, 0);
				$winGroupMembers->GridGroupMembers->SetCellCheck(0   , $column, 0);
			}
    }
  }
  return(1);

}  #--- End GridGroupMembers_Click

#--------------------------#
sub isDumpGroupMembersReady
#--------------------------#
{
  # Local variables
  my $GroupMembersName = $winGroupMembers->tfGroupMembersName->Text();
  my $saveDir          = $winGroupMembers->tfDirSaveGroupMembers->Text();
  # Valid directory and valid name for save ?
  if (!$saveDir or !(-d $saveDir) or !$GroupMembersName) {
    $winGroupMembers->btnGroupMembersOk->Disable();
    return(0);
  }
  # No selected lists
  my $nbrSel = 0;
  for (my $i = 1; $i < $winGroupMembers->GridGroupMembers->GetRows(); $i++) {
    my $selStatus = $winGroupMembers->GridGroupMembers->GetCellCheck($i, 0);
    if ($selStatus == 1) {
      $nbrSel = 1;
      last;
    }
  }
  if (!$nbrSel) { $winGroupMembers->btnGroupMembersOk->Disable(); return(0); }
  $winGroupMembers->btnGroupMembersOk->Enable();

}  #--- End isDumpGroupMembersReady

#--------------------------#
sub btnGroupMembersOk_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Remember position
    if ($winConfig->chRememberPos->Checked()) {
      my $winLeft = $winGroupMembers->AbsLeft();
      my $winTop  = $winGroupMembers->AbsTop();
      $CONFIG{'WINGROUP_MEMBERS_LEFT'} = $winLeft;
      $CONFIG{'WINGROUP_MEMBERS_TOP'}  = $winTop;
      &saveConfig(\%CONFIG);
    }
    # Local variables
    my $groupMembersName  	= $winGroupMembers->tfGroupMembersName->Text();
    $groupMembersName     	=~ s/[\<\>\:\"\/\\\|\?\*]/-/g;
    my $saveDir           	= $winGroupMembers->tfDirSaveGroupMembers->Text();
    my %catGroupMembers; 		# Actually, It seems there are only two categories (Admins and Other members)
    my $nbrCatGroupMembers  = 0;
		my $type                = 0; # Type of list: 1 = combobox (Closed group), 2 = tab selection (public group)
    my $posPb1            	= 0;
    my $parsingDone       	= 0;
    my $nbrGroupMembersDone = 0;
    my $nbrRetries          = 0;
    if ($groupMembersName and -d $saveDir) {
      $THR = threads->create(\&dumpGroupMembers, $groupMembersName, $saveDir, \%catGroupMembers, $nbrCatGroupMembers, 
                             $type, $nbrGroupMembersDone, $posPb1, $parsingDone, $nbrRetries);
      return(-1);
    } else { Win32::GUI::MessageBox($win, $STR{'err5'}, $STR{'err1T'}, 0x40010); }
  }

}  #--- End btnGroupMembersOk_Click

#--------------------------#
sub dumpGroupMembers
#--------------------------#
{
  # Local variables
  my ($groupMembersName, $saveDir, $refCatGroupMembers, $nbrCatGroupMembers, $type, $nbrGroupMembersDone,
			$posPb1, $parsingDone, $nbrRetries) = @_;
  my $includeIcons = $winGroupMembers->chGroupMembersProfileIcons->Checked();
  my $format       = $winGroupMembers->cbGroupMembersFormat->GetCurSel(); # report format
  my $firstExec    = 0;
	my $currShownCat;
  # Cancel button
  $SIG{'KILL'} = sub {
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'dumpGroupMembersC'});
    # Turn off progress bar
    $winPb->lblPbCurr1->Text('');
    $winPb->lblCount1->Text('');
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    $winPb->pbWinPb1->SetPos(0);
    $winPb->pbWinPb2->SetPos(0);
    &winPb_Terminate;
    threads->exit();
  };
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
    $win->ChangeCursor($ARROW);
    $posPb1 = $winPb->pbWinPb1->GetPos();
    # Retry 10 times
    if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) {
      $nbrRetries++;
      # Progress window
      $winPb->pbWinPb2->SetPos(0);
      $winPb->lblPbCurr2->Text('');
      $winPb->lblCount2->Text('');
    }
    if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
      # Restart a new thread to continue
      if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $winPb->lblPbCurr1->Text($STR{'crash'}.'...'); }
      sleep(2);
      $THR = threads->create(\&dumpGroupMembers, $groupMembersName, $saveDir, $refCatGroupMembers, $nbrCatGroupMembers, 
                             $type, $nbrGroupMembersDone, $posPb1, $parsingDone, $nbrRetries);
    } else {
			my $err = (split(/ at /, $msgErr))[0];
      Win32::GUI::MessageBox($winPb, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    }
    # Kill this thread
    threads->exit();
  };
	# Connect to current tab in Firefox
	my $mech = WWW::Mechanize::Firefox->new(tab => 'current', autodie => 1);
	my $currURL = $mech->uri();
	if ($currURL =~ /browse\/group_members/) {
		$type = 1;
		my $currCat = $mech->selector('div.uiPopover span._55pe', any => 1);
		if ($currCat) { $currShownCat = $currCat->{innerHTML}; }
		elsif ($currCat = $mech->selector('div.filterBox a', any => 1)) {
			if ($currCat->{innerHTML} =~ /^(\w+)/) { $currShownCat = $1; }
		}
	} elsif ($currURL =~ /\/members/ or $currURL =~ /\/admins/) { $type = 2; }
  # First execution, must gather Group Members Lists
  if (!$posPb1 and !$nbrCatGroupMembers) {
    $firstExec = 1;
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'dumpGroupMembersP'}.'...');
    for (my $i = 1; $i < $winGroupMembers->GridGroupMembers->GetRows(); $i++) {
      my $selStatus = $winGroupMembers->GridGroupMembers->GetCellCheck($i, 0);
			my $catName = decode($CONFIG{'CHARSET'}, $winGroupMembers->GridGroupMembers->GetCellText($i, 1));
			my $catURL  = $winGroupMembers->GridGroupMembers->GetCellText($i, 2);
      if ($selStatus == 1) { $$refCatGroupMembers{$catName}{url} = $catURL; }
			if ($type == 2 and !$currShownCat) {
				if (my $membersPageName = $mech->selector('a._5bv4', any => 1)) {
					my $url = $membersPageName->{href};
					if ($currURL =~ /$url/ and $membersPageName->{innerHTML} =~ /^(\w+)/) { $currShownCat = $1; }
				}
				if (!$currShownCat and my $adminsPageName  = $mech->selector('a._5bv3', any => 1)) {
					my $url = $adminsPageName->{href};
					if ($currURL =~ /$url/ and $adminsPageName->{innerHTML}  =~ /^(\w+)/) { $currShownCat = $1; }
				}
			}
    }
    # Number of categories
    $nbrCatGroupMembers = keys %{$refCatGroupMembers};
  } # else, resume after a crash
  if ($nbrCatGroupMembers > 0) {
    my $count1;
    # First execution, turn on the progress window
    if ($firstExec == 1) {
      # Turn on progress bar
      $winPb->Center($winFriends);
      $winPb->Show();
      $win->Disable();
      $winPb->pbWinPb1->SetRange(0, $nbrCatGroupMembers);
      $winPb->pbWinPb1->SetPos(0);
      $winPb->pbWinPb1->SetStep(1);
      $winPb->lblPbCurr1->Text('');
      $winPb->lblCount1->Text('');
      $count1 = 0;
			# Make folders
			if (!-d "$saveDir\\temp") { mkdir("$saveDir\\temp"); }
			if (!-d "$saveDir\\images_$groupMembersName" and $includeIcons) { mkdir("$saveDir\\images_$groupMembersName"); }
    # If on resume state, get number of friends cat left
    } else {
      my $nbrCurrNbrCats = keys %{$refCatGroupMembers};
      $count1 = $nbrCatGroupMembers - $nbrCurrNbrCats;
    }
		# Parse each Group Members cat
		if (!$parsingDone) {
			foreach my $cat (sort keys %{$refCatGroupMembers}) {
				my $htmlPage;
				my @members;
				my $nbrMembers;
				# Check status for the current cat
				# 1 : Opening
				# 2 : Scrolling done
				# 3 : Downloading done
				# 4 : Parsing done
				
				# Opening the cat
				if (!exists($$refCatGroupMembers{$cat}{status})) {
					$winPb->lblPbCurr1->Text("$STR{'opening'}: $cat");
					$winPb->lblCount1->Text("$count1/$nbrCatGroupMembers");
					$winPb->lblPbCurr2->Text('');
					$winPb->lblCount2->Text('');
					$winPb->pbWinPb2->SetPos(0);
					if ($type == 1 and $currShownCat ne $cat) {
						my @listFromCombo = $mech->selector('a._54nc span._54nh');
						foreach my $catLink (@listFromCombo) {
							my $encodedName = encode($CONFIG{'CHARSET'}, $catLink->{innerHTML});
							if ($encodedName eq $cat) {
								$catLink->click();
								if (-f "$saveDir\\temp\\page.html") { unlink("$saveDir\\temp\\page.html"); }
							}
						}
					} elsif ($currShownCat ne $cat) {
						$mech->get($$refCatGroupMembers{$cat}{url}, synchronize => 0);
						sleep($CONFIG{'TIME_TO_WAIT'});
						if (-f "$saveDir\\temp\\page.html") { unlink("$saveDir\\temp\\page.html"); }
					}
					# Get the current cat name
					if ($type == 1) {
						my $currCat = $mech->selector('div.uiPopover span._55pe', any => 1);
						if ($currCat) { $currShownCat = $currCat->{innerHTML}; }
						elsif ($currCat = $mech->selector('div.filterBox a', any => 1)) {
							if ($currCat->{innerHTML} =~ /^(\w+)/) {
								$$refCatGroupMembers{$cat}{name} = $1;
								$currShownCat = $$refCatGroupMembers{$cat}{name};
							}
						} else {
							$$refCatGroupMembers{$cat}{name} = $STR{'groupMembers'};
							$currShownCat = $$refCatGroupMembers{$cat}{name};
						}
					} else {
						my $currCatUrl = $mech->uri();
						if (my $membersPageName = $mech->selector('a._5bv4', any => 1)) {
							my $url = quotemeta($membersPageName->{href});
							if ($currCatUrl =~ /$url/ and $membersPageName->{innerHTML} =~ /^(\w+)/) {
								$$refCatGroupMembers{$cat}{name} = $1;
								$currShownCat = $$refCatGroupMembers{$cat}{name};
							}
						}
						if (!$currShownCat and my $adminsPageName = $mech->selector('a._5bv3', any => 1)) {
							my $url = quotemeta($adminsPageName->{href});
							if ($currCatUrl =~ /$url/ and $adminsPageName->{innerHTML}  =~ /^(\w+)/) {
								$$refCatGroupMembers{$cat}{name} = $1;
								$currShownCat = $$refCatGroupMembers{$cat}{name};
							}
						}
					}
					$$refCatGroupMembers{$cat}{status} = 1; # Opening done
				}
				# Scrolling the cat
				if ($$refCatGroupMembers{$cat}{status} < 2) {
					$winPb->lblPbCurr1->Text("$STR{'scrolling'}: $cat");
					sleep($CONFIG{'TIME_TO_WAIT'});
					&scrollLikePage(\$mech, $CONFIG{'TIME_TO_WAIT'});
					$$refCatGroupMembers{$cat}{status} = 2; # Scrolling done
				}
				# Downloading the cat
				if ($$refCatGroupMembers{$cat}{status} < 3) {
					$winPb->lblPbCurr1->Text("$STR{'saving'}: $cat");
					$htmlPage = "$saveDir\\temp\\page.html";
					if (!-f $htmlPage or $includeIcons or !$winConfig->chDelTempFiles->Checked()) {
						&saveCurrentTab(\$mech, $includeIcons, $htmlPage, "$saveDir\\temp");
					}
					$winPb->lblPbCurr2->Text('');
					$$refCatGroupMembers{$cat}{status} = 3; # Downloading done
				}
				# Parsing the cat
				$nbrGroupMembersDone = keys %{$$refCatGroupMembers{$cat}{'profilOrder'}};
				if ($$refCatGroupMembers{$cat}{status} < 4) {
					$winPb->lblPbCurr1->Text("$STR{parsing}: $cat");
					# Load content from file
					if (-T $htmlPage) {
						if (open(my $fhTemp, "<:encoding(UTF-8)", $htmlPage)) {
							my $file_as_string = do { local $/ = <$fhTemp> };
							$file_as_string    =~ s/[\r\n]//g;
							if ($type == 1) {
								my @parts          = split(/fbProfileBrowserResult/, $file_as_string);
								undef($file_as_string);
								shift(@parts);
								my $currSection;
								foreach (@parts) { if ($_ !~ /^[^\"]+hidden[^\"]+\"/) { $currSection .= $_; } }
								@parts = ();
								@members = split(/fbProfileBrowserListItem/, $currSection);
								undef($currSection);
							} else {
								@members = split(/GroupProfileGridItem/, $file_as_string);
								undef($file_as_string);
							}
							shift(@members);
							$nbrMembers = scalar(@members);
							close($fhTemp);
						}
					}
					# Progress bar
					$winPb->pbWinPb2->SetRange(0, $nbrMembers);
					$winPb->pbWinPb2->SetPos($nbrGroupMembersDone);
					$winPb->pbWinPb2->SetStep(1);
					$winPb->lblCount2->Text("$nbrGroupMembersDone/$nbrMembers");
					# Parse friends details
					my $k = 0;
					foreach my $member (@members) {
						if ($k >= $nbrGroupMembersDone) {
							my $url;
							my $id;
							my $img;
							# Url and Img
							if ($member =~ / href="([^\&\"]+)(?:&|")[^\>]+hovercard\/user.php\?id=([^\&\"]+)(?:&|")[^\>]*>/) {
								$url = $1;
								$id  = $2;
							}
							# Img
							if ($member =~ /<img class="_s0[^\"]+_r[wv] img" src="([^\"]+)" /) { $img = $1; }
							# Minimum details required
							if ($url and $id and $img and !exists($$refCatGroupMembers{$cat}{profilUrl}{$id})) {
								$winPb->lblPbCurr2->Text("$STR{'friendsExtract'} $id...");
								if ($includeIcons and ($img =~ /\/([^\/\?]+)\?/ or $img =~ /(\w+\.jpg)/)) { # Include profile icons
									my $imgFilename = $1; # Replace image name by profil id
									my $encID    = encode('utf8', $id);
									my $encImgFN = encode('utf8', $imgFilename);
									rcopy("$saveDir\\temp\\$encImgFN", "$saveDir\\images_$groupMembersName\\$encID\.jpg"); # Copy image
									$$refCatGroupMembers{$cat}{profilImg}{$id} = "images_$groupMembersName\\$encID\.jpg";
								} elsif ($format == 1) { $$refCatGroupMembers{$cat}{profilImageUrl}{$id} = $img; } # HTML Report
								$$refCatGroupMembers{$cat}{profilUrl}{$id} = $url;
								$$refCatGroupMembers{$cat}{profilOrder}{$nbrGroupMembersDone} = $id;
								# Gather profil name
								my $url2 = quotemeta($url);
								if ($member =~ /<(?:div|span) class="fsl fwb fcb"><a href="$url2[^\>]+>([^\<]+)</) {
									$$refCatGroupMembers{$cat}{profilName}{$id} = $1;
								}
								# Gather details (if available)
								if ($member =~ /class="fsl fwb fcb"><a[^\>]+>[^\<]+<[^\>]+><\/div><div>([^\<]+)<\/div>(.+?)<span/ or
										$member =~ /class="fsl fwb fcb"><a[^\>]+>([^\<]+)<\/a><\/div><div><\/div>([^\<]+)(.+?)<span/) {
									my $details1 = $1;
									my $details2 = $2;
									$details1 =~ s/<[^\>]+>//g;
									$details1 = decode_entities($details1);
									if ($details2 =~ /data-utime="(\d+)/) {
										my $dateStr = &formatDate($1);
										$details2 =~ s/<[^\>]+>//g;
										$details2 .= '('.$dateStr.')';
									} else { $details2 =~ s/<[^\>]+>//g; }
									$details2 = decode_entities($details2);
									$$refCatGroupMembers{$cat}{profilDetails}{$id} = "$details1 $details2";
								}
							}
							$winPb->pbWinPb2->StepIt();
							$nbrGroupMembersDone++;
							$winPb->lblCount2->Text("$nbrGroupMembersDone/$nbrMembers");
						}
						$k++;
					}
					$$refCatGroupMembers{$cat}{status} = 4; # Parsing done
					$winPb->pbWinPb1->StepIt();
					$winPb->lblCount1->Text("$count1/$nbrCatGroupMembers");
				}
				$count1++;
				$nbrGroupMembersDone = 0;
				if ($count1 == $nbrCatGroupMembers) { $parsingDone = 1; }
			}
		}
	}
	# Parsing done, create the report
	my $count1 = 0;
	$winPb->lblPbCurr1->Text($STR{'createOutput'}.'...');
	$winPb->lblCount1->Text('');
	if ($nbrCatGroupMembers) {
		# Progress 1
		$winPb->lblCount1->Text("$count1/$nbrCatGroupMembers");
		$winPb->pbWinPb1->SetRange(0, $nbrCatGroupMembers);
		$winPb->pbWinPb1->SetPos(0);
		$winPb->pbWinPb1->SetStep(1);
		# Create and open the XLSX file
		my $filename;
		if (!$format) {
			$filename = "$saveDir\\$groupMembersName\.xlsx";
			my $excel;
			my $count = 1;
			while (!($excel = Excel::Writer::XLSX->new($filename))) { # If file is already open, must be renamed
				$filename = "$saveDir\\$groupMembersName [".$count++."]\.xlsx";
				if ($count == 10) { last; } # Stop after 10 attempts
			}
			# One sheet per category
			foreach my $cat (sort keys %{$refCatGroupMembers}) {
				&createExcelSheetWithDetails(\$excel, $cat, $$refCatGroupMembers{$cat}, $includeIcons, $saveDir);
				$count1++;
				$winPb->lblCount1->Text("$count1/$nbrCatGroupMembers");
				$winPb->pbWinPb1->StepIt();
			}
			$excel->close();
		# HTML
		} elsif ($format == 1) {
			$filename = &createHTMLGroupMembers($groupMembersName, $refCatGroupMembers, $nbrCatGroupMembers, $includeIcons, $saveDir);
		# TXT
		} else {
			$filename = "$saveDir\\$groupMembersName.txt";
			&createTXTGroupMembers($groupMembersName, $filename, $refCatGroupMembers, $nbrCatGroupMembers, $includeIcons, $saveDir);
		}
		# Open the file
		if ($winGroupMembers->chGroupMembersOpenOutput->Checked()) { $win->ShellExecute('open', $filename,'','',1); }
	}
	# Turn off progress bar
	$winPb->lblPbCurr1->Text('');
	$winPb->lblCount1->Text('');
	$winPb->lblPbCurr2->Text('');
	$winPb->lblCount2->Text('');
	$winPb->pbWinPb1->SetPos(0);
	$winPb->pbWinPb2->SetPos(0);
	&winPb_Terminate;
	# Delete temporary files
	if ($winConfig->chDelTempFiles->Checked()) { remove_tree("$saveDir\\temp"); }
	# Final message
  $win->Tray->Change(-tip => $STR{'dumpGroupMembersF'});
  if (!$win->IsVisible()) {
    $win->Tray->Change( -balloon_icon  => 'info'        ,
                        -balloon_title => 'ExtractFace' ,
                        -balloon_tip   => $STR{'dumpGroupMembersF'} , );
    $win->Tray->ShowBalloon(1);
  }
  $win->ChangeCursor($ARROW);

}  #--- End dumpGroupMembers

#--------------------------#
sub createHTMLGroupMembers
#--------------------------#
{
  # Local variables
  my ($groupMembersName, $refListGroupMembers, $nbrCatGroupMembers, $includeIcons, $saveDir) = @_;
  my $firstPage; # First page is the main page
  my $first = 0;
  my $count = 0;
  # List of pages
  my %listPages;
  foreach my $list (sort keys %{$refListGroupMembers}) {
    my $name = $$refListGroupMembers{$list}{name};
    $listPages{$name} = "$name - $list\.html";
  }
  # Create one page per category
  foreach my $list (sort keys %{$refListGroupMembers}) {
    my $encodedName = encode($CONFIG{'CHARSET'}, $$refListGroupMembers{$list}{name});
    $winPb->lblPbCurr1->Text("$STR{'createPage'}: $encodedName");
    my $filename = "$saveDir\\$listPages{$$refListGroupMembers{$list}{name}}";
    if ($first == 0) { $firstPage = $filename; $first = 1; } # Keep the filename of the first page
    open(HTML, ">:encoding(UTF-8)", $filename);
    print HTML "<!DOCTYPE html>\n";
    print HTML "<html>\n<head>\n<title>$$refListGroupMembers{$list}{name}</title>\n";
    print HTML "<meta charset=\"UTF-8\">\n";
		print HTML "<style>\n";
		print HTML "table, th, td {\n";
		print HTML "  border: 1px solid black;\n";
		print HTML "  border-collapse: collapse;\n";
		print HTML "}\n";
		print HTML "th, td {\n";
		print HTML "  padding: 5px;\n";
		print HTML "}\n";
		print HTML "</style>\n";
    print HTML "</head>\n";
    print HTML "<body>\n";
		print HTML "<h1 style=\"color:#003300;font-size: 18pt;font-variant: small-caps;font-weight: bold;\;text-align: center;\">";
    print HTML "$$refListGroupMembers{$list}{'name'}</h1>\n";
    print HTML "<table style=\"margin: auto;\">\n";
    print HTML "<tr><th colspan=4 style=\"height: 50px; color:#003300; background-color:#EEEEEE; font-size: 14pt; font-variant: small-caps; font-weight: bold;\">\n";
    my $header;
    foreach my $listName (sort keys %listPages) {
      if ($listName eq $$refListGroupMembers{$list}{name}) { $header .= "$listName - "; }
      else                                                 { $header .= "<a href=\"./$listPages{$listName}\">$listName</a> - "; }
    }
    chop($header); chop($header); chop($header);
    print HTML "$header</th></tr>\n";
    print HTML "<tr><td colspan=4 style=\"text-align: center;\">Origin url: <a href=\"$$refListGroupMembers{$list}{url}\">$$refListGroupMembers{$list}{url}</a></td></tr>\n";
    my $col = 0; # 2 columns per friend, first is profile icon, second is details
    foreach my $no (sort {$a <=> $b} keys %{$$refListGroupMembers{$list}{profilOrder}}) {
      if ($col == 0) { print HTML "<tr>"; }
      if (my $id = $$refListGroupMembers{$list}{profilOrder}{$no}) {
        if ($$refListGroupMembers{$list}{profilImg}{$id}) { print HTML "<td><img src=\"$$refListGroupMembers{$list}{profilImg}{$id}\" alt=\"\"></td>";      }
        else                                              { print HTML "<td><img src=\"$$refListGroupMembers{$list}{profilImageUrl}{$id}\" alt=\"\"></td>"; }
        $col++;
        print HTML "<td><strong>Name</strong>: $$refListGroupMembers{$list}{profilName}{$id}<br>";
        print HTML "<strong>Profile ID</strong>: $id</strong><br>";
        print HTML "<strong>Profile url</strong>: <a href=\"$$refListGroupMembers{$list}{profilUrl}{$id}\" target=\"_blank\">$$refListGroupMembers{$list}{profilUrl}{$id}</a><br>";
        print HTML "<strong>Details</strong>: $$refListGroupMembers{$list}{profilDetails}{$id}</td>";
        $col++;
      } else { print HTML "<td></td><td></td>"; $col += 2; }
      if ($col == 4) { print HTML "</tr>\n"; $col = 0; }
    }
    print HTML "</body>\n</html>";
    close(HTML);
    $count++;
    $winPb->lblCount1->Text("$count/$nbrCatGroupMembers");
    $winPb->pbWinPb1->StepIt();
  }
  
  return($firstPage);  
  
}  #--- End createHTMLGroupMembers

#--------------------------#
sub createTXTGroupMembers
#--------------------------#
{
  # Local variables
  my ($groupMembersName, $filename, $refListGroupMembers, $nbrLists, $includeIcons, $saveDir) = @_;
  my $count = 0;
  $winPb->lblPbCurr1->Text("$STR{'createTXT'}");
  open(my $txt, ">:encoding(UTF-8)", $filename);
  print $txt "GROUP NAME\tGROUP URL\tPROFILE ID\tURL\tNAME\tDETAILS\n"; # Header
  foreach my $list (sort keys %{$refListGroupMembers}) {
    foreach my $no (sort keys %{$$refListGroupMembers{$list}{profilOrder}}) {
      my $id = $$refListGroupMembers{$list}{profilOrder}{$no};
      print $txt "$$refListGroupMembers{$list}{name}\t$$refListGroupMembers{$list}{url}\t$id\t$$refListGroupMembers{$list}{profilUrl}{$id}".
                 "\t$$refListGroupMembers{$list}{profilName}{$id}\t$$refListGroupMembers{$list}{profilDetails}{$id}\n";
    }
    $count++;
    $winPb->lblCount1->Text("$count/$nbrLists");
    $winPb->pbWinPb1->StepIt();
  }
  close($txt);
  
}  #--- End createTXTGroupMembers

#--------------------------#
sub winGroupMembers_Terminate
#--------------------------#
{
  # Remember position
  if ($winConfig->chRememberPos->Checked()) {
    my $winLeft = $winGroupMembers->AbsLeft();
    my $winTop  = $winGroupMembers->AbsTop();
    $CONFIG{'WINGROUP_MEMBERS_LEFT'} = $winLeft;
    $CONFIG{'WINGROUP_MEMBERS_TOP'}  = $winTop;
    &saveConfig(\%CONFIG);
  }
  return(-1);

}  #--- End winGroupMembers_Terminate


#--------------------------#
sub scrollContacts
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Start the thread
    my $nbrRetries = 0;
    $THR = threads->create(\&scrollContactsThr, $nbrRetries);
  }
}  #--- End scrollContacts

#--------------------------#
sub scrollContactsThr
#--------------------------#
{
  # Local variables
  my $nbrRetries = shift;
  # Cancel button
  $SIG{'KILL'} = sub {
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    &winPb2_Terminate;
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'scrollContactsC'});
    threads->exit();
  };
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
    if ($msgErr =~ /problem connecting/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    } else {
      # Retry 10 times
      if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $nbrRetries++; }
      if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
        # Restart a new thread to continue
        if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $winPb2->lblPbCurr->Text($STR{'crash'}.'...'); }
        sleep(2);
        $THR = threads->create(\&scrollContactsThr, $nbrRetries);
      } else {
        Win32::GUI::MessageBox($win, $STR{'err2'}, $STR{'err1T'}, 0x40010);
        # Turn off progress bar
        $winPb2->lblPbCurr->Text('');
        $winPb2->lblCount->Text('');
        &winPb2_Terminate;
        $win->ChangeCursor($ARROW);
        $win->Tray->Change(-tip => 'ExtractFace');
      }
    }
    threads->exit();
  };
  # First execution
  if (!$nbrRetries) {
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'scrollContactsP'}.'...');
    
    # Turn on progress bar
    $winPb2->Center();
    $winPb2->Show($winChat);
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    $win->Disable();
  }
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  if ($mech->uri() =~ /facebook.com/) {
    while (1) {
			if (my $loadMoreContacts = ($mech->selector('div._19hf a', any => 1))[0]) {
				$mech->eval_in_page("var scrollingDiv = (document.getElementsByClassName('_19hf'))[0]; scrollingDiv.scrollIntoView(1)");
				sleep($CONFIG{'TIME_TO_WAIT'});
			} else { last; }
    }
    $win->Tray->Change(-tip => $STR{'scrollContactsF'});
    if (!$win->IsVisible()) {
      $win->Tray->Change( -balloon_icon  => 'info'                  ,
                          -balloon_title => 'ExtractFace'           ,
                          -balloon_tip   => $STR{'scrollContactsF'} , );
      $win->Tray->ShowBalloon(1);
    }
  } else {
		Win32::GUI::MessageBox($winPb2, $STR{'warn4'}, $STR{'err1T'}, 0x40010);
	}
  # Turn off progress bar
  $win->ChangeCursor($ARROW);
  $winPb2->lblPbCurr->Text('');
  $winPb2->lblCount->Text('');
  &winPb2_Terminate;

}  #--- End scrollContactsThr

#--------------------------#
sub scrollChat
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Start the thread
    my $nbrRetries = 0;
    my $count      = 0;
    $THR = threads->create(\&scrollChatThr, $nbrRetries, $count);
  }
}  #--- End scrollChat

#--------------------------#
sub scrollChatThr
#--------------------------#
{
  # Local variables
  my ($nbrRetries, $count) = @_;
  # Cancel button
  $SIG{'KILL'} = sub {
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    &winPb2_Terminate;
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'scrollChatC'});
    threads->exit();
  };
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
    if ($msgErr =~ /problem connecting/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    } else {
      # Retry 10 times
      if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $nbrRetries++; }
      if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
        # Restart a new thread to continue
        if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $winPb2->lblPbCurr->Text($STR{'crash'}.'...'); }
        sleep(2);
        $THR = threads->create(\&scrollChatThr, $nbrRetries, $count);
      } else {
				my $err = (split(/ at /, $msgErr))[0];
				Win32::GUI::MessageBox($win, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
        # Turn off progress bar
        $winPb2->lblPbCurr->Text('');
        $winPb2->lblCount->Text('');
        &winPb2_Terminate;
        $win->ChangeCursor($ARROW);
        $win->Tray->Change(-tip => 'ExtractFace');
      }
    }
    threads->exit();
  };
  # First execution
  if (!$nbrRetries) {
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'scrollChatP'}.'...');
    # Turn on progress bar
    $winPb2->Center();
    $winPb2->Show($winChat);
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    $win->Disable();
  }
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  if ($mech->uri() =~ /facebook.com/) {
    $winPb2->lblPbCurr->Text($STR{'scrollChatP'}.'...');
    my $maxScrollChatByDate = $winConfig->rbMaxScrollChatByDate->Checked();
    my $maxDate;
    my $maxScrollChat;
    if ($maxScrollChatByDate) {
      my ($d, $m, $y) = $winConfig->dtMaxScrollChatByDate->GetDate();
      $maxDate        = timelocal(0,0,0,$d,$m-1,$y); # Store in Unixtime format
    } else { $maxScrollChat = $winConfig->tfMaxScrollChat->Text(); }
    while (1) {
			$count++;
      # Scroll again
      if ($maxScrollChatByDate and $maxDate) { # Stop by date
				my $firstDisplayedDate;
				my $firstDisplayedDateCode = ($mech->selector('time._3oh-'))[0];
				if ($firstDisplayedDateCode->{innerHTML} =~ /(\d{2}\/\d{2}\/\d{4} \d{1,2}\:\d{2}[ap]m)/) {
					my $dateStr = $1;
					my $strp = DateTime::Format::Strptime->new(pattern => '%m/%d/%Y %I:%M%p');
					my $dt   = $strp->parse_datetime($dateStr);
					$firstDisplayedDate = timelocal(0,0,0,$dt->day(),$dt->month()-1,$dt->year());
				}
        if ($firstDisplayedDate <= $maxDate) { last; }
      } elsif ($maxScrollChat and $count > $maxScrollChat) { last; } # Stop by page
			if (($mech->selector('div._2k8v', any => 1))[0]) {
				$mech->eval_in_page("var scrollingDiv = (document.getElementsByClassName('_2k8v'))[0]; scrollingDiv.scrollIntoView(1)");
			} else { last; }
    }
    $win->Tray->Change(-tip => $STR{'scrollChatF'});
    if (!$win->IsVisible()) {
      $win->Tray->Change( -balloon_icon  => 'info'              ,
                          -balloon_title => 'ExtractFace'       ,
                          -balloon_tip   => $STR{'scrollChatF'} , );
      $win->Tray->ShowBalloon(1);
    }
  } else {
		Win32::GUI::MessageBox($winPb2, $STR{'warn4'}, $STR{'err1T'}, 0x40010);
	}
  # Turn off progress bar
  $win->ChangeCursor($ARROW);
  $winPb2->lblPbCurr->Text('');
  $winPb2->lblCount->Text('');
  &winPb2_Terminate;

}  #--- End scrollChatThr

#--------------------------#
sub loadNewMsg
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Start the thread
    my $nbrRetries = 0;
    my $count      = 0;
    $THR = threads->create(\&loadNewMsgThr, $nbrRetries, $count);
  }
}  #--- End loadNewMsg

#--------------------------#
sub loadNewMsgThr
#--------------------------#
{
  # Local variables
  my ($nbrRetries, $count) = @_;
  # Cancel button
  $SIG{'KILL'} = sub {
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    &winPb2_Terminate;
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'scrollChat2C'});
    threads->exit();
  };
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
    if ($msgErr =~ /problem connecting/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    } else {
      # Retry 10 times
      if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $nbrRetries++; }
      if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
        # Restart a new thread to continue
        if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $winPb2->lblPbCurr->Text($STR{'crash'}.'...'); }
        sleep(2);
        $THR = threads->create(\&loadNewMsgThr, $nbrRetries, $count);
      } else {
				my $err = (split(/ at /, $msgErr))[0];
				Win32::GUI::MessageBox($win, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
        # Turn off progress bar
        $winPb2->lblPbCurr->Text('');
        $winPb2->lblCount->Text('');
        &winPb2_Terminate;
        $win->ChangeCursor($ARROW);
        $win->Tray->Change(-tip => 'ExtractFace');
      }
    }
    threads->exit();
  };
  # First execution
  if (!$nbrRetries) {
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'scrollChat2P'}.'...');
    # Turn on progress bar
    $winPb2->Center();
    $winPb2->Show($winChat);
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    $win->Disable();
  }
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  if ($mech->uri() =~ /facebook.com/) {
    $winPb2->lblPbCurr->Text($STR{'scrollChat2P'}.'...');
    my $maxScrollChatByDate = $winConfig->rbMaxScrollChatByDate->Checked();
    my $maxDate;
    my $maxScrollChat;
    if ($maxScrollChatByDate) {
      my ($d, $m, $y) = $winConfig->dtMaxScrollChatByDate->GetDate();
      $maxDate        = timelocal(0,0,0,$d,$m-1,$y); # Store in Unixtime format
    } else { $maxScrollChat = $winConfig->tfMaxScrollChat->Text(); }
    while (1) {
			$count++;
      # Scroll again
      if ($maxScrollChatByDate and $maxDate) { # Stop by date
        my $lastDisplayedDate = ($mech->selector('h4._497p._2lpt time._3oh-'))[-1];
        if ($lastDisplayedDate->{innerHTML} =~ /(\d{2}\/\d{2}\/\d{4} \d{1,2}\:\d{2}[ap]m)/) {
					my $strp     = DateTime::Format::Strptime->new(pattern => '%m/%d/%Y %l:%M%p');
					my $dt       = $strp->parse_datetime($1);
          my $dateOnly = timelocal(0,0,0,$dt->day(),$dt->month()-1,$dt->year());
          if ($dateOnly >= $maxDate) { last; }
        }
      } elsif ($maxScrollChat and $count > $maxScrollChat) { last; } # Stop by page
			my $loadNewerCode = ($mech->selector('button._3quh._30yy._2t_._41jf'))[1];
			if ($loadNewerCode) {
				$loadNewerCode->click();
				sleep($CONFIG{'TIME_TO_WAIT'});
			# If No Load Older button, Load Newer if the first button
			} elsif ($loadNewerCode = ($mech->selector('button._3quh._30yy._2t_._41jf'))[0]) {
				$loadNewerCode->click();
				sleep($CONFIG{'TIME_TO_WAIT'});
			} else { last; }
    }
    $win->Tray->Change(-tip => $STR{'scrollChat2F'});
    if (!$win->IsVisible()) {
      $win->Tray->Change( -balloon_icon  => 'info'               ,
                          -balloon_title => 'ExtractFace'        ,
                          -balloon_tip   => $STR{'scrollChat2F'} , );
      $win->Tray->ShowBalloon(1);
    }
  } else { Win32::GUI::MessageBox($winPb2, $STR{'warn4'}, $STR{'err1T'}, 0x40010); }
  # Turn off progress bar
  $win->ChangeCursor($ARROW);
  $winPb2->lblPbCurr->Text('');
  $winPb2->lblCount->Text('');
  &winPb2_Terminate;

}  #--- End loadNewMsgThr

#--------------------------#
sub loadOldMsg
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Start the thread
    my $nbrRetries = 0;
    my $count      = 0;
    $THR = threads->create(\&loadOldMsgThr, $nbrRetries, $count);
  }
}  #--- End loadOldMsg

#--------------------------#
sub loadOldMsgThr
#--------------------------#
{
  # Local variables
  my ($nbrRetries, $count) = @_;
  # Cancel button
  $SIG{'KILL'} = sub {
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    &winPb2_Terminate;
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'scrollChat3C'});
    threads->exit();
  };
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
    if ($msgErr =~ /problem connecting/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    } else {
      # Retry 10 times
      if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $nbrRetries++; }
      if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
        # Restart a new thread to continue
        if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $winPb2->lblPbCurr->Text($STR{'crash'}.'...'); }
        sleep(2);
        $THR = threads->create(\&loadOldMsgThr, $nbrRetries, $count);
      } else {
				my $err = (split(/ at /, $msgErr))[0];
				Win32::GUI::MessageBox($win, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
        # Turn off progress bar
        $winPb2->lblPbCurr->Text('');
        $winPb2->lblCount->Text('');
        &winPb2_Terminate;
        $win->ChangeCursor($ARROW);
        $win->Tray->Change(-tip => 'ExtractFace');
      }
    }
    threads->exit();
  };
  # First execution
  if (!$nbrRetries) {
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'scrollChat3P'}.'...');
    # Turn on progress bar
    $winPb2->Center();
    $winPb2->Show($winChat);
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    $win->Disable();
  }
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  if ($mech->uri() =~ /facebook.com/) {
    $winPb2->lblPbCurr->Text($STR{'scrollChat3P'}.'...');
    my $maxScrollChatByDate = $winConfig->rbMaxScrollChatByDate->Checked();
    my $maxDate;
    my $maxScrollChat;
    if ($maxScrollChatByDate) {
      my ($d, $m, $y) = $winConfig->dtMaxScrollChatByDate->GetDate();
      $maxDate        = timelocal(0,0,0,$d,$m-1,$y); # Store in Unixtime format
    } else { $maxScrollChat = $winConfig->tfMaxScrollChat->Text(); }
    while (1) {
			$count++;
      # Scroll again
      if ($maxScrollChatByDate and $maxDate) { # Stop by date
        my $firstDisplayedDate = ($mech->selector('h4._497p._2lpt time._3oh-'))[0];
        if ($firstDisplayedDate->{innerHTML} =~ /(\d{2}\/\d{2}\/\d{4} \d{1,2}\:\d{2}[ap]m)/) {
					my $strp     = DateTime::Format::Strptime->new(pattern => '%m/%d/%Y %l:%M%p');
					my $dt       = $strp->parse_datetime($1);
          my $dateOnly = timelocal(0,0,0,$dt->day(),$dt->month()-1,$dt->year());
          if ($dateOnly <= $maxDate) { last; }
        }
      } elsif ($maxScrollChat and $count > $maxScrollChat) { last; } # Stop by page
      my @loadOlderCode = $mech->selector('button._3quh._30yy._2t_._41jf');
			if (scalar(@loadOlderCode) > 1) {
				$loadOlderCode[0]->click();
				sleep($CONFIG{'TIME_TO_WAIT'});
			} else { last; }
    }
    $win->Tray->Change(-tip => $STR{'scrollChat3F'});
    if (!$win->IsVisible()) {
      $win->Tray->Change( -balloon_icon  => 'info'               ,
                          -balloon_title => 'ExtractFace'        ,
                          -balloon_tip   => $STR{'scrollChat3F'} , );
      $win->Tray->ShowBalloon(1);
    }
  } else { Win32::GUI::MessageBox($winPb2, $STR{'warn4'}, $STR{'err1T'}, 0x40010); }
  # Turn off progress bar
  $win->ChangeCursor($ARROW);
  $winPb2->lblPbCurr->Text('');
  $winPb2->lblCount->Text('');
  &winPb2_Terminate;

}  #--- End loadOldMsgThr

#--------------------------#
sub winChat
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Start the thread
    $THR = threads->create(\&winChatThr);
    usleep(500000);
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINCHAT_LEFT'} and $CONFIG{'WINCHAT_TOP'}) {
      $winChat->Left($CONFIG{'WINCHAT_LEFT'});
      $winChat->Top($CONFIG{'WINCHAT_TOP'});
    } else { $winChat->Center(); }
    $winChat->DoModal();
  }

}  #--- End winChat

#--------------------------#
sub btnChatRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Start the thread
    $winChat->tfChatName->Text('');
    $THR = threads->create(\&winChatThr);
  }
  
}  #--- End btnChatRefresh_Click

#--------------------------#
sub winChatThr
#--------------------------#
{
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($msgErr =~ /NS_ERROR_FILE_IS_LOCKED/) {
      # Restart a new thread to continue
      $THR = threads->create(\&winChatThr);
    } else {
      if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
			my $err = (split(/ at /, $msgErr))[0];
      Win32::GUI::MessageBox($winChat, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
    }
  };
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      $winChat->btnChatOk->Disable();
      Win32::GUI::MessageBox($winChat, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  if ($mech->uri() =~ /facebook.com/) {
    my $currURL  = $mech->uri();
    if ($currURL =~ /https:\/\/(?:www|web).facebook.com\/messages\/t\/search\/([^\/\?]+)\/?/ or
        $currURL =~ /https:\/\/(?:www|web).facebook.com\/messages\/t\/([^\/\?]+)\/?/ or
				$currURL =~ /https:\/\/(?:www|web).facebook.com\/messages\/archived\/t\/([^\/\?]+)\/?/) {
      my $title = $1;
      $title =~ s/[\#\<\>\:\"\/\\\|\?\*]/_/g;
      $winChat->tfChatName->Text("$title - $STR{'chat'}");
    } else {
      $winChat->btnChatOk->Disable();
      Win32::GUI::MessageBox($winChat, $STR{'warn3'}, $STR{'warn2T'}, 0x40010);
      threads->exit();
    }
  } else { Win32::GUI::MessageBox($winChat, $STR{'warn4'}, $STR{'err1T'}, 0x40010); }
  &isDumpChatReady();

}  #--- End winChatThr

#--------------------------#
sub tfChatName_Change
#--------------------------#
{
  &isDumpChatReady();

}  #--- End tfChatName_Change

#--------------------------#
sub tfDirSaveChat_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winChat->tfDirSaveChat->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winChat->chSaveChatDir->Checked()) {
    $CONFIG{'DIR_SAVE_CHAT'} = $saveDir;
    &saveConfig(\%CONFIG);
  }
  &isDumpChatReady();

}  #--- End tfDirSaveChat_Change

#--------------------------#
sub btnDirSaveChat_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winChat->tfDirSaveChat->Text();
  my $dir;
  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) {
      while ($lastDir =~ /[^\\]$/) { chop($lastDir); }
    }
    $dir = Win32::GUI::BrowseForFolder( -owner      => $winChat       ,
                                        -title      => $STR{'selDir'} ,
                                        -folderonly => 1              ,
                                        -directory  => $lastDir       ,
                                        -newui      => 1              , );
  } else {
    $dir = Win32::GUI::BrowseForFolder( -owner      => $winChat       ,
                                        -title      => $STR{'selDir'} ,
                                        -folderonly => 1              ,
                                        -newui      => 1              , );
  }
  # Selected folder
  if ($dir and -d $dir) {
    if ($dir =~ /\\$/) { chop($dir); }
    $winChat->tfDirSaveChat->Text($dir);
  }
  
}  #--- End btnDirSaveChat_Click

#--------------------------#
sub btnBrowseDirSaveChat_Click
#--------------------------#
{
	&exploreDir($winChat->tfDirSaveChat->Text());
	
}  #--- End btnBrowseDirSaveChat_Click

#--------------------------#
sub chSaveChatDir_Click
#--------------------------#
{
  # Local variables
  my $dir = $winChat->tfDirSaveChat->Text();
  # If directory exists, save it
  if ($dir and -d $dir and $winChat->chSaveChatDir->Checked()) {
    $CONFIG{'REMEMBER_SAVE_CHAT'} = 1;
    $CONFIG{'DIR_SAVE_CHAT'} = $dir;
    &saveConfig(\%CONFIG);
  # Don't save
  } elsif (!$winChat->chSaveChatDir->Checked()) {
    $CONFIG{'REMEMBER_SAVE_CHAT'} = 1;
    delete($CONFIG{'DIR_SAVE_CHAT'});
    &saveConfig(\%CONFIG);
  }

}  #--- End chSaveChatDir_Click

#--------------------------#
sub rbChatNormalMode_Click
#--------------------------#
{
  $winChat->chDownloadImg->Enable();
  $winChat->chDownloadVid->Enable();
  $winChat->chDownloadAD->Enable();

}  #--- End rbChatNormalMode_Click

#--------------------------#
sub rbChatSafeMode_Click
#--------------------------#
{
  $winChat->chDownloadImg->Checked(0);
  $winChat->chDownloadVid->Checked(0);
  $winChat->chDownloadAD->Checked(0);
  $winChat->chDownloadImg->Disable();
  $winChat->chDownloadVid->Disable();
  $winChat->chDownloadAD->Disable();

}  #--- End rbChatSafeMode_Click

#--------------------------#
sub chDownloadAD_Click
#--------------------------#
{
  if ($winChat->chDownloadAD->Checked()) {
    $winChat->chDownloadImg->Enable();
  } else {
    $winChat->chDownloadImg->Checked(0);
    $winChat->chDownloadImg->Disable();
  }

}  #--- End chDownloadAD_Click

#--------------------------#
sub dtChatDatesRangeS_Change
#--------------------------#
{
  $winChat->rbChatDatesAll->Checked(0);
  $winChat->rbChatDatesRange->Checked(1);

}  #--- End dtChatDatesRangeS_Change

#--------------------------#
sub dtChatDatesRangeE_Change
#--------------------------#
{
  $winChat->rbChatDatesAll->Checked(0);
  $winChat->rbChatDatesRange->Checked(1);

}  #--- End dtChatDatesRangeE_Change

#--------------------------#
sub isDumpChatReady
#--------------------------#
{
  # Local variables
  my $chatName = $winChat->tfChatName->Text();
  my $saveDir  = $winChat->tfDirSaveChat->Text();
  # Valid directory and valid name for save ?
  if (!$saveDir or !(-d $saveDir) or !$chatName) { $winChat->btnChatOk->Disable(); return(0); }
  $winChat->btnChatOk->Enable();

}  #--- End isDumpChatReady

#--------------------------#
sub btnChatOk_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Remember position
    if ($winConfig->chRememberPos->Checked()) {
      my $winLeft = $winChat->AbsLeft();
      my $winTop  = $winChat->AbsTop();
      $CONFIG{'WINCHAT_LEFT'} = $winLeft;
      $CONFIG{'WINCHAT_TOP'}  = $winTop;
      &saveConfig(\%CONFIG);
    }
    # Local variables
    my $chatName = $winChat->tfChatName->Text();
    my $saveDir  = $winChat->tfDirSaveChat->Text();
    $chatName    =~ s/[\<\>\:\"\/\\\|\?\*]/-/g;
    my $interlocutor;
    my $interlocutorURL;
		my %messages;
    my $posPb1          = 0;
    my $nbrRetries      = 0;
    my $count           = 0;
    my $step            = 1;
    my $nbrPartsDone    = 0;
    my $nbrMessagesDone = 0;
    if ($chatName and -d $saveDir) {
      # Start the thread
      $THR = threads->create(\&dumpChat, $chatName, $interlocutor, $interlocutorURL, $saveDir,
                             \%messages, $posPb1, $nbrRetries, $count, $step, $nbrPartsDone,
														 $nbrMessagesDone);
      return(-1);
    } else { Win32::GUI::MessageBox($win, $STR{'err5'}, $STR{'err1T'}, 0x40010); }
  }

}  #--- End btnChatOk_Click

#--------------------------#
sub dumpChat
#--------------------------#
{
  # Local variables
  my ($chatName, $interlocutor, $interlocutorURL, $saveDir, $refMessages, $posPb1, $nbrRetries,
			$count, $step, $nbrPartsDone, $nbrMessagesDone) = @_;
	my $baseDir    = "$saveDir\\$chatName";
  my $tmpDir     = "$baseDir\\temp";
  my $htmlPage   = "$tmpDir\\page.html";
  my $normalMode = $winChat->rbChatNormalMode->Checked();
  # Filter by dates (if set)
  my $dateS;
  my $dateE;
  if ($winChat->rbChatDatesRange->Checked()) {
    my ($d1, $m1, $y1) = $winChat->dtChatDatesRangeS->GetDate();
    $dateS             = timelocal(0,0,0,$d1,$m1-1,$y1); # Store in Unixtime format
    my ($d2, $m2, $y2) = $winChat->dtChatDatesRangeE->GetDate();
    $dateE             = timelocal(0,0,0,$d2,$m2-1,$y2); # Store in Unixtime format
		$dateE            += 86399; # Add 23h59 to be at the end of the day
  }
  # Cancel button
  $SIG{'KILL'} = sub {
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'dumpChatC'});
    # Turn off progress bar
    $winPb->lblPbCurr1->Text('');
    $winPb->lblCount1->Text('');
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    $winPb->pbWinPb1->SetPos(0);
    $winPb->pbWinPb2->SetPos(0);
    &winPb_Terminate;
    threads->exit();
  };
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
    $win->ChangeCursor($ARROW);
    # Progress window
    $posPb1 = $winPb->pbWinPb1->GetPos();
    $winPb->pbWinPb2->SetPos(0);
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    # Retry 10 times
    if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $nbrRetries++; }
    if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
      # Restart a new thread to continue
      if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $winPb->lblPbCurr1->Text($STR{'crash'}.'...'); }
      sleep(2);
      $THR = threads->create(\&dumpChat, $chatName, $interlocutor, $interlocutorURL, $saveDir,
														 $refMessages, $posPb1, $nbrRetries, $count, $step, $nbrPartsDone,
														 $nbrMessagesDone);
    } else {
			my $err = (split(/ at /, $msgErr))[0];
      Win32::GUI::MessageBox($winPb, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
			# Turn off progress bar
			$winPb->lblPbCurr1->Text('');
			$winPb->lblCount1->Text('');
			$winPb->lblPbCurr2->Text('');
			$winPb->lblCount2->Text('');
			$winPb->pbWinPb1->SetPos(0);
			$winPb->pbWinPb2->SetPos(0);
			&winPb_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    }
    # Kill this thread
    threads->exit();
  };
  # First execution
  if (!$count) {
		# Turn on progress bar
		$winPb->Center($winChat);
		$winPb->Show();
		$win->Disable();
		$winPb->lblPbCurr1->Text($STR{'dumpChatP'}.'...');
		$winPb->pbWinPb1->SetRange(0, 3);
		$winPb->pbWinPb1->SetPos(0);
		$winPb->pbWinPb1->SetStep(1);
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'dumpChatP'}.'...');
  } else { $count--; }
  # Connect to current tab
  my $mech = WWW::Mechanize::Firefox->new(tab => 'current');
  # Create folders and save the page
  my $origURL = $mech->uri;
  my $profilID;
	if ($origURL =~ /messages\/t\/(?:search\/)?([^?#]+)\#?/) { $profilID = $1; } # $profilID is the profil ID of the interlocutor
  if ($step == 1) {
		if (!-d $baseDir) { mkdir($baseDir); }
    if (!-d $tmpDir) { mkdir($tmpDir); }
    my $status;
		$winPb->lblPbCurr1->Text($STR{'saveTab'}.'...');
		if (!-T $htmlPage or !$winConfig->chDelTempFiles->Checked()) { &saveCurrentTab(\$mech, $normalMode, $htmlPage, $tmpDir); }
		$winPb->lblPbCurr2->Text('');
    $step = 2; # Page have been saved
		$winPb->pbWinPb1->StepIt();
		$winPb->lblCount1->Text("1/3");
  }
  # Parse html page
  if ($step == 2) {
		$winPb->lblPbCurr1->Text($STR{'parsePage'}.'...');
    my $i = 0;
    # Interlocutor name and url
		if (!$interlocutor) {
			my $headerNameCode = $mech->selector('h2._17w2', one => 1);
			if ($headerNameCode->{innerHTML} =~ /<span[^\>]+> ?<!--[^\>]+>([^<]+)/) { $interlocutor   = $1; }
		}
		if (!$interlocutorURL) {
			my $headerUrlCode  = $mech->selector('div._4v0l a', any => 1);
			if ($headerUrlCode->{href}) { $interlocutorURL = $headerUrlCode->{href}; }
		}
    # Parse HTML file
		my @byDateParts;
    if (-T $htmlPage) {
      if (open(my $fhTemp, "<:encoding(UTF-8)", $htmlPage)) {
        my $file_as_string = do { local $/ = <$fhTemp> };
				close($fhTemp);
        $file_as_string =~ s/[\r\n]//g;
				my @sections = split(/function\(Bootloader\)/, $file_as_string);
				foreach my $section (@sections) {
					if ($section =~ /aria-label="Messages"/) {
						my @parts = split(/aria-label="Messages"/, $section);
						foreach my $part (@parts) {
							if ($part =~ /_497p _2lpt/) {
								@byDateParts = split(/_497p _2lpt/, $part); # Split using date tag
								last;
							}
						}
						if (scalar(@byDateParts) == 0) { push(@byDateParts, $section); }
						last;
					}
				}
      }
			if (scalar(@byDateParts)) {
				my $nbrParts  = scalar(@byDateParts);
				$nbrPartsDone = keys %{$refMessages};
				# Progress bar
				$winPb->pbWinPb2->SetRange(0, $nbrParts);
				$winPb->pbWinPb2->SetPos($nbrPartsDone);
				$winPb->pbWinPb2->SetStep(1);
				$winPb->lblCount2->Text("$nbrPartsDone/$nbrParts");
				my $k = 0;
				foreach my $datePart (@byDateParts) {
          if ($k >= $nbrPartsDone) {
						my $startingDate;
						# Get the date (if available)
						if ($datePart =~ /<time class="_3oh-">([^\<]+)<\/time>/) { $startingDate = $1; }
						# Split the messages
						my @msgParts;
						if ($datePart =~ /_1t_p clearfix/) {
							@msgParts = split(/_1t_p clearfix/, $datePart);
							shift(@msgParts);
						} else { push(@msgParts, $datePart); }
						if (scalar(@msgParts)) {
							my $msgCount = 0;
							$nbrMessagesDone = keys %{$$refMessages{$nbrPartsDone}};
							foreach my $datePart (@msgParts) {
								if ($msgCount >= $nbrMessagesDone) {
									my ($msgHeader, @msgContent) = split(/direction_ltr/, $datePart);
									# Sender is the other
									if ($msgHeader =~ /_1t_r/) {
										my $date;
										my $dateStr;
										# Verify date
										if ($startingDate and $startingDate =~ /(\d{2}\/\d{2}\/\d{4} \d{1,2}\:\d{2}[ap]m)/) {
											my $strp = DateTime::Format::Strptime->new(pattern => '%m/%d/%Y %l:%M%p');
											my $dt   = $strp->parse_datetime($1);
											$date    = $dt->epoch();
											$dateStr = $dt->ymd;
										}
										my $keepMsg = 1;
										# Message is older than the requested date
										if ($dateS and $date and $date < $dateS) { $keepMsg = 0; }
										# Message is newer than the requested date
										if (($dateE and $date and $date > $dateE) or ($dateE and !$date)) { $keepMsg = 0; }
										if ($keepMsg) {
											$winPb->lblPbCurr2->Text("$STR{'parsingMsg'} $dateStr...");
											$$refMessages{$nbrPartsDone}{$nbrMessagesDone}{date} = $date if $date;
											# Sender name and message time
											if ($msgHeader =~ /data-tooltip-content="([^\"]+)"/) {
												my $time = $1;
												my $dt;
												if ($time =~ /(\w+ \d{1,2}, \d{4} \d{1,2}:\d{2} [ap]m)/) {
													my $strp = DateTime::Format::Strptime->new(pattern => '%B %e, %Y %l:%M %p');
													$dt   	 = $strp->parse_datetime($1);
												} elsif ($time =~ /(\w+ \d{1,2}((?:[A-Za-z]{2})), \d{1,2}:\d{2}[ap]m)/) {
													my $str = $1;
													if ($2) { $str =~ s/[a-zA-Z]{2},/,/; }
													my $strp = DateTime::Format::Strptime->new(pattern => '%B %e, %l:%M%p');
													$dt   	 = $strp->parse_datetime($str);
													my $year = (localtime(time))[5];
													$year += 1900;
													$dt->set_year($year);
												}
												if ($dt) {
													$$refMessages{$nbrPartsDone}{$nbrMessagesDone}{date} = $dt->epoch();
													$$refMessages{$nbrPartsDone}{$nbrMessagesDone}{time} = $dt->hms;
												} else {
													$$refMessages{$nbrPartsDone}{$nbrMessagesDone}{time} = $time;
												}
											}
											# Sender name only
											if ($msgHeader =~ /alt="([^\"]+)"/) {
												$$refMessages{$nbrPartsDone}{$nbrMessagesDone}{senderName} = $1;
												if (!$interlocutor) { $interlocutor = $1; }
											}
											# Sender image url or filename
											if ($msgHeader =~ /src="([^\"]+)"/) {
												my $encProfileImgSRC = encode('utf8', $1);
												my $profileImg;
												if (!-d "$baseDir\\images_$chatName") { mkdir("$baseDir\\images_$chatName"); }
												if    ($encProfileImgSRC =~ /\/([^\/\?]+)\?/) { $profileImg = $1;                }
												elsif ($encProfileImgSRC =~ /\.jpg$/)         { $profileImg = $encProfileImgSRC; }
												if ($normalMode and -e "$tmpDir\\$profileImg" and !-e "$baseDir\\images_$chatName\\$profileImg") {
													rcopy("$tmpDir\\$profileImg", "$baseDir\\images_$chatName\\$profileImg");
												} elsif ($normalMode and !-e "$baseDir\\images_$chatName\\$profileImg" and
																 !-e "$baseDir\\images_$chatName\\$profileImg" and $encProfileImgSRC) {
													$mech->save_url($encProfileImgSRC, "$baseDir\\images_$chatName\\$profileImg");
												} else { $profileImg = $encProfileImgSRC; }
												$$refMessages{$nbrPartsDone}{$nbrMessagesDone}{senderImg} = $profileImg;
											}
											# Parse message
											my $strCount = 0;
											foreach my $msg (@msgContent) {
												$$refMessages{$nbrPartsDone}{$nbrMessagesDone}{messages} .= &parseMessage($msg, $normalMode, $baseDir, $tmpDir, $chatName, \$mech);
											}
											$$refMessages{$nbrPartsDone}{$nbrMessagesDone}{messages} =~ s/<br>$//;
											$nbrMessagesDone++;
										}
									# Sender is me
									} else {
										# Parse message
										foreach my $msg (@msgContent) {
											# Verify date
											my $date;
											my $dateStr;
											if ($startingDate and $startingDate =~ /(\d{2}\/\d{2}\/\d{4} \d{1,2}\:\d{2}[ap]m)/) {
												my $strp = DateTime::Format::Strptime->new(pattern => '%m/%d/%Y %l:%M%p');
												my $dt   = $strp->parse_datetime($1);
												$date    = $dt->epoch();
												$dateStr = $dt->ymd;
											}
											my $keepMsg = 1;
											# Message is older than the requested date
											if ($dateS and $date and $date < $dateS) { $keepMsg = 0; }
											# Message is newer than the requested date
											if (($dateE and $date and $date > $dateE) or ($dateE and !$date)) { $keepMsg = 0; }
											if ($keepMsg) {
												$winPb->lblPbCurr2->Text("$STR{'parsingMsg'} $dateStr...");
												$$refMessages{$nbrPartsDone}{$nbrMessagesDone}{senderName} = $STR{'Me'};
												$$refMessages{$nbrPartsDone}{$nbrMessagesDone}{date} = $date if $date;
												if ($msg =~ /data-tooltip-content="([^\"]+)"/) { # Message time
													my $time = $1;
													my $dt;
													if ($time =~ /(\w+ \d{1,2}, \d{4} \d{1,2}:\d{2} [ap]m)/) {
														my $strp = DateTime::Format::Strptime->new(pattern => '%B %e, %Y %l:%M %p');
														$dt   	 = $strp->parse_datetime($1);
													} elsif ($time =~ /(\w+ \d{1,2}((?:[A-Za-z]{2})), \d{1,2}:\d{2}[ap]m)/) {
														my $str = $1;
														if ($2) { $str =~ s/[a-zA-Z]{2},/,/; }
														my $strp = DateTime::Format::Strptime->new(pattern => '%B %e, %l:%M%p');
														$dt      = $strp->parse_datetime($str);
														my $year = (localtime(time))[5];
														$year += 1900;
														$dt->set_year($year);
													}
													if ($dt) {
														$$refMessages{$nbrPartsDone}{$nbrMessagesDone}{date} = $dt->epoch();
														$$refMessages{$nbrPartsDone}{$nbrMessagesDone}{time} = $dt->hms;
													} else {
														$$refMessages{$nbrPartsDone}{$nbrMessagesDone}{time} = $time;
													}
												}
												$$refMessages{$nbrPartsDone}{$nbrMessagesDone}{messages} = &parseMessage($msg, $normalMode, $baseDir, $tmpDir, $chatName, \$mech);
												$$refMessages{$nbrPartsDone}{$nbrMessagesDone}{messages} =~ s/<br>$//;
												$nbrMessagesDone++;
											}
											$msgCount++;
										}
										$msgCount--;
									}
								}
								$msgCount++;
							}
						}
						$nbrPartsDone++;
					}
					$k++;
					$winPb->pbWinPb2->StepIt();
					$winPb->lblCount2->Text("$k/$nbrParts");
				}
				$step = 3;
				$winPb->lblPbCurr2->Text('');
				$winPb->lblCount2->Text('');
				$winPb->pbWinPb2->SetPos(0);
				$winPb->pbWinPb1->StepIt();
				$winPb->lblCount1->Text("2/3");
			}
    }
	}
	my $htmlChatPage;
	if ($step == 3) {
		# Total number of messages
		my $nbrMessages;
		foreach my $msg (keys %{$refMessages}) { $nbrMessages += keys %{$$refMessages{$msg}}; }
		if ($nbrMessages) {
			$winPb->lblPbCurr1->Text($STR{'saveChat'}.'...');
			$htmlChatPage = "$baseDir\\$chatName.html";
			if (!$interlocutor) { $interlocutor = $chatName; }
			&createDumpChatReport($htmlChatPage, $normalMode, $chatName, $interlocutor, $interlocutorURL, $refMessages, $nbrMessages);
		}
		$winPb->pbWinPb1->StepIt();
		$winPb->lblCount1->Text("3/3");
	}
	# Turn off progress bar
	$winPb->lblPbCurr1->Text('');
	$winPb->lblCount1->Text('');
	$winPb->lblPbCurr2->Text('');
	$winPb->lblCount2->Text('');
	$winPb->pbWinPb1->SetPos(0);
	$winPb->pbWinPb2->SetPos(0);
	&winPb_Terminate;
  # Delete temporary files
  if ($winConfig->chDelTempFiles->Checked()) { remove_tree($tmpDir); }
	# Finish
	if ($htmlChatPage) { $win->ShellExecute('open', $htmlChatPage,'','',1); } # Open the page
	else 							 { Win32::GUI::MessageBox($win, "$STR{'noMsgDumped'}.", $STR{'winChat'}, 0x40040); } # No messages were dumped
	# Final message
  $win->Tray->Change(-tip => $STR{'dumpChatF'});
  if (!$win->IsVisible()) {
    $win->Tray->Change( -balloon_icon  => 'info'            ,
                        -balloon_title => 'ExtractFace'     ,
                        -balloon_tip   => $STR{'dumpChatF'} , );
    $win->Tray->ShowBalloon(1);
  }
  $win->ChangeCursor($ARROW);

}  #--- End dumpChat

#--------------------------#
sub parseMessage
#--------------------------#
{
  # Local variables
  my ($msgCode, $normalMode, $baseDir, $tmpDir, $chatName, $refMech) = @_;
	my $message;
	# Last message, remove junk
	$msgCode = (split(/class="_4u-f"/, $msgCode))[0] if $msgCode =~ /class="_4u-f"/;
	# Text
	if ($msgCode =~ /(<span[^\>]+_58nk[^\>]+>)(.+?)<\/span>/) {
		$message .= $2 . '<br>';
		$message =~ s/<!--(.+?)-->//g; # Remove comment
		my $junk .= $1;
		$msgCode = &truncateText($msgCode, length($1)+length($2), $1);
		# Emoticons
		if ($message =~ /img[^\>]+src="[^\"]+"/) {
			while ($message =~ /(<img[^\>]+class="[^\"]+"[^\>]+src="[^\"]+"[^\>]*>)/ or
						 $message =~ /(<img[^\>]+src="[^\"]+"[^\>]+class="[^\"]+"[^\>]*>)/) {
				my $emoticonTag = $1; # encode('utf8', $1); 
				if ($emoticonTag =~ /src="([^\"]+)"/) {
					my $emotionSRC = encode('utf8', $1);
					my $emoticonFn;
					if (!-d "$baseDir\\images_$chatName") { mkdir("$baseDir\\images_$chatName"); }
					if    ($emotionSRC =~ /\/([^\/\?]+)\?/) { $emoticonFn = $1;          }
					elsif ($emotionSRC =~ /\.png$/)         { $emoticonFn = $emotionSRC; }
					if ($normalMode and -e "$tmpDir\\$emoticonFn" and !-e "$baseDir\\images_$chatName\\$emoticonFn") {
						rcopy("$tmpDir\\$emoticonFn", "$baseDir\\images_$chatName\\$emoticonFn");
					} elsif ($normalMode and !-e "$baseDir\\images_$chatName\\$emoticonFn" and
									 !-e "$baseDir\\images_$chatName\\$emoticonFn" and $emotionSRC) {
						$$refMech->save_url($emotionSRC, "$baseDir\\images_$chatName\\$emoticonFn");
					} else { $emoticonFn = $emotionSRC; }
					# Create a new emoticon tag
					if ($emoticonFn !~ /^http/) { $emoticonFn = "images_$chatName\\$emoticonFn"; }
					my $newEmoticonTag = "<img src=\"$emoticonFn\"";
					if ($emoticonTag =~ /( alt="[^\"]+")/) { $newEmoticonTag .= $1; }
					$newEmoticonTag .= ">";
					# Replace in $message
					$message =~ s/$emoticonTag/$newEmoticonTag/e;
				}
			}
		}
	}
	# Notification
	if ($msgCode =~ /(<span[^\>]+_50f7[^\>]+>)([^\<]+)/) {
		$message .= "<div style=\"margins: 5px; border: 1px solid black; border-radius: 5px; padding: 5px; color: #CC0000;\">";
		$message .= "$2</span><br>";
		$message =~ s/<!--(.+?)-->//g; # Remove comment
		my $junk .= $1;
		$msgCode = &truncateText($msgCode, length($1)+length($2), $1);
	}
	# Warning (ex.: Object deleted, violation of rules)
	if ($msgCode =~ /(<div[^\>]+_1o13[^\>]+>)([^\<]*)/) {
		my $text = $2;
		if (!$text) { $text = "Object was removed."; }
		$message .= "<div style=\"margins: 5px; border: 1px solid red; border-radius: 5px; padding: 5px; color: red;\">";
		$message .= "$text</div><br>";
		$message =~ s/<!--(.+?)-->//g; # Remove comment
		my $junk .= $1;
		$msgCode = &truncateText($msgCode, length($1)+length($2), $1);
	}
	# Warning (ex.: Message removed, Account requires verification)
	if ($msgCode =~ /(<em[^\>]+_4qba[^\>]+>)(.+?)<\/em>/) {
		my $extract1 = $1;
		my $extract2 = $2;
		if ($extract2 =~ /temporarily removed/) {
			$message .= "<div style=\"margins: 5px; border: 1px solid red; border-radius: 5px; padding: 5px; color: red;\">";
			$message .= "$extract2</div><br>";
			$message =~ s/<!--(.+?)-->//g; # Remove comment
			my $junk .= $1;
			$msgCode = &truncateText($msgCode, length($1)+length($2), $extract1);
		}
	}
	# Shared link
	if ($msgCode =~ /(<a[^\>]+_5rw4[^\>]+)>(.+?)<\/a>/) {
		my $extract1 = $1;
		my $extract2 = $2;
		if ($extract1 =~ / href="([^\"]+)"/) {
			my $sharedLinkUrl = $1;
			if ($sharedLinkUrl !~ /^http/) { $sharedLinkUrl = "https://www.facebook.com$sharedLinkUrl"; }
			my $sharedLinkTitle;
			my $sharedLinkTxt;
			if ($extract2 =~ /<div[^\>]+_4ik6[^\>]+>([^\<]+)/) {
				$sharedLinkTitle = encode('utf8', $1);
				$sharedLinkTxt  .= "$STR{'sharedLink'}: <a href=\"$sharedLinkUrl\" target=\"_blank\">$sharedLinkTitle</a><br><br>";
				$extract2           = &truncateText($extract2, length($sharedLinkTitle), $sharedLinkTitle);
				if ($extract2 =~ /<div[^\>]+_4ik6[^\>]+>([^\<]+)/) { $sharedLinkTxt .= $1; }
			} else { $sharedLinkTxt = $sharedLinkUrl; }
			# Map
			my $mapImgTag;
			if ($msgCode =~ /<div[^\>]+_3xn1[^\>]+style="background-image: ?url\(&quot;(.+?)&quot;\);/) {
				my $mapURL = $1;
				$mapURL    =~ s/&amp;/&/g;
				# Download the image ?
				if ($normalMode) {
					my $mapFn = $sharedLinkTitle . '.jpg';
					$mapFn =~ s/[\<\>\:\"\/\\\|\?\*]/_/g;
					if (!-d "$baseDir\\images_$chatName") { mkdir("$baseDir\\images_$chatName"); }
					$$refMech->save_url($mapURL, "$baseDir\\images_$chatName\\$mapFn");
					$mapImgTag .= "<img src=\"images_$chatName\\$mapFn\" alt=\"\"><br>";
				} else { $mapImgTag .= "<img src=\"$mapURL\" alt=\"\"><br>"; }
			}
			if ($sharedLinkUrl and $sharedLinkTxt) {
				$message .= "<div style=\"margins: 5px; border: 1px solid grey; border-radius: 5px; padding: 5px;\">";
				if ($mapImgTag) { $message .= $mapImgTag; }
				$message .= "$sharedLinkTxt</div><br>";
			}
		}
	}
	# Invite for Messenger
	if ($msgCode =~ /<div[^\>]+_3thf[^\>]+>(.+)<\/div>/) {
		my $extract = $1;
		if ($extract =~ /src="([^\"]+)"/) {
			my $imgSRC = encode('utf8', $1);
			if ($extract =~ /<div[^\>]+_1hm6[^\>]+>(.+?)<\/div>/) {
				my $text = $1;
				my $imgName;
				if    ($imgSRC =~ /\/([^\/\?]+)\?/) { $imgName = $1;      }
				elsif ($imgSRC =~ /\.png$/)         { $imgName = $imgSRC; }
				# Download the image ?
				if (!-d "$baseDir\\images_$chatName") { mkdir("$baseDir\\images_$chatName"); }
				if ($normalMode and -e "$tmpDir\\$imgName" and !-e "$baseDir\\images_$chatName\\$imgName") {
					rcopy("$tmpDir\\$imgName", "$baseDir\\images_$chatName\\$imgName");
				} elsif ($normalMode and !-e "$baseDir\\images_$chatName\\$imgName" and
								 !-e "$baseDir\\images_$chatName\\$imgName" and $imgSRC) {
					if ($imgSRC !~ /^http/) { $imgSRC = "https://www.facebook.com$imgSRC"; }
					$$refMech->save_url($imgSRC, "$baseDir\\images_$chatName\\$imgName");
				} else { $imgName = $imgSRC; }
				# Create a new emoticon tag
				if ($imgName !~ /^http/) { $imgName = "images_$chatName\\$imgName"; }
				$message .= "<div style=\"margins: 5px; border: 1px solid grey; border-radius: 5px; padding: 5px;\">";
				$message .= "<img src=\"$imgName\" alt=\"\"><br>$text</div><br>";
			}
		}
	}
	# Sticker
	if ($msgCode =~ /(<div[^\>]+_ui9[^\>]+)>(.+?)<\/div>/) {
		my $extract1 = $1;
		my $extract2 = $2;
		if ($extract1 =~ /data-testid="sticker"/ and ($extract1 =~ /style="background-image: ?url\((?:&quot;)?(\/stickers\/asset\/\?sticker_id[^\&]+)/ or
																								  $extract1 =~ /style="background-image: ?url\(&quot;([^\&]+)&quot;\); background-size/)) {
			my $imgURL = $1;
			if ($imgURL !~ /^http/) { $imgURL = "https://www.facebook.com$imgURL"; }
			# Sticker use redirection
			if (($imgURL =~ /sticker_id=/)) {
				my $mechSticker = WWW::Mechanize::Firefox->new(autodie => 0);
				$mechSticker->get($imgURL, synchronize => 0);
				sleep($CONFIG{'TIME_TO_WAIT'});
				$imgURL = $mechSticker->uri;
			}
			# Download the image ?
			if ($normalMode and $imgURL =~ /\/([^\/\?]+)(?:\?|$)/) {
				my $imgName = encode('utf8', $1);
				if (!-d "$baseDir\\images_$chatName") { mkdir("$baseDir\\images_$chatName"); }
				$$refMech->save_url($imgURL, "$baseDir\\images_$chatName\\$imgName");
				$message .= "<img src=\"images_$chatName\\$imgName\" alt=\"\"><br>";
			} else { $message .= "<img src=\"$imgURL\" alt=\"\"><br>"; }
		}
		# Thumbs up (this one cannot be displayed if not dowloaded)
		elsif ($extract2 =~ /<svg/ and $extract2 =~ /Thumbs Up Sign/) {
			my $imgURL = 'https://www.facebook.com/rsrc.php/ya/r/FwHVs2eE5cr.svg';
			# Download the image
			if (!-d "$baseDir\\images_$chatName") { mkdir("$baseDir\\images_$chatName"); }
			$$refMech->save_url($imgURL, "$baseDir\\images_$chatName\\FwHVs2eE5cr.svg");
			$message .= "<img src=\"images_$chatName\\FwHVs2eE5cr.svg\" alt=\"\" style=\"width:35px;height:35px;\">";
		}
		# Emoji
		if ($extract2 =~ /<img[^\>]+_1ifu[^\>]+/ and $extract2 =~ /<div tabindex="0">(.+)/) {
			$message .= $1;
			while ($message =~ /(<img[^\>]+class="[^\"]+"[^\>]+src="[^\"]+"[^\>]*>)/ or
						 $message =~ /(<img[^\>]+src="[^\"]+"[^\>]+class="[^\"]+"[^\>]*>)/) {
				my $emojiTag = encode('utf8', $1);
				if ($emojiTag =~ /src="([^\"]+)"/) {
					my $emojiSRC = $1;
					my $emojiFn;
					my $emojiAlt = undef;
					if ($emojiTag =~ /alt=\"([^\"]+)\"/) { $emojiAlt = $1; }
					if (!-d "$baseDir\\images_$chatName") { mkdir("$baseDir\\images_$chatName"); }
					if    ($emojiSRC =~ /\/([^\/\?]+)\?/) { $emojiFn = $1;        }
					elsif ($emojiSRC =~ /\.png$/)         { $emojiFn = $emojiSRC; }
					if ($normalMode and -e "$tmpDir\\$emojiFn" and !-e "$baseDir\\images_$chatName\\$emojiFn") {
						rcopy("$tmpDir\\$emojiFn", "$baseDir\\images_$chatName\\$emojiFn");
					} elsif ($normalMode and !-e "$baseDir\\images_$chatName\\$emojiFn" and
									 !-e "$baseDir\\images_$chatName\\$emojiFn" and $emojiSRC) {
						$$refMech->save_url($emojiSRC, "$baseDir\\images_$chatName\\$emojiFn");
					} else { $emojiFn = $emojiSRC; }
					# Create a new emoticon tag
					if ($emojiFn !~ /^http/) { $emojiFn = "images_$chatName\\$emojiFn"; }
					my $newEmojiTag = "<img src=\"$emojiFn\" alt=\"$emojiAlt\">";
					# Replace in $message
					$emojiTag = quotemeta($emojiTag);
					$message =~ s/$emojiTag/$newEmojiTag/e;
				}
			}
		}
	}
	# Picture
	if ($msgCode =~ /(<div[^\>]+_4tsk[^\>]+>)(.+?)<\/div>/) {
		my $extract1 = $1;
		my $extract2 = $2;
		# Multiples pictures
		if ($extract1 =~ /background-image: url/ and $extract2 =~ /class="_4tsl"/) {
			while ($msgCode =~ /(<div[^\>]+_4tsk[^\>]+>)(.+?)<\/div>/) {
				my $extract3 = $1;
				my $extract4 = $2;
				if ($extract3 =~ /style="background-image: ?url\(&quot;(.+?)&quot;\);/) {
					my $picSRC = encode('utf8', $1);
					$picSRC =~ s/&amp;/&/g;
					my $picFn;
					if    ($picSRC =~ /\/([^\/\?]+)\?/		) { $picFn = $1;      }
					elsif ($picSRC =~ /\.(?:jpg|png|gif)$/) { $picFn = $picSRC; }
					# Full size
					my $picURL;
					if ($winChat->chDownloadImg->Checked() and $extract4 =~ /href="([^\"]+)"/) {
						$picURL = encode('utf8', $1);
						$picURL =~ s/&amp;/&/g;
						if ($picURL =~ /\?u=([^\&]+)&/) { $picURL = unescape($1); }
						$$refMech->save_url($picURL, "$baseDir\\images_$chatName\\$picFn");
					}
					# Normal size
					if (!-d "$baseDir\\images_$chatName") { mkdir("$baseDir\\images_$chatName"); }
					if ($normalMode and -e "$tmpDir\\$picFn" and !-e "$baseDir\\images_$chatName\\$picFn") {
						rcopy("$tmpDir\\$picFn", "$baseDir\\images_$chatName\\$picFn");
					} elsif ($normalMode and !-e "$baseDir\\images_$chatName\\$picFn" and
									 !-e "$baseDir\\images_$chatName\\$picFn" and $picSRC) {
						$$refMech->save_url($picSRC, "$baseDir\\images_$chatName\\$picFn");
					} else { $picFn = $picSRC; }
					if ($picFn !~ /^http/) { $picFn = "images_$chatName\\$picFn"; }
					my $newImgTag = "<img src=\"$picFn\" alt=\"\">";
					$message .= $newImgTag;
				}
				$msgCode = &truncateText($msgCode, length($extract3)+length($extract2), $extract3);
			}
		}
		# Single picture
		if ($extract2 =~ /(<img[^\>]+(?:_5pf5|_mxz)[^\>]+>.+?<\/a>)/) {
			$message .= $1;
			if ($message =~ /src="([^\"]+)"/) {
				my $picSRC = encode('utf8', $1);
				if ($picSRC =~ /\?u=([^\&]+)&/) { $picSRC = unescape($1); }
				my $picFn;
				if    ($picSRC =~ /\/([^\/\?]+)\?/		) { $picFn = $1;      }
				elsif ($picSRC =~ /\.(?:jpg|png|gif)$/) { $picFn = $picSRC; }
				# Full size
				my $picURL;
				if ($winChat->chDownloadImg->Checked() and $message =~ /href="([^\"]+)"/) {
					$picURL = encode('utf8', $1);
					$picURL =~ s/&amp;/&/g;
					if ($picURL =~ /\?u=([^\&]+)&/) { $picURL = unescape($1); }
					$$refMech->save_url($picURL, "$baseDir\\images_$chatName\\$picFn");
				}
				# Normal size
				if (!-d "$baseDir\\images_$chatName") { mkdir("$baseDir\\images_$chatName"); }
				if ($normalMode and -e "$tmpDir\\$picFn" and !-e "$baseDir\\images_$chatName\\$picFn") {
					rcopy("$tmpDir\\$picFn", "$baseDir\\images_$chatName\\$picFn");
				} elsif ($normalMode and !-e "$baseDir\\images_$chatName\\$picFn" and
								 !-e "$baseDir\\images_$chatName\\$picFn" and $picSRC) {
					$$refMech->save_url($picSRC, "$baseDir\\images_$chatName\\$picFn");
				} else { $picFn = $picSRC; }
				# Replace in $message
				if ($picFn !~ /^http/) { $picFn = "images_$chatName\\$picFn"; }
				$message =~ s/src=\"$picSRC\"/src=\"$picFn\"/;
				$message =~ s/ class="[^\"]+"//g;
				$message =~ s/ style="[^\"]+"//g;
				$message =~ s/<\/a>/<\/a><br>/g;
			}
		}
	}
	# Attached document
	if ($msgCode =~ /<a[^\>]+_2uf4.+?<\/a>/) {
		while ($msgCode =~ /(<a[^\>]+_2uf4.+?)<\/a>/) {
			my $extract = encode('utf8', $1);
			my $attachedURL;
			my $attachedName;
			if    ($extract =~ /href="([^\"]+)"/) { $attachedURL  = $1; $attachedURL =~ s/&amp;/&/g; }
			if    ($extract =~ /-->([^\<]+)<!--/) { $attachedName = $1; }
			elsif ($extract =~ />([^\<]+)$/     ) { $attachedName = $1; }
			# Download attached document
			if ($winChat->chDownloadAD->Checked() and $attachedURL and $attachedName) {
				if (!-d "$baseDir\\docs_$chatName") { mkdir("$baseDir\\docs_$chatName"); }
				my $localPJFile = "$baseDir\\docs_$chatName\\$attachedName";
				if ($attachedURL =~ /u=([^\&]+)\&/) {
					my $directURL = unescape($1);
					$$refMech->save_url($directURL, $localPJFile);
					$message .= "<span style=\"color: #8B2323;\">$STR{'attached'}: <a href=\"docs_$chatName\\$attachedName\" target=\"_blank\">$attachedName</a></span><br>";
				} else {
					$message .= "<span style=\"color: #8B2323;\">$STR{'attached'}: <a href=\"$attachedURL\" target=\"_blank\">Download $attachedName</a></span><br>";
				}
			# Gather the link only
			} else {
				$message .= "<span style=\"color: #8B2323;\">$STR{'attached'}: <a href=\"$attachedURL\" target=\"_blank\">Download $attachedName</a></span><br>";
			}
			$msgCode = &truncateText($msgCode, length($extract), $extract);
		}
	}
	# Video
	if ($msgCode =~ /(<video[^\>]+_ox1.+?)<\/video>/) {
		my $extract = encode('utf8', $1);
		if ($extract =~ /src="([^\"]+)"/) {
			my $videoImgUrl = $1; # Image filename
			# Create result code
			if (!-d "$baseDir\\videos_$chatName") { mkdir("$baseDir\\videos_$chatName"); }
			# Link
			if ($videoImgUrl =~ /^https/) {
				$message .= "<video width=\"320\" height=\"240\" controls><source src=\"$videoImgUrl\" type=\"video/mp4\">Your browser does not support the video tag.</video><br>";
			} elsif (-e "$tmpDir\\$videoImgUrl" and !-e "$baseDir\\videos_$chatName\\$videoImgUrl") {
				rcopy("$tmpDir\\$videoImgUrl", "$baseDir\\videos_$chatName\\$videoImgUrl");
				$message .= "<video width=\"320\" height=\"240\" controls><source src=\"videos_$chatName\\$videoImgUrl\" type=\"video/mp4\">Your browser does not support the video tag.</video><br>";
			} elsif (-e "$baseDir\\videos_$chatName\\$videoImgUrl") {
				$message .= "<video width=\"320\" height=\"240\" controls><source src=\"videos_$chatName\\$videoImgUrl\" type=\"video/mp4\">Your browser does not support the video tag.</video><br>";
			}
		}
	}
	# Vocal message
	if ($msgCode =~ /(<a[^\>]+_2e-1.+?)<\/a>/) {
		my $extract = $1;
		if ($extract =~ /<span[^\>]+_2e-4[^\>]+>([^\<]+)/) {
			my $duree = $1;
			$message .= "<span style=\"color: #CC0000;\">$STR{'vocalMsgLast'}: $duree</span><br>";
		}
	}
	
  return($message);

}  #--- End parseMessage

#--------------------------#
sub truncateText
#--------------------------#
{
  # Local variables
  my ($text, $long, $toIndex) = @_;
  my $lineWidth = length($text);
  my $pos       = index($text, $toIndex);
  my $offset    = $pos+$long;
  $text         = substr($text,$offset,$lineWidth-$offset);
  return($text);

}  #--- End truncateText

#--------------------------#
sub createDumpChatReport
#--------------------------#
{
  # Local variables
	my ($htmlChatPage, $normalMode, $chatName, $interlocutor, $interlocutorURL, $refMessages, $nbrMessages) = @_;
  my $count = 0;
	# Progress bar
	$winPb->pbWinPb2->SetRange(0, $nbrMessages);
	$winPb->pbWinPb2->SetPos(0);
	$winPb->pbWinPb2->SetStep(1);
	$winPb->lblCount2->Text("0/$nbrMessages");
  # Save the chat in a HTML file
	open(HTML, ">:encoding(UTF-8)", $htmlChatPage);
	print HTML "<!DOCTYPE html>\n";
	print HTML "<html>\n<head>\n<title>$interlocutor</title>\n";
	print HTML "<meta charset=\"UTF-8\">\n";
	print HTML "<style>\n";
	print HTML "table, th, td {\n";
  print HTML "  border: 1px solid black;\n";
  print HTML "  border-collapse: collapse;\n";
	print HTML "}\n";
	print HTML "th, td {\n";
  print HTML "  padding: 5px;\n";
	print HTML "}\n";
	print HTML "</style>\n";
	print HTML "</head>\n";
	print HTML "<body>\n";
	print HTML "<h1 style=\"color:#003300;font-size: 18pt;font-variant: small-caps;font-weight: bold;\;text-align: center;\">";
	print HTML "$interlocutor</h1>\n";
	print HTML "<h2 style=\"color:#003300;font-size: 16pt;\;text-align: center;\">";
	print HTML "<a href=\"$interlocutorURL\" target=\"_blank\">$interlocutorURL<\/a></h2>\n";
	print HTML "<table style=\"margin: auto;\">\n";
	print HTML "<tr>\n";
	print HTML "<td style=\"font-weight: bold;text-align: center;\">$STR{'image'}</td>\n";
	print HTML "<td style=\"font-weight: bold;text-align: center;\">$STR{'name'}</td>\n";
	print HTML "<td style=\"font-weight: bold;text-align: center;\">$STR{'date'}</td>\n";
	print HTML "<td style=\"font-weight: bold;text-align: center;\">$STR{'time'}</td>\n";
	print HTML "<td style=\"font-weight: bold;text-align: center;\">$STR{'message'}</td>\n";
	print HTML "</tr>\n";
	foreach my $msg (sort { $a <=> $b } keys %{$refMessages}) {
		foreach my $partMsg (sort { $a <=> $b } keys %{$$refMessages{$msg}}) {
			print HTML "<tr>\n";
			my $isMe = 1 if $$refMessages{$msg}{$partMsg}{senderName} eq $STR{'Me'};
			# Image
			my $imgTag;
			if (!$isMe) {
				print HTML "<td style=\"background-color:#E0E0E0;text-align: center;vertical-align: center;\">";
				my $imgPath;
				if ($normalMode)		 { $imgPath = "images_$chatName\\$$refMessages{$msg}{$partMsg}{senderImg}"; 		   }
				else 			 					 { $imgPath = "$$refMessages{$msg}{$partMsg}{senderImg}";                   	     }
				if ($imgPath ne '-') { $imgTag  = "<img src=\"$imgPath\" alt=\"\" style=\"width:32px;height:32px;\">"; }
				else                 { $imgTag  = '-'; };
			}
			else { print HTML "<td>"; }
			if ($$refMessages{$msg}{$partMsg}{senderImg}) { print HTML "$imgTag</td>\n"; }
			else { print HTML "</td>\n"; }
			# Name
			if (!$isMe) { print HTML "<td style=\"background-color:#E0E0E0\">"; }
			else				{ print HTML "<td>"; }
			if ($$refMessages{$msg}{$partMsg}{senderName}) { print HTML "$$refMessages{$msg}{$partMsg}{senderName}</td>\n"; }
			else { print HTML "</td>\n"; }
			# Date
			if (!$isMe) { print HTML "<td style=\"background-color:#E0E0E0\">"; }
			else				{ print HTML "<td>"; }
			if ($$refMessages{$msg}{$partMsg}{date}) {
				my $dateStr = &formatDate($$refMessages{$msg}{$partMsg}{date});
				my $date = (split(/ /, $dateStr))[0];
				print HTML "$date</td>\n";
			} else { print HTML "</td>\n"; }
			# Time
			if (!$isMe) { print HTML "<td style=\"background-color:#E0E0E0\">"; }
			else				{ print HTML "<td>"; }
			if ($$refMessages{$msg}{$partMsg}{time}) {
				my $senderName = $$refMessages{$msg}{$partMsg}{senderName};
				if ($senderName and $$refMessages{$msg}{$partMsg}{time} =~ /$senderName /) { $$refMessages{$msg}{$partMsg}{time} =~ s/$senderName //; }
				if ($$refMessages{$msg}{$partMsg}{time} =~ /(\w+ \d{1,2}, \d{4} \d{1,2}:\d{2} [ap]m)/) {
					my $strp = DateTime::Format::Strptime->new(pattern => '%B %e, %Y %l:%M %p');
					my $dt   = $strp->parse_datetime($1);
					$$refMessages{$msg}{$partMsg}{time} = $dt->hms;
				}
				print HTML "$$refMessages{$msg}{$partMsg}{time}</td>\n";
			} else { print HTML "</td>\n"; }
			# Messages
			if (!$isMe) { print HTML "<td style=\"background-color:#E0E0E0\">"; }
			else				{ print HTML "<td>"; }
			if ($$refMessages{$msg}{$partMsg}{messages})  { print HTML "$$refMessages{$msg}{$partMsg}{messages}</td>\n"; }
			else { print HTML "</td>\n"; }
			print HTML "</tr>\n";
			$count++;
			$winPb->lblCount2->Text("$count/$nbrMessages");
			$winPb->pbWinPb2->StepIt();
		}
	}
	print HTML "</table>\n</body>\n</html>\n";
	close(HTML);

}  #--- End createDumpChatReport

#--------------------------#
sub winChat_Terminate
#--------------------------#
{
  # Remember position
  if ($winConfig->chRememberPos->Checked()) {
    my $winLeft = $winChat->AbsLeft();
    my $winTop  = $winChat->AbsTop();
    $CONFIG{'WINCHAT_LEFT'} = $winLeft;
    $CONFIG{'WINCHAT_TOP'}  = $winTop;
    &saveConfig(\%CONFIG);
  }
  return(-1);

}  #--- Fin winChat_Terminate

#--------------------------#
sub winVocalMsg
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    $winVocalMsg->tfVocalMsgName->Text('');
    # Start the thread
    $THR = threads->create(\&winVocalMsgThr);
    usleep(500000);
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINVM_LEFT'} and $CONFIG{'WINVM_TOP'}) {
      $winVocalMsg->Left($CONFIG{'WINVM_LEFT'});
      $winVocalMsg->Top($CONFIG{'WINVM_TOP'});
    } else { $winVocalMsg->Center(); }
    $winVocalMsg->DoModal();
  }

}  #--- End winVocalMsg

#--------------------------#
sub btnVocalMsgRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    $winVocalMsg->tfVocalMsgName->Text('');
    $THR = threads->create(\&winVocalMsgThr);
  }
  
}  #--- End btnVocalMsgRefresh_Click

#--------------------------#
sub winVocalMsgThr
#--------------------------#
{
  # Local variables
  my $saveDir = $winVocalMsg->tfDirSaveVocalMsg->Text();
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($msgErr =~ /NS_ERROR_FILE_IS_LOCKED/) {
      # Restart a new thread to continue
      $THR = threads->create(\&winVocalMsgThr);
    } else {
      if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
			my $err = (split(/ at /, $msgErr))[0];
      Win32::GUI::MessageBox($winVocalMsg, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
    }
  };
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      $winVocalMsg->btnVocalMsgOk->Disable();
      Win32::GUI::MessageBox($winVocalMsg, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  if ($mech->uri() =~ /m.facebook.com/) {
		if (my $interlocutor = $mech->selector('span._52jh', any => 1)) {
			my $encodedName = encode($CONFIG{'CHARSET'}, $interlocutor->{innerHTML});
			$winVocalMsg->tfVocalMsgName->Text($encodedName);
		}
  } else { Win32::GUI::MessageBox($winVocalMsg, $STR{'warn5'}, $STR{'err1T'}, 0x40010); }
  $winVocalMsg->ChangeCursor($ARROW);
  &isDumpVocalMsgReady();

}  #--- End winVocalMsgThr

#--------------------------#
sub tfVocalMsgName_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winVocalMsg->tfDirSaveVocalMsg->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winVocalMsg->chSaveVocalMsgDir->Checked()) {
    $CONFIG{'DIR_SAVE_VM'} = $saveDir;
    &saveConfig(\%CONFIG);
  }
  &isDumpVocalMsgReady();

}  #--- End tfVocalMsgName_Change

#--------------------------#
sub tfDirSaveVocalMsg_Change
#--------------------------#
{
  # Local variables
  my $VocalMsgName = $winVocalMsg->tfVocalMsgName->Text();
  my $saveDir      = $winVocalMsg->tfDirSaveVocalMsg->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winVocalMsg->chSaveVocalMsgDir->Checked()) {
    $CONFIG{'DIR_SAVE_VM'} = $saveDir;
    &saveConfig(\%CONFIG);
  }
  &isDumpVocalMsgReady();

}  #--- End tfDirSaveVocalMsg_Change

#--------------------------#
sub btnDirSaveVocalMsg_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winVocalMsg->tfDirSaveVocalMsg->Text();
  my $dir;
  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) {
      while ($lastDir =~ /[^\\]$/) { chop($lastDir); }
    }
    $dir = Win32::GUI::BrowseForFolder( -owner      => $winVocalMsg	,
                                        -title      => $STR{'selDir'} 	,
                                        -folderonly => 1              	,
                                        -directory  => $lastDir       	,
                                        -newui      => 1              	, );
  } else {
    $dir = Win32::GUI::BrowseForFolder( -owner      => $winVocalMsg	,
                                        -title      => $STR{'selDir'} 	,
                                        -folderonly => 1              	,
                                        -newui      => 1              	, );
  }
  # Selected folder
  if ($dir and -d $dir) {
    if ($dir =~ /\\$/) { chop($dir); }
    $winVocalMsg->tfDirSaveVocalMsg->Text($dir);
  }
  
}  #--- End btnDirSaveVocalMsg_Click

#--------------------------#
sub btnBrowseDirSaveVocalMsg_Click
#--------------------------#
{
	&exploreDir($winVocalMsg->tfDirSaveVocalMsg->Text());
	
}  #--- End btnBrowseDirSaveVocalMsg_Click

#--------------------------#
sub chSaveVocalMsgDir_Click
#--------------------------#
{
  # Local variables
  my $dir = $winVocalMsg->tfDirSaveVocalMsg->Text();
  # If directory exists, save it
  if ($dir and -d $dir and $winVocalMsg->chSaveVocalMsgDir->Checked()) {
    $CONFIG{'REMEMBER_SAVE_VM'} = 1;
    $CONFIG{'DIR_SAVE_VM'} = $dir;
    &saveConfig(\%CONFIG);
  # Don't save
  } elsif (!$winVocalMsg->chSaveVocalMsgDir->Checked()) {
    $CONFIG{'REMEMBER_SAVE_VM'} = 0;
    delete($CONFIG{'DIR_SAVE_VM'});
    &saveConfig(\%CONFIG);
  }

}  #--- End chSaveVocalMsgDir_Click

#--------------------------#
sub chVocalMsgOpenOutput_Click
#--------------------------#
{
  # Save the choice
  if ($winVocalMsg->chVocalMsgOpenOutput->Checked()) {
    $CONFIG{'VM_OPEN_OUTPUT'} = 1;
    &saveConfig(\%CONFIG);
  # Don't save
  } else {
    $CONFIG{'VM_OPEN_OUTPUT'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chVocalMsgOpenOutput_Click

#--------------------------#
sub isDumpVocalMsgReady
#--------------------------#
{
  # Local variables
  my $vocalMsgName = $winVocalMsg->tfVocalMsgName->Text();
  my $saveDir      = $winVocalMsg->tfDirSaveVocalMsg->Text();
  # Valid directory and valid name for save ?
  if (!$saveDir or !(-d $saveDir) or !$vocalMsgName) {
    $winVocalMsg->btnVocalMsgOk->Disable();
    return(0);
  }
  $winVocalMsg->btnVocalMsgOk->Enable();

}  #--- End isDumpVocalMsgReady

#--------------------------#
sub btnVocalMsgOk_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Remember position
    if ($winConfig->chRememberPos->Checked()) {
      my $winLeft = $winVocalMsg->AbsLeft();
      my $winTop  = $winVocalMsg->AbsTop();
      $CONFIG{'WINVM_LEFT'} = $winLeft;
      $CONFIG{'WINVM_TOP'}  = $winTop;
      &saveConfig(\%CONFIG);
    }
    # Local variables
    my $vocalMsgName  	= $winVocalMsg->tfVocalMsgName->Text();
    $vocalMsgName     	=~ s/[\<\>\:\"\/\\\|\?\*]/-/g;
    my $saveDir         = $winVocalMsg->tfDirSaveVocalMsg->Text();
    my %listVocalMsg;
    my $nbrVM		        = 0;
    my $posPb1          = 0;
    my $step            = 0;
    my $nbrVMDone				= 0;
    my $nbrRetries			= 0;
    if ($vocalMsgName and -d $saveDir) {
      # Start the thread
      $THR = threads->create(\&dumpVocalMsg, $vocalMsgName, $saveDir, \%listVocalMsg, $nbrVM, 
                             $nbrVMDone, $posPb1, $step, $nbrRetries);
      return(-1);
    } else { Win32::GUI::MessageBox($win, $STR{'err5'}, $STR{'err1T'}, 0x40010); }
  }

}  #--- End btnVocalMsgOk_Click

#--------------------------#
sub dumpVocalMsg
#--------------------------#
{
  # Local variables
  my ($vocalMsgName, $saveDir, $refListVocalMsg, $nbrVM, $nbrVMDone, $posPb1, $step, $nbrRetries) = @_;
  my $firstExec    = 0;
  # Cancel button
  $SIG{'KILL'} = sub {
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'dumpVocalMsgC'});
    # Turn off progress bar
    $winPb->lblPbCurr1->Text('');
    $winPb->lblCount1->Text('');
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    $winPb->pbWinPb1->SetPos(0);
    $winPb->pbWinPb2->SetPos(0);
    &winPb_Terminate;
    threads->exit();
  };
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($winConfig->chDebugLogging->Checked()) { &debug($msgErr); }
    $win->ChangeCursor($ARROW);
    $posPb1 = $winPb->pbWinPb1->GetPos();
    # Retry 10 times
    if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) {
      $nbrRetries++;
      # Progress window
      $winPb->pbWinPb2->SetPos(0);
      $winPb->lblPbCurr2->Text('');
      $winPb->lblCount2->Text('');
    }
    if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
      # Restart a new thread to continue
      if ($msgErr !~ /NS_ERROR_FILE_IS_LOCKED/) { $winPb->lblPbCurr1->Text($STR{'crash'}.'...'); }
      sleep(2);
      $THR = threads->create(\&dumpVocalMsg, $vocalMsgName, $saveDir, $refListVocalMsg, $nbrVM, 
                             $nbrVMDone, $posPb1, $step, $nbrRetries);
    } else {
			my $err = (split(/ at /, $msgErr))[0];
      Win32::GUI::MessageBox($winPb, "$STR{'err3'}: $err", $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    }
    # Kill this thread
    threads->exit();
  };
  # First execution
  if (!$step) {
		# Turn on progress bar
		$winPb->Center($winChat);
		$winPb->Show();
		$win->Disable();
		$winPb->lblPbCurr1->Text($STR{'dumpVocalMsgP'}.'...');
		$winPb->pbWinPb1->SetRange(0, 3);
		$winPb->pbWinPb1->SetPos(0);
		$winPb->pbWinPb1->SetStep(1);
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'dumpVocalMsgP'}.'...');
		$step = 1;
  }
	# Connect to current tab in Firefox
	my $mech = WWW::Mechanize::Firefox->new(tab => 'current', autodie => 0);
	# Browse all the conversation and parse the pages to list vocal messages
	if ($step == 1) {
		$winPb->lblPbCurr1->Text($STR{'browseAllChat'}.'...');
		# Parse current page
		my @msgs = $mech->selector('div.messageAttachments a');
		foreach my $msg (@msgs) {
			if ($msg->{href} =~ /(audioclip[^\.]+\.mp4)/) {
				my $name = $1;
				if ($msg->{href} =~ /u=([^\&]+)\&/) {
					$$refListVocalMsg{$name}{url} = unescape($1);
				}
			}
		}
		# Browse all other message messages
		my $seeOlderLink = ($mech->selector('div.acw.apm a', any => 1))[0];
		while ($seeOlderLink and $seeOlderLink->{outerHTML} =~ /last_message_timestamp/) {
			$seeOlderLink->click();
			sleep($CONFIG{'TIME_TO_WAIT'});
			my @msgs = $mech->selector('div.messageAttachments a');
			foreach my $msg (@msgs) {
				if ($msg->{href} =~ /(audioclip[^\.]+\.mp4)/) {
					my $name = $1;
					if ($msg->{href} =~ /u=([^\&]+)\&/) {
						$$refListVocalMsg{$name}{url} = unescape($1);
					}
				}
			}
			$seeOlderLink = ($mech->selector('div.acw.apm a', any => 1))[0];
		}
		$step = 2;
		$winPb->pbWinPb1->StepIt();
		$winPb->lblCount1->Text("1/3");
	}
	# Download Vocal Message
	if ($step == 2) {
		# Progress bar
		$nbrVM = keys %{$refListVocalMsg};
		$winPb->pbWinPb2->SetRange(0, $nbrVM);
		$winPb->pbWinPb2->SetPos($nbrVMDone);
		$winPb->pbWinPb2->SetStep(1);
		$winPb->lblCount2->Text("$nbrVMDone/$nbrVM");
		$winPb->lblPbCurr1->Text($STR{'downloadVM'}.'...');
		if (!-d "$saveDir\\vm_$vocalMsgName") { mkdir("$saveDir\\vm_$vocalMsgName"); }
		# Download all vocal messages
		my $k = 0;
		foreach my $name (sort keys %{$refListVocalMsg}) {
			if ($k >= $nbrVMDone) {
				my $vmFilename = "$saveDir\\vm_$vocalMsgName\\$name";
				if (!-e $vmFilename and $$refListVocalMsg{$name}{'url'}) {
					$winPb->lblPbCurr2->Text("$STR{'downloading'} $name...");
					$mech->save_url($$refListVocalMsg{$name}{url}, $vmFilename);
				}
				$$refListVocalMsg{$name}{path} = "vm_$vocalMsgName\\$name";
				$nbrVMDone++;
			}
			$k++;
			$winPb->pbWinPb2->StepIt();
			$winPb->lblCount2->Text("$k/$nbrVM");
		}
		$step = 3;
		$winPb->lblPbCurr2->Text('');
		$winPb->lblCount2->Text('');
		$winPb->pbWinPb2->SetPos(0);
		$winPb->pbWinPb1->StepIt();
		$winPb->lblCount1->Text("2/3");
	}
  # Save the Vocal Message list in a HTML file
	my $htmlVMPage;
	if ($step == 3 and $nbrVM) {
		my $count = 0;
		$winPb->lblPbCurr1->Text($STR{'saveChat'}.'...');
		# Progress bar
		$winPb->pbWinPb2->SetRange(0, $nbrVM);
		$winPb->pbWinPb2->SetPos(0);
		$winPb->pbWinPb2->SetStep(1);
		$winPb->lblCount2->Text("0/$nbrVM");
		$htmlVMPage = "$saveDir\\$vocalMsgName.html";
		open(HTML, ">:encoding(UTF-8)", $htmlVMPage);
		print HTML "<!DOCTYPE html>\n";
		print HTML "<html>\n<head>\n<title>$vocalMsgName</title>\n";
		print HTML "<meta charset=\"UTF-8\">\n";
		print HTML "<style>\n";
		print HTML "table, th, td {\n";
		print HTML "  border: 1px solid black;\n";
		print HTML "  border-collapse: collapse;\n";
		print HTML "}\n";
		print HTML "th, td {\n";
		print HTML "  padding: 5px;\n";
		print HTML "}\n";
		print HTML "</style>\n";
		print HTML "</head>\n";
		print HTML "<body>\n";
		print HTML "<h1 style=\"color:#003300;font-size: 18pt;font-variant: small-caps;font-weight: bold;\;text-align: center;\">";
		print HTML "$vocalMsgName</h1>\n";
		print HTML "<table style=\"margin: auto;\">\n";
		print HTML "<tr>\n";
		print HTML "<td style=\"font-weight: bold;text-align: center;\">$STR{'file'}</td>\n";
		print HTML "<td style=\"font-weight: bold;text-align: center;\">$STR{'url'}</td>\n";
		print HTML "<td style=\"font-weight: bold;text-align: center;\">$STR{'date'}</td>\n";
		print HTML "<td style=\"font-weight: bold;text-align: center;\">$STR{'listen'}</td>\n";
		print HTML "</tr>\n";
		foreach my $name (sort keys %{$refListVocalMsg}) {
			print HTML "<tr>";
			print HTML "<td>$name</td>";
			print HTML "<td>$$refListVocalMsg{$name}{url}</td>";
			if ($name =~ /-(\d{10})/) {
				my $dt = DateTime->from_epoch(epoch => $1);
				print HTML "<td>" . $dt->strftime('%F %T') . "</td>";
			} else { print HTML "<td></td>"; }
			if ($$refListVocalMsg{$name}{path}) {
				print HTML "<td><audio controls><source src=\"" . $$refListVocalMsg{$name}{'path'} . "\" type=\"audio/mp4\"></audio></td>";
			}
			print HTML "</tr>\n";
			$count++;
			$winPb->lblCount2->Text("$count/$nbrVM");
			$winPb->pbWinPb2->StepIt();
		}
		print HTML "</table>\n</body>\n</html>\n";
		close(HTML);
		$winPb->pbWinPb1->StepIt();
		$winPb->lblCount1->Text("3/3");
	}
	# Turn off progress bar
	$winPb->lblPbCurr1->Text('');
	$winPb->lblCount1->Text('');
	$winPb->lblPbCurr2->Text('');
	$winPb->lblCount2->Text('');
	$winPb->pbWinPb1->SetPos(0);
	$winPb->pbWinPb2->SetPos(0);
	&winPb_Terminate;
	# Delete temporary files
	if ($winConfig->chDelTempFiles->Checked()) { remove_tree("$saveDir\\temp"); }
	# Finish
	if ($htmlVMPage) {
		if ($winVocalMsg->chVocalMsgOpenOutput->Checked()) {
			$win->ShellExecute('open', $htmlVMPage,'','',1); # Open the page
		}
	} else { Win32::GUI::MessageBox($win, "$STR{'noMsgDumped'}.", $STR{'winVocalMsg'}, 0x40040); } # No Vocal Messages were dumped
  $win->Tray->Change(-tip => $STR{'dumpVocalMsgF'});
  if (!$win->IsVisible()) {
    $win->Tray->Change( -balloon_icon  => 'info'        ,
                        -balloon_title => 'ExtractFace' ,
                        -balloon_tip   => $STR{'dumpVocalMsgF'} , );
    $win->Tray->ShowBalloon(1);
  }
  $win->ChangeCursor($ARROW);

}  #--- End dumpVocalMsg

#--------------------------#
sub winVocalMsg_Terminate
#--------------------------#
{
  # Remember position
  if ($winConfig->chRememberPos->Checked()) {
    my $winLeft = $winVocalMsg->AbsLeft();
    my $winTop  = $winVocalMsg->AbsTop();
    $CONFIG{'WINVM_LEFT'} = $winLeft;
    $CONFIG{'WINVM_TOP'}  = $winTop;
    &saveConfig(\%CONFIG);
  }
  return(-1);

}  #--- Fin winVocalMsg_Terminate

#--------------------------#
sub btnCancel_Click
#--------------------------#
{
  # Stop requests
  if ($THR) {
    $winPb->lblPbCurr1->Text($STR{'cancel2'}.'...');
    $winPb->lblCount1->Text('');
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    &winPb_Terminate;
    if ($THR->is_running()) { $THR->kill('KILL')->detach(); }
    $win->ChangeCursor($ARROW);
  }
  return(1);

}  #--- End btnCancel_Click

#--------------------------#
sub btnCancel2_Click
#--------------------------#
{
  # Stop requests
  if ($THR) {
    $winPb2->lblPbCurr->Text($STR{'cancel2'}.'...');
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    &winPb2_Terminate;
    if ($THR->is_running()) { $THR->kill('KILL')->detach(); }
    $win->ChangeCursor($ARROW);
  }
  return(1);

}  #--- End btnCancel2_Click

#--------------------------#
sub winConfig
#--------------------------#
{
  # Default tab is General options
  $winConfig->configTab->Select(0);
  $winConfig->lblTool->Show();
  $winConfig->btnExportLang->Show();
  $winConfig->btnCheckUpdate->Show();
  $winConfig->chAutoUpdate->Show();
  $winConfig->lblFunctions->Show();
  $winConfig->chRememberPos->Show();
  $winConfig->lblTimeToWait->Show();
  $winConfig->tfTimeToWait->Show();
  $winConfig->upTimeToWait->Show();
  $winConfig->lblTimeToWait2->Show();
  $winConfig->lblNbrResume->Show();
  $winConfig->tfNbrResume->Show();
  $winConfig->upNbrResume->Show();
  $winConfig->chDelTempFiles->Show();
  $winConfig->chDebugLogging->Show();
  $winConfig->lblCharset->Show();
  $winConfig->cbCharset->Show();
  $winConfig->btnOpenLog->Show();
  $winConfig->chOptSeemore->Hide();
  $winConfig->chOptComments->Hide();
  $winConfig->chOptPosts->Hide();
  $winConfig->chOptTranslate->Hide();
  $winConfig->lblMaxScrollChat->Hide();
  $winConfig->rbMaxScrollChatByPage->Hide();
  $winConfig->tfMaxScrollChat->Hide();
  $winConfig->upMaxScrollChat->Hide();
  $winConfig->rbMaxScrollChatByDate->Hide();
  $winConfig->dtMaxScrollChatByDate->Hide();
  $winConfig->lblMaxScroll->Hide();
  $winConfig->rbMaxScrollByPage->Hide();
  $winConfig->tfMaxScroll->Hide();
  $winConfig->upMaxScroll->Hide();
  $winConfig->rbMaxScrollByDate->Hide();
  $winConfig->dtMaxScrollByDate->Hide();
  $winConfig->chOptScrollTop->Hide();
  if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINCONFIG_LEFT'} and $CONFIG{'WINCONFIG_TOP'}) {
    $winConfig->Left($CONFIG{'WINCONFIG_LEFT'});
    $winConfig->Top($CONFIG{'WINCONFIG_TOP'});
  } else { $winConfig->Center(); }
  $winConfig->DoModal();

}  #--- End winConfig

#--------------------------#
sub configTab_Click
#--------------------------#
{
  # Show General Options
  if (!$winConfig->configTab->SelectedItem()) {
    $winConfig->lblTool->Show();
    $winConfig->btnExportLang->Show();
    $winConfig->btnCheckUpdate->Show();
    $winConfig->chAutoUpdate->Show();
    $winConfig->lblFunctions->Show();
    $winConfig->chRememberPos->Show();
    $winConfig->lblTimeToWait->Show();
    $winConfig->tfTimeToWait->Show();
    $winConfig->upTimeToWait->Show();
    $winConfig->lblTimeToWait2->Show();
    $winConfig->lblNbrResume->Show();
    $winConfig->tfNbrResume->Show();
    $winConfig->upNbrResume->Show();
    $winConfig->chDelTempFiles->Show();
    $winConfig->chDebugLogging->Show();
    $winConfig->lblCharset->Show();
    $winConfig->cbCharset->Show();
    $winConfig->btnOpenLog->Show();
    $winConfig->lblMaxScrollChat->Hide();
    $winConfig->rbMaxScrollChatByPage->Hide();
    $winConfig->tfMaxScrollChat->Hide();
    $winConfig->upMaxScrollChat->Hide();
    $winConfig->rbMaxScrollChatByDate->Hide();
    $winConfig->dtMaxScrollChatByDate->Hide();
    $winConfig->lblMaxScroll->Hide();
    $winConfig->rbMaxScrollByPage->Hide();
    $winConfig->tfMaxScroll->Hide();
    $winConfig->upMaxScroll->Hide();
    $winConfig->rbMaxScrollByDate->Hide();
    $winConfig->dtMaxScrollByDate->Hide();
    $winConfig->chOptScrollTop->Hide();
    $winConfig->chOptSeemore->Hide();
    $winConfig->chOptComments->Hide();
    $winConfig->chOptPosts->Hide();
    $winConfig->chOptTranslate->Hide();
  # Show Scroll Options
  } elsif ($winConfig->configTab->SelectedItem() == 1) {
    $winConfig->lblMaxScrollChat->Show();
    $winConfig->rbMaxScrollChatByPage->Show();
    $winConfig->tfMaxScrollChat->Show();
    $winConfig->upMaxScrollChat->Show();
    $winConfig->rbMaxScrollChatByDate->Show();
    $winConfig->dtMaxScrollChatByDate->Show();
    $winConfig->lblMaxScroll->Show();
    $winConfig->rbMaxScrollByPage->Show();
    $winConfig->tfMaxScroll->Show();
    $winConfig->upMaxScroll->Show();
    $winConfig->rbMaxScrollByDate->Show();
    $winConfig->dtMaxScrollByDate->Show();
    $winConfig->chOptScrollTop->Show();
    $winConfig->chOptSeemore->Hide();
    $winConfig->chOptComments->Hide();
    $winConfig->chOptPosts->Hide();
    $winConfig->chOptTranslate->Hide();
    $winConfig->lblTool->Hide();
    $winConfig->btnExportLang->Hide();
    $winConfig->btnCheckUpdate->Hide();
    $winConfig->chAutoUpdate->Hide();
    $winConfig->lblFunctions->Hide();
    $winConfig->chRememberPos->Hide();
    $winConfig->lblTimeToWait->Hide();
    $winConfig->tfTimeToWait->Hide();
    $winConfig->upTimeToWait->Hide();
    $winConfig->lblTimeToWait2->Hide();
    $winConfig->lblNbrResume->Hide();
    $winConfig->tfNbrResume->Hide();
    $winConfig->upNbrResume->Hide();
    $winConfig->chDelTempFiles->Hide();
    $winConfig->chDebugLogging->Hide();
    $winConfig->lblCharset->Hide();
    $winConfig->cbCharset->Hide();
    $winConfig->btnOpenLog->Hide();
  # Show Chat options
  } else {
    $winConfig->chOptSeemore->Show();
    $winConfig->chOptComments->Show();
    $winConfig->chOptPosts->Show();
    $winConfig->chOptTranslate->Show();
    $winConfig->lblTool->Hide();
    $winConfig->btnExportLang->Hide();
    $winConfig->btnCheckUpdate->Hide();
    $winConfig->chAutoUpdate->Hide();
    $winConfig->lblFunctions->Hide();
    $winConfig->chRememberPos->Hide();
    $winConfig->lblTimeToWait->Hide();
    $winConfig->tfTimeToWait->Hide();
    $winConfig->upTimeToWait->Hide();
    $winConfig->lblTimeToWait2->Hide();
    $winConfig->lblNbrResume->Hide();
    $winConfig->tfNbrResume->Hide();
    $winConfig->upNbrResume->Hide();
    $winConfig->chDelTempFiles->Hide();
    $winConfig->chDebugLogging->Hide();
    $winConfig->lblCharset->Hide();
    $winConfig->cbCharset->Hide();
    $winConfig->btnOpenLog->Hide();
    $winConfig->lblMaxScrollChat->Hide();
    $winConfig->rbMaxScrollChatByPage->Hide();
    $winConfig->tfMaxScrollChat->Hide();
    $winConfig->upMaxScrollChat->Hide();
    $winConfig->rbMaxScrollChatByDate->Hide();
    $winConfig->dtMaxScrollChatByDate->Hide();
    $winConfig->lblMaxScroll->Hide();
    $winConfig->rbMaxScrollByPage->Hide();
    $winConfig->tfMaxScroll->Hide();
    $winConfig->upMaxScroll->Hide();
    $winConfig->rbMaxScrollByDate->Hide();
    $winConfig->dtMaxScrollByDate->Hide();
    $winConfig->chOptScrollTop->Hide();
  }

}  #--- End configTab_Click

#--------------------------#
sub winConfig_Terminate
#--------------------------#
{
  # Remember position
  if ($winConfig->chRememberPos->Checked()) {
    my $winLeft = $winConfig->AbsLeft();
    my $winTop  = $winConfig->AbsTop();
    $CONFIG{'WINCONFIG_LEFT'} = $winLeft;
    $CONFIG{'WINCONFIG_TOP'}  = $winTop;
    &saveConfig(\%CONFIG);
  }
  
  return(-1);

}  #--- End winConfig_Terminate

#--------------------------#
sub btnExportLang_Click
#--------------------------#
{
  # Save strings in Lang.ini
  open(LANG, ">:encoding(UTF-8)", $LANG_FILE);
  flock(LANG, 2);
  foreach my $cle (keys %STR) { print LANG "$cle = $STR{$cle}\n"; }
  close(LANG);
  # Open the page
  $win->ShellExecute('open', $LANG_FILE,'','',1);

}  #--- End btnExportLang_Click

#--------------------------#
sub btnCheckUpdate_Click
#--------------------------#
{
  &checkUpdate(1);

}  #--- End btnCheckUpdate_Click

#--------------------------#
sub checkUpdate
#--------------------------#
{
  # Local variables
  my $confirm = shift;
  # Download the version file  
  my $ua = new LWP::UserAgent;
  $ua->agent("ExtractFaceUpdate $VERSION");
  $ua->default_header('Accept-Language' => 'en');
  my $req = new HTTP::Request GET => $URL_VER;
  my $res = $ua->request($req);
  # Success, compare versions
  if ($res->is_success) {
    my $status  = $res->code;
    my $content = $res->content;
    my $currVer;
    if ($content =~ /([\d\.]+)/i) { $currVer = $1; }
    # No update available
    if ($currVer le $VERSION) {
      if ($confirm) { Win32::GUI::MessageBox($win, $STR{'update1'}, $STR{'update2'}, 0x40040); } # Up to date
    } else {
      $win->Show();
      # Download with browser
      my $answer = Win32::GUI::MessageBox($winConfig, "$STR{'update4'} $currVer $STR{'update5'} ?", $STR{'update3'}, 0x40024);
      if ($answer == 6) {
        # Open Firefox to XL-Tools page
        $win->ShellExecute('open', $URL_TOOL,'','',1) or Win32::GUI::MessageBox($win, Win32::FormatMessage(Win32::GetLastError()), "$STR{'update3'} ExtractFace",0x40010);
      }
    }
  }
  # Error 
  else {
    my $status  = $res->code;
    my $error   = $res->status_line;
    Win32::GUI::MessageBox($win, "$STR{'err1T'}: $STR{'returnedCode'} = [$status]; $STR{'returnedError'} = [$error].", $STR{'err7'},0x40010);
  }

}  #--- End checkUpdate

#--------------------------#
sub chAutoUpdate_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chAutoUpdate->Checked()) {
    $CONFIG{'AUTO_UPDATE'} = 1;
    &saveConfig(\%CONFIG);
  } else {
    $CONFIG{'AUTO_UPDATE'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chAutoUpdate_Click

#--------------------------#
sub chRememberPos_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chRememberPos->Checked()) {
    $CONFIG{'REMEMBER_POS'} = 1;
    &saveConfig(\%CONFIG);
  } else {
    $CONFIG{'REMEMBER_POS'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chRememberPos_Click

#--------------------------#
sub tfTimeToWait_Change
#--------------------------#
{
  # Local variables
  my $timeToWait = $winConfig->tfTimeToWait->Text();
  # Remember
  if ($START == 1) {
    $CONFIG{'TIME_TO_WAIT'} = $timeToWait;
    &saveConfig(\%CONFIG);
  }

}  #--- End tfTimeToWait_Change

#--------------------------#
sub tfNbrResume_Change
#--------------------------#
{
  # Local variables
  my $nbrResume = $winConfig->tfNbrResume->Text();
  # Remember
  if ($START == 1) {
    $CONFIG{'NBR_RESUME'} = $nbrResume;
    &saveConfig(\%CONFIG);
  }

}  #--- End tfNbrResume_Change

#--------------------------#
sub chDelTempFiles_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chDelTempFiles->Checked()) {
    $CONFIG{'DEL_TEMP_FILES'} = 1;
    &saveConfig(\%CONFIG);
  } else {
    $CONFIG{'DEL_TEMP_FILES'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chDelTempFiles_Click

#--------------------------#
sub chDebugLogging_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chDebugLogging->Checked()) {
    $CONFIG{'DEBUG_LOGGING'} = 1;
    &saveConfig(\%CONFIG);
  } else {
    $CONFIG{'DEBUG_LOGGING'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chDebugLogging_Click

#--------------------------#
sub cbCharset_Change
#--------------------------#
{
	# Save the choice
  $CONFIG{'CHARSET'} = $winConfig->cbCharset->GetString($winConfig->cbCharset->GetCurSel());
  &saveConfig(\%CONFIG);

}  #--- End cbCharset_Change

#--------------------------#
sub btnOpenLog_Click
#--------------------------#
{
  # Open file with default program
  if ($DEBUG_FILE and -T $DEBUG_FILE) {
    $win->ShellExecute('open', $DEBUG_FILE,'','',1) or
      Win32::GUI::MessageBox($win, "$STR{'errorOpening'}: ".Win32::FormatMessage(Win32::GetLastError()), $STR{'err1T'}, 0x40010);
  }

}  #--- End btnOpenLog_Click

#--------------------------#
sub tfMaxScrollChat_Change
#--------------------------#
{
  # Remember
  if ($START == 1) {
    $winConfig->rbMaxScrollChatByDate->Checked(0);
    $winConfig->rbMaxScrollChatByPage->Checked(1);
    $CONFIG{'MAX_LOADING_MSG'} = $winConfig->tfMaxScrollChat->Text();
    &saveConfig(\%CONFIG);
  }

}  #--- End tfMaxScrollChat_Change

#--------------------------#
sub dtMaxScrollChatByDate_Change
#--------------------------#
{
  $winConfig->rbMaxScrollChatByPage->Checked(0);
  $winConfig->rbMaxScrollChatByDate->Checked(1);

}  #--- End dtMaxScrollChatByDate_Change

#--------------------------#
sub tfMaxScroll_Change
#--------------------------#
{
  # Remember
  if ($START == 1) {
    $winConfig->rbMaxScrollByDate->Checked(0);
    $winConfig->rbMaxScrollByPage->Checked(1);
    $CONFIG{'MAX_SCROLL'} = $winConfig->tfMaxScroll->Text();
    &saveConfig(\%CONFIG);
  }

}  #--- End tfMaxScroll_Change

#--------------------------#
sub dtMaxScrollByDate_Change
#--------------------------#
{
  $winConfig->rbMaxScrollByPage->Checked(0);
  $winConfig->rbMaxScrollByDate->Checked(1);

}  #--- End dtMaxScrollByDate_Change

#--------------------------#
sub chOptScrollTop_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chOptScrollTop->Checked()) {
    $CONFIG{'OPT_SCROLL_TOP'} = 1;
    &saveConfig(\%CONFIG);
  } else {
    $CONFIG{'OPT_SCROLL_TOP'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chOptScrollTop_Click

#--------------------------#
sub chOptSeemore_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chOptSeemore->Checked()) {
    $CONFIG{'EXPAND_SEE_MORE'} = 1;
    &saveConfig(\%CONFIG);
  } else {
    $CONFIG{'EXPAND_SEE_MORE'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chOptSeemore_Click

#--------------------------#
sub chOptPosts_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chOptPosts->Checked()) {
    $CONFIG{'EXPAND_MORE_POSTS'} = 1;
    &saveConfig(\%CONFIG);
  } else {
    $CONFIG{'EXPAND_MORE_POSTS'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chOptPosts_Click

#--------------------------#
sub chOptComments_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chOptComments->Checked()) {
    $CONFIG{'EXPAND_MORE_COMMENTS'} = 1;
    &saveConfig(\%CONFIG);
  } else {
    $CONFIG{'EXPAND_MORE_COMMENTS'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chOptComments_Click

#--------------------------#
sub chOptTranslate_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chOptTranslate->Checked()) {
    $CONFIG{'SEE_TRANSLATION'} = 1;
    &saveConfig(\%CONFIG);
  } else {
    $CONFIG{'SEE_TRANSLATION'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chOptTranslate_Click

#--------------------------#
sub help
#--------------------------#
{
  # Open Firefox to XL-Tools page
  $win->ShellExecute('open', $URL_DOC,'','',1) or Win32::GUI::MessageBox($win, Win32::FormatMessage(Win32::GetLastError()), "$STR{'update3'} ExtractFace",0x40010);

}  #--- End help

#--------------------------#
sub loadPage
#--------------------------#
{
  # Local variables
  my ($refMech, $url) = @_;
  $$refMech->get($url, synchronize => 0);
  sleep($CONFIG{'TIME_TO_WAIT'});
  my $currURL = $$refMech->uri();
  my $currTitle;
  if ($currURL and $currURL =~ /https:\/\/(?:www|web).facebook.com\//) {
    if    ($currURL =~ /https:\/\/(?:www|web).facebook.com\/profile.php\?id=([^\/\&]+)/) { $currTitle = $1; }
    elsif ($currURL =~ /https:\/\/(?:www|web).facebook.com\/([^\/\?]+)/                ) { $currTitle = $1; }
  }
  return($currURL, $currTitle);

}  #--- End loadPage

#--------------------------#
sub formatDate
#--------------------------#
{
  # Local variables
  my $unixtime = shift;
  # Convert to string, local timezone
  if ($unixtime =~ /\./) { $unixtime = (split(/\./, $unixtime))[0]; }
  my ($s,$min,$hr,$d,$m,$y,$weekday,$ha,$isDST) = localtime($unixtime);
  $y += 1900;
  $m++;
  $m   = $m   < 10 ? $m   = '0'.$m   : $m;
  $d   = $d   < 10 ? $d   = '0'.$d   : $d;
  $hr  = $hr  < 10 ? $hr  = '0'.$hr  : $hr;
  $min = $min < 10 ? $min = '0'.$min : $min;
  $s   = $s   < 10 ? $s   = '0'.$s   : $s;
  return("$y-$m-$d $hr:$min:$s");

}  #--- End formatDate

#--------------------------#
sub debug
#--------------------------#
{
  # Local variables
  my $refMsg  = shift;
  my $dateStr = &formatDate(time);  
  # Save error msg in debug log file
  if (-e $DEBUG_FILE) { open(DEBUG,">>$DEBUG_FILE"); }
  else                { open(DEBUG,">$DEBUG_FILE");  }
  flock(DEBUG, 2);
  print DEBUG "$dateStr\t$refMsg\n";
  close(DEBUG);  

}  #--- End debug

#--------------------------#
sub saveConfig
#--------------------------#
{
  # Local variables
  my $refConfig = shift;
  # Save configuration hash values
  open(CONFIG,">$CONFIG_FILE");
  flock(CONFIG, 2);
  foreach my $cle (keys %{$refConfig}) { print CONFIG "$cle = $$refConfig{$cle}\n"; }
  close(CONFIG);  

}  #--- End saveConfig

#--------------------------#
sub loadConfig
#--------------------------#
{
  # Local variables
  my $refConfig = shift;
  # If ini file exists
  if (-T $CONFIG_FILE) {
    # Open and load config values
    open(CONFIG, $CONFIG_FILE);
    my @tab = <CONFIG>;
    close(CONFIG);
    foreach (@tab) {
      chomp($_);
      my ($key, $value) = split(/ = /, $_);
      if ($key) { $$refConfig{$key}  = $value; }
    }
  }
  # Start minimized
  if (exists($$refConfig{'START_MINIMIZED'}))       { $win->chStartMinimized->Checked($$refConfig{'START_MINIMIZED'});                  }
  else                                              { $win->chStartMinimized->Checked(0);                                               } # Default is not checked
  # General settings
  if (exists($$refConfig{'REMEMBER_POS'}))          { $winConfig->chRememberPos->Checked($$refConfig{'REMEMBER_POS'});                  }
  else                                              { $winConfig->chRememberPos->Checked(0);                                            } # Default is not checked
  if (exists($$refConfig{'TIME_TO_WAIT'}))          { $winConfig->upTimeToWait->SetPos($$refConfig{'TIME_TO_WAIT'});                    }
  else                                              { $winConfig->upTimeToWait->SetPos(2); $$refConfig{'TIME_TO_WAIT'} =  2;            } # Default value is 2
  if (exists($$refConfig{'NBR_RESUME'}))            { $winConfig->upNbrResume->SetPos($$refConfig{'NBR_RESUME'});                       }
  else                                              { $winConfig->upNbrResume->SetPos(10); $$refConfig{'NBR_RESUME'}   = 10;            } # Default value is 10
  if (exists($$refConfig{'OPT_SCROLL_TOP'}))        { $winConfig->chOptScrollTop->Checked($$refConfig{'OPT_SCROLL_TOP'});               }
  else                                              { $winConfig->chOptScrollTop->Checked(1); $$refConfig{'OPT_SCROLL_TOP'} = 1;        } # Default is checked
  if (exists($$refConfig{'AUTO_UPDATE'}))           { $winConfig->chAutoUpdate->Checked($$refConfig{'AUTO_UPDATE'});                    }
  else                                              { $winConfig->chAutoUpdate->Checked(1);   $$refConfig{'AUTO_UPDATE'}    = 1;        } # Default is checked
  if (exists($$refConfig{'DEL_TEMP_FILES'}))        { $winConfig->chDelTempFiles->Checked($$refConfig{'DEL_TEMP_FILES'});               }
  else                                              { $winConfig->chDelTempFiles->Checked(1); $$refConfig{'DEL_TEMP_FILES'} = 1;        } # Default is checked
  if (exists($$refConfig{'DEBUG_LOGGING'}))         { $winConfig->chDebugLogging->Checked($$refConfig{'DEBUG_LOGGING'});                }
  else                                              { $winConfig->chDebugLogging->Checked(0); $$refConfig{'DEBUG_LOGGING'} = 0;         } # Default is not checked
  if (exists($$refConfig{'CHARSET'}))               { $winConfig->cbCharset->SetCurSel($winConfig->cbCharset->FindString($$refConfig{'CHARSET'})); }
  else                                              { $winConfig->cbCharset->SetCurSel(0);    $$refConfig{'CHARSET'} = 'cp1252';        } # Default is cp1252
  if (exists($$refConfig{'EXPAND_SEE_MORE'}))       { $winConfig->chOptSeemore->Checked($$refConfig{'EXPAND_SEE_MORE'});                }
  else                                              { $winConfig->chOptSeemore->Checked(1);   $$refConfig{'EXPAND_SEE_MORE'}      = 1;  } # Default is checked
  if (exists($$refConfig{'EXPAND_MORE_POSTS'}))     { $winConfig->chOptPosts->Checked($$refConfig{'EXPAND_MORE_POSTS'});                }
  else                                              { $winConfig->chOptPosts->Checked(1);     $$refConfig{'EXPAND_MORE_POSTS'}    = 1;  } # Default is checked
  if (exists($$refConfig{'EXPAND_MORE_COMMENTS'}))  { $winConfig->chOptComments->Checked($$refConfig{'EXPAND_MORE_COMMENTS'});          }
  else                                              { $winConfig->chOptComments->Checked(1);  $$refConfig{'EXPAND_MORE_COMMENTS'} = 1;  } # Default is checked
  if (exists($$refConfig{'SEE_TRANSLATION'}))       { $winConfig->chOptTranslate->Checked($$refConfig{'SEE_TRANSLATION'});              }
  else                                              { $winConfig->chOptTranslate->Checked(0); $$refConfig{'SEE_TRANSLATION'}      = 0;  } # Default is not checked
  if (exists($$refConfig{'MAX_LOADING_MSG'}))       { $winConfig->upMaxScrollChat->SetPos($$refConfig{'MAX_LOADING_MSG'});              }
  else                                              { $winConfig->upMaxScrollChat->SetPos(0); $$refConfig{'MAX_LOADING_MSG'} = 0;       } # Default value is 0 (No maximum)
  if (exists($$refConfig{'MAX_SCROLL'}))            { $winConfig->upMaxScroll->SetPos($$refConfig{'MAX_SCROLL'});                       }
  else                                              { $winConfig->upMaxScroll->SetPos(0); $$refConfig{'MAX_SCROLL'} = 0;                } # Default value is 0 (No maximum)
  # Directories
  if (exists($$refConfig{'DIR_SAVE_ALBUMS'})  and -d $$refConfig{'DIR_SAVE_ALBUMS'})  { $winAlbums->tfDirSaveAlbums->Text($$refConfig{'DIR_SAVE_ALBUMS'});        }
  if (exists($$refConfig{'DIR_SAVE_FRIENDS'}) and -d $$refConfig{'DIR_SAVE_FRIENDS'}) { $winFriends->tfDirSaveFriends->Text($$refConfig{'DIR_SAVE_FRIENDS'});     }
  if (exists($$refConfig{'DIR_SAVE_EVENT'})   and -d $$refConfig{'DIR_SAVE_EVENT'})   { $winEvent->tfDirSaveEvent->Text($$refConfig{'DIR_SAVE_EVENT'});           }
  if (exists($$refConfig{'DIR_SAVE_CONTRIB'}) and -d $$refConfig{'DIR_SAVE_CONTRIB'}) { $winContrib->tfDirSaveContrib->Text($$refConfig{'DIR_SAVE_CONTRIB'});     }
  if (exists($$refConfig{'DIR_SAVE_GROUP_MEMBERS'}) and -d $$refConfig{'DIR_SAVE_GROUP_MEMBERS'}) { $winGroupMembers->tfDirSaveGroupMembers->Text($$refConfig{'DIR_SAVE_GROUP_MEMBERS'});     }
  if (exists($$refConfig{'DIR_SAVE_CHAT'})    and -d $$refConfig{'DIR_SAVE_CHAT'})    { $winChat->tfDirSaveChat->Text($$refConfig{'DIR_SAVE_CHAT'});              }
  if (exists($$refConfig{'DIR_SAVE_VM'})      and -d $$refConfig{'DIR_SAVE_VM'}) 			{ $winVocalMsg->tfDirSaveVocalMsg->Text($$refConfig{'DIR_SAVE_VM'});     		}
  # Window options
  # Dump Albums
  if (exists($$refConfig{'REMEMBER_SAVE_ALBUMS'}))  { $winAlbums->chSaveAlbumDir->Checked($$refConfig{'REMEMBER_SAVE_ALBUMS'});               }
  else                                              { $winAlbums->chSaveAlbumDir->Checked(1);     $$refConfig{'REMEMBER_SAVE_ALBUMS'}   = 1;  } # Default is checked
  if (exists($$refConfig{'ALBUMS_PUBLISH_DATE'}))   { $winAlbums->chPublishDate->Checked($$refConfig{'ALBUMS_PUBLISH_DATE'});                 }
  else                                              { $winAlbums->chPublishDate->Checked(0);      $$refConfig{'ALBUMS_PUBLISH_DATE'}    = 0;  } # Default is not checked
  if (exists($$refConfig{'ALBUMS_OPEN_HTML'}))      { $winAlbums->chAlbumsOpenHTML->Checked($$refConfig{'ALBUMS_OPEN_HTML'});                 }
  else                                              { $winAlbums->chAlbumsOpenHTML->Checked(1);   $$refConfig{'ALBUMS_OPEN_HTML'}       = 1;  } # Default is checked
  if (exists($$refConfig{'ALBUMS_OPEN_DIR'}))       { $winAlbums->chAlbumsOpenDir->Checked($$refConfig{'ALBUMS_OPEN_DIR'});                   }
  else                                              { $winAlbums->chAlbumsOpenDir->Checked(0);    $$refConfig{'ALBUMS_OPEN_DIR'}        = 0;  } # Default is not checked
  # Dump friends
  if (exists($$refConfig{'REMEMBER_SAVE_FRIENDS'})) { $winFriends->chSaveFriendsDir->Checked($$refConfig{'REMEMBER_SAVE_FRIENDS'});              }
  else                                              { $winFriends->chSaveFriendsDir->Checked(1);  $$refConfig{'REMEMBER_SAVE_FRIENDS'}     = 1;  } # Default is checked
  if (exists($$refConfig{'FRIENDS_INCLUDE_ICONS'})) { $winFriends->chFriendsProfileIcons->Checked($$refConfig{'FRIENDS_INCLUDE_ICONS'});         }
  else                                              { $winFriends->chFriendsProfileIcons->Checked(1); $$refConfig{'FRIENDS_INCLUDE_ICONS'} = 1;  } # Default is checked
  if (exists($$refConfig{'FRIENDS_OPEN_OUTPUT'}))   { $winFriends->chFriendsOpenOutput->Checked($$refConfig{'FRIENDS_OPEN_OUTPUT'});             }
  else                                              { $winFriends->chFriendsOpenOutput->Checked(1); $$refConfig{'FRIENDS_OPEN_OUTPUT'}     = 1;  } # Default is checked
  # Dump Events
  if (exists($$refConfig{'REMEMBER_SAVE_EVENT'}))   { $winEvent->chSaveEventDir->Checked($$refConfig{'REMEMBER_SAVE_EVENT'});                    }
  else                                              { $winEvent->chSaveEventDir->Checked(1);          $$refConfig{'REMEMBER_SAVE_EVENT'}   = 1;  } # Default is checked
  if (exists($$refConfig{'EVENT_PROFILE_ICONS'}))   { $winEvent->chEventProfileIcons->Checked($$refConfig{'EVENT_PROFILE_ICONS'});               }
  else                                              { $winEvent->chEventProfileIcons->Checked(1);     $$refConfig{'EVENT_PROFILE_ICONS'}   = 1;  } # Default is checked
  if (exists($$refConfig{'EVENT_OPEN_XLSX'}))       { $winEvent->chEventOpenXLSX->Checked($$refConfig{'EVENT_OPEN_XLSX'});                       }
  else                                              { $winEvent->chEventOpenXLSX->Checked(1);         $$refConfig{'EVENT_OPEN_XLSX'}       = 1;  } # Default is checked
  # Dump contrib
  if (exists($$refConfig{'REMEMBER_SAVE_CONTRIB'})) { $winContrib->chSaveContribDir->Checked($$refConfig{'REMEMBER_SAVE_CONTRIB'});              }
  else                                              { $winContrib->chSaveContribDir->Checked(1);      $$refConfig{'REMEMBER_SAVE_CONTRIB'} = 1;  } # Default is checked
  if (exists($$refConfig{'CONTRIB_PROFILE_ICONS'})) { $winContrib->chContribProfileIcons->Checked($$refConfig{'CONTRIB_PROFILE_ICONS'});         }
  else                                              { $winContrib->chContribProfileIcons->Checked(1); $$refConfig{'CONTRIB_PROFILE_ICONS'} = 1;  } # Default is checked
  if (exists($$refConfig{'CONTRIB_OPEN_XLSX'}))     { $winContrib->chContribOpenXLSX->Checked($$refConfig{'CONTRIB_OPEN_XLSX'});                 }
  else                                              { $winContrib->chContribOpenXLSX->Checked(1);     $$refConfig{'CONTRIB_OPEN_XLSX'}     = 1;  } # Default is checked
  # Dump Group Members
  if (exists($$refConfig{'REMEMBER_SAVE_GROUP_MEMBERS'})) { $winGroupMembers->chSaveGroupMembersDir->Checked($$refConfig{'REMEMBER_SAVE_GROUP_MEMBERS'});              }
  else                                              			{ $winGroupMembers->chSaveGroupMembersDir->Checked(1);  $$refConfig{'REMEMBER_SAVE_GROUP_MEMBERS'}     = 1;  } # Default is checked
  if (exists($$refConfig{'GROUP_MEMBERS_INCLUDE_ICONS'})) { $winGroupMembers->chGroupMembersProfileIcons->Checked($$refConfig{'GROUP_MEMBERS_INCLUDE_ICONS'});         }
  else                                              			{ $winGroupMembers->chGroupMembersProfileIcons->Checked(1); $$refConfig{'GROUP_MEMBERS_INCLUDE_ICONS'} = 1;  } # Default is checked
  if (exists($$refConfig{'GROUP_MEMBERS_OPEN_OUTPUT'}))   { $winGroupMembers->chGroupMembersOpenOutput->Checked($$refConfig{'GROUP_MEMBERS_OPEN_OUTPUT'});             }
  else                                              			{ $winGroupMembers->chGroupMembersOpenOutput->Checked(1); $$refConfig{'GROUP_MEMBERS_OPEN_OUTPUT'}     = 1;  } # Default is checked
  # Dump chat
  if (exists($$refConfig{'REMEMBER_SAVE_CHAT'}))    { $winChat->chSaveChatDir->Checked($$refConfig{'REMEMBER_SAVE_CHAT'});                    }
  else                                              { $winChat->chSaveChatDir->Checked(1);        $$refConfig{'REMEMBER_SAVE_CHAT'}     = 1;  } # Default is checked
  # Dump Group Members
  if (exists($$refConfig{'REMEMBER_SAVE_VM'})) 			{ $winVocalMsg->chSaveVocalMsgDir->Checked($$refConfig{'REMEMBER_SAVE_VM'});              }
  else                                              { $winVocalMsg->chSaveVocalMsgDir->Checked(1);  $$refConfig{'REMEMBER_SAVE_VM'}     = 1;  } # Default is checked
  if (exists($$refConfig{'VM_OPEN_OUTPUT'}))   			{ $winVocalMsg->chVocalMsgOpenOutput->Checked($$refConfig{'VM_OPEN_OUTPUT'});             }
  else                                              { $winVocalMsg->chVocalMsgOpenOutput->Checked(1); $$refConfig{'VM_OPEN_OUTPUT'}     = 1;  } # Default is checked
  &saveConfig($refConfig);

}  #--- End loadConfig

#--------------------------#
sub scrollPage
#--------------------------#
{
  # Local variables
  my ($refMech, $time) = @_;
  # Scrolling down and wait for content to load
  $$refMech->eval_in_page('window.scrollTo(0,document.body.scrollHeight)');
  sleep($time);
  # Evaluate end of the page
  my ($end, $type) = $$refMech->eval_in_page('(window.innerHeight + window.scrollY) >= document.body.offsetHeight');
  if ($end == 1) {
    sleep($time); # Wait another X seconds and evaluate again
    ($end, $type) = $$refMech->eval_in_page('(window.innerHeight + window.scrollY) >= document.body.offsetHeight');
    if ($end == 1) { return(1); } # End of the page
  }

}  #--- End scrollPage

#--------------------------#
sub scrollLikePage
#--------------------------#
{
  # Local variables
  my ($refMech, $time) = @_;
	my $end = 0;
  while (!$end) { # Click on "See more" button and wait for content to load
    sleep($time);
    my $seeMore = $$refMech->selector('a.pam.uiBoxLightblue.uiMorePagerPrimary', any => 1);
    if ($seeMore) {
      $seeMore->click();
    } else {
			sleep($time); # End of the page, done ? Really ? Wait a bit more
			$seeMore = $$refMech->selector('a.pam.uiBoxLightblue.uiMorePagerPrimary', any => 1);
			if (!$seeMore) { $end++; }
		}
  }

}  #--- End scrollLikePage

#--------------------------#
sub scrollVPostsPage
#--------------------------#
{
  # Local variables
  my ($refMech, $time) = @_;
	my $end = 0;
  while (!$end) { # Click on "See more" button and wait for content to load
    sleep($time);
    my $seeMore = $$refMech->selector('a.pam.uiBoxWhite.topborder.uiMorePagerPrimary', any => 1);
    if ($seeMore) {
      $seeMore->click();
    } else {
			sleep($time); # End of the page, done ? Really ? Wait a bit more
			$seeMore = $$refMech->selector('a.pam.uiBoxLightblue.uiMorePagerPrimary', any => 1);
			if (!$seeMore) { $end++; }
		}
  }

}  #--- End scrollVPostsPage

#--------------------------#
sub scrollAlbumPage
#--------------------------#
{
  # Local variables
  my ($refMech, $time) = @_;
  while (1) {
    sleep($time); # End of the page ?
    my @parts = $$refMech->selector('div._30f');
    if (scalar(@parts) > 1) { return(1); } # End of the page
    else { # Scrolling down and wait for content to load
      $$refMech->eval_in_page('window.scrollTo(0,document.body.scrollHeight)');
      sleep($time);
    }
  }

}  #--- End scrollAlbumPage

#--------------------------#
sub scrollFriendPage
#--------------------------#
{
  # Local variables
  my ($refMech, $time) = @_;
  while (1) {
		my ($end, $type) = $$refMech->eval_in_page('(window.innerHeight + window.scrollY) >= document.body.offsetHeight');
		if ($end == 1) { # End of the page, done ? Really ? Wait a bit more
			sleep($time);
			$$refMech->eval_in_page('window.scrollTo(0,document.body.scrollHeight)');
			($end, $type) = $$refMech->eval_in_page('(window.innerHeight + window.scrollY) >= document.body.offsetHeight');
			if ($end == 1) { return(1); }
		}
		$$refMech->eval_in_page('window.scrollTo(0,document.body.scrollHeight)');
		sleep($time);
  }

}  #--- End scrollFriendPage

#--------------------------#
sub scrollToBottom
#--------------------------#
{
  # Local variables
  my ($refMech, $time, $count) = @_;
  my $maxScrollByDate = $winConfig->rbMaxScrollByDate->Checked();
  my $maxDate;
  my $maxScroll;
  if ($maxScrollByDate) {
    my ($d, $m, $y) = $winConfig->dtMaxScrollByDate->GetDate();
    $maxDate        = timelocal(0,0,0,$d,$m-1,$y); # Store in Unixtime format
  } else { $maxScroll = $winConfig->tfMaxScroll->Text(); }
  while (1) { # Scrolling down and wait for content to load
    $$refMech->eval_in_page('window.scrollTo(0,document.body.scrollHeight)');
    $count++;
    sleep($time);
    # Scroll again
    if ($maxScrollByDate and $maxDate) { # Stop by date
      my $lastDisplayedDate = ($$refMech->selector('a._5pcq abbr'))[-1];
      if ($lastDisplayedDate->{outerHTML} =~ /data-utime="([^\"]+)"/) {
        my $date = $1;
        if ($date <= $maxDate) { return(1); }
      }
    } elsif ($maxScroll and $count >= $maxScroll) { return(1); } # Stop by page
    # Evaluate end of the page
    my ($end, $type) = $$refMech->eval_in_page('(window.innerHeight + window.scrollY) >= document.body.offsetHeight');
    if ($end == 1) { # End of the page, done ? Really ? Wait a bit more
      sleep($time);
      $$refMech->eval_in_page('window.scrollTo(0,document.body.scrollHeight)');
      ($end, $type) = $$refMech->eval_in_page('(window.innerHeight + window.scrollY) >= document.body.offsetHeight');
      if ($end == 1) { return(1); }
    }
  }

}  #--- End scrollToBottom

#--------------------------#
sub selectCatFriendPage
#--------------------------#
{
  # Local variables
  my ($refMech, $cat) = @_;
  my @links = $$refMech->selector('div._3dc.lfloat._ohe._5brz a');
  foreach my $link (@links) {
		my $currentName = $link->{name};
		my $catName = encode($CONFIG{'CHARSET'}, $currentName);
		$catName =~ s/[\<\>\:\"\/\\\|\?\*]/_/g;
    if ($catName eq $cat) {
      $link->click();
      return(1);
    }
  }

}  #--- End selectCatFriendPage

#--------------------------#
sub expandContent
#--------------------------#
{
  # Local variables
  my ($refMech) = @_;
  # Continue Reading
  $$refMech->eval_in_page("var el = document.getElementsByClassName('text_exposed_link'); for (var i=0;i<el.length; i++) { el[i].click(); }");
  # See more
  if ($winConfig->chOptSeemore->Checked()) {
    $$refMech->eval_in_page("var el = document.getElementsByClassName('see_more_link'); for (var i=0;i<el.length; i++) { el[i].click(); }");
    $$refMech->eval_in_page("var el = document.getElementsByClassName('_5v47 fss'); for (var i=0;i<el.length; i++) { el[i].click(); }");
    $$refMech->eval_in_page("var el = document.getElementsByClassName('UFIReplySocialSentenceLinkText UFIReplySocialSentenceVerified'); for (var i=0;i<el.length; i++) { el[i].click(); }");
  }
  # More post (wait to find the good classname)
  # View \d+ more comments? / View previous comments / Reply / etc
  if ($winConfig->chOptComments->Checked()) {
    $$refMech->eval_in_page("var el = document.getElementsByClassName('UFIPagerLink'); for (var i=0;i<el.length; i++) { el[i].click(); }");
    $$refMech->eval_in_page("var el = document.getElementsByClassName('UFICommentLink'); for (var i=0;i<el.length; i++) { el[i].click(); }");
    $$refMech->eval_in_page("var el = document.getElementsByClassName('UFIBlingBox uiBlingBox feedbackBling'); for (var i=0;i<el.length; i++) { el[i].click(); }");
  }
  # See translation
  if ($winConfig->chOptTranslate->Checked()) {
    # Translate comment
    $$refMech->eval_in_page("var el = document.getElementsByClassName('UFITranslateLink'); for (var i=0;i<el.length; i++) { el[i].click(); }");
    # Translate post
    my @links = $$refMech->selector('div._43f9 a');
    foreach (@links) { $_->click; }
  }

}  #--- End expandContent

#--------------------------#
sub saveCurrentTab
#--------------------------#
{
  # Local variables
	my ($refMech, $saveAllOpt, $htmlPage, $tmpDir) = @_;
	threads->create( sub {
		$SIG{__DIE__} = sub { };
		my $status;
		if ($saveAllOpt) { $status = $$refMech->save_content($htmlPage, $tmpDir); }
		else 					   { $status = $$refMech->save_content($htmlPage); 				 }
		while ($status->{currentState} != $status->{PERSIST_STATE_FINISHED}) { usleep(100000); }
	});
	my $waitingTime = 5; # $waitingTime is 5 seconds by default
	my $nbrFiles    = 1;
	sleep($CONFIG{'TIME_TO_WAIT'}*$waitingTime);
	if ($saveAllOpt) {
		# Wait until number of elements in temp folder have not changed for at least [time to wait * $waitingTime]
		while (1) {
			my $currNbrFiles;
			if (opendir(DIR, $tmpDir)) {
				while (readdir(DIR)) { $currNbrFiles++; }
				close(DIR);
			}
			if ($currNbrFiles != $nbrFiles) {
				$nbrFiles = $currNbrFiles;
				$winPb->lblPbCurr2->Text("$STR{'savingFiles'} ($nbrFiles)");
				sleep($CONFIG{'TIME_TO_WAIT'}*$waitingTime);
			} else { last; }
		}
	}
	my $filesize = 1;
	# Wait until size of the file have not changed for at least [time to wait * $waitingTime]
	while (1) {
		my $currSize = (stat($htmlPage))[7];
		if ($currSize != $filesize) {
			$filesize = $currSize;
			$winPb->lblPbCurr2->Text("$STR{'savingHTML'} ($filesize $STR{'bytes'})");
			sleep($CONFIG{'TIME_TO_WAIT'}*$waitingTime);
		} else { last; }
	}

}  #--- End saveCurrentTab

#--------------------------#
sub exploreDir
#--------------------------#
{
	my $dir = shift;
  if ($dir and -d $dir) {
    # Open Window Explorer
    Win32::Process::Create(
			my $ProcessObj                 ,
			"$ENV{'WINDIR'}\\explorer.exe" ,
			"explorer $dir"          			,
			0                              ,
			NORMAL_PRIORITY_CLASS          ,
			"."
		);
  }
	
}  #--- End exploreDir
