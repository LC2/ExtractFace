#!/usr/bin/perl
# Perl - v: 5.16.3
#------------------------------------------------------------------------------#
# Tool name   : ExtractFace
# Website     : http://le-tools.com/
# GitHub		  : https://github.com/arioux/ExtractFace
# Description : Dump Facebook stuff for analysis or reporting purposes
# Creation    : 2015-08-01
# Modified    : 2015-12-09
my $VERSION   = "2.0";
# Author      : Alain Rioux (admin@le-tools.com)
#
# Copyright (C) 2015  Alain Rioux (le-tools.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
# Modules
#------------------------------------------------------------------------------#
use strict;
use utf8;
use arybase;
use Encode qw(decode encode decode_utf8);
use Excel::Writer::XLSX;
use File::Copy::Recursive qw(rcopy);
use File::Path qw(remove_tree);
use Firefox::Application::API40;
use Firefox::Application;
use HTML::Entities;
use Image::Info qw(image_info dim);
use LWP::UserAgent;
use Module::Pluggable::Fast;
use MozRepl::Client;
use MozRepl::Log;
use MozRepl::RemoteObject;
use MozRepl;
use threads;
use threads::shared;
use Time::HiRes qw(usleep);
use URI::Escape::JavaScript qw(unescape);
use Win32::API();
use Win32::GUI 1.06 qw(:toolbar ILC_MASK CW_USEDEFAULT);
use Win32::GUI qw( WS_POPUP WS_CAPTION WS_THICKFRAME WS_EX_TOPMOST );
use Win32::GUI::BitmapInline();
use Win32::GUI::Grid;
use Win32::Process;
use WWW::Mechanize::Firefox;
require "ExtractFaceGraph.pl";
require "ExtractFaceLang.pl";

#------------------------------------------------------------------------------#
# Graphic elements
#------------------------------------------------------------------------------#

my ($winICO, $logoBmp, $albumBmp, $friendsBmp, $eventBmp, $chatBmp, $configBmp, $browseBmp) = &loadGraph();
  
#------------------------------------------------------------------------------#
# Global variables
#------------------------------------------------------------------------------#
my $PROGDIR = $0;                                                              # Program path
while (chop($PROGDIR) ne "\\") { }                                             # Dir only
my $CONFIG_FILE = "$PROGDIR\\ExtractFace.ini";                                 # Configuration file
my $LANG_FILE   = "$PROGDIR\\Lang.ini";                                        # Langage file
my $HELP_FILE   = "$PROGDIR\\Documentation.chm";                               # Help file
my $URL_TOOL    = 'http://www.le-tools.com/download/ExtractFace.zip';          # Url of the tool
my $URL_VER     = 'http://www.le-tools.com/download/ExtractFaceVer.txt';       # Url of the version file
my %CONFIG;                                                                    # Configuration
my %STR;                                                                       # Strings for GUI
my $ARROW       :shared;                                                       # Arrow pointer
my $HOURGLASS   :shared;                                                       # Hourglass pointer
my $THR;                                                                       # Thread

#------------------------------------------------------------------------------#
# Strings
#------------------------------------------------------------------------------#

&loadDefaultStr(\%STR); # Load default language (en)
if (-e $LANG_FILE and -T $LANG_FILE) { &loadStr(\%STR, $LANG_FILE); } # If language file, load translated strings

#------------------------------------------------------------------------------#
# Splash window
#------------------------------------------------------------------------------#

my $splash = new Win32::GUI::Window ( -name       => 'Splash'                   ,
                                      -text       => 'Splash'                   ,
                                      -size       => [128,128]                  ,
                                      -pos        => [100,100]                  ,
                                      -addstyle   => WS_POPUP                   ,
                                      -popstyle   => WS_CAPTION | WS_THICKFRAME ,
                                      -addexstyle => WS_EX_TOPMOST              , );

$splash->AddLabel(                    -name       => 'Bitmap'                   ,
                                      -size       => [128,128]                  ,
                                      -pos        => [  0,  0]                  ,
                                      -bitmap     => $logoBmp                   , );

# Center the splash and show it
$splash->Center();
$splash->Show();
Win32::GUI::DoEvents();

#------------------------------------------------------------------------------#
# Main window
#------------------------------------------------------------------------------#

my $screen    = Win32::GUI::GetDesktopWindow(); # Screen resolution
my $scrnX     = Win32::GUI::Width($screen);     # Width
my $scrnY     = Win32::GUI::Height($screen);    # Height
my $winWidth  = 520;
my $winHeight = 170;
my $winPosX   = ($scrnX - $winWidth)  / 2;
my $winPosY   = ($scrnY - $winHeight) / 2;

my $win = Win32::GUI::Window->new( -name       => 'main'               ,
                                   -title      => 'ExtractFace'        ,
                                   -background => [255, 255, 255]      ,
                                   -width      => $winWidth            ,
                                   -height     => $winHeight           ,
                                   -pos        => [$winPosX, $winPosY] ,
                                   -resizable  => 0                    ,
                                   -hasmaximize=> 0                    , );
$win->SetIcon($winICO);

my $fontGB  = new Win32::GUI::Font(-name       => 'Arial '             ,
                                   -size       => 12                   ,
                                   -bold       => 1                    , );
my $font8   = new Win32::GUI::Font(-name       => 'Arial'              ,
                                   -size       =>  8                   , );
my $font10  = new Win32::GUI::Font(-name       => 'Arial'              ,
                                   -size       =>  10                  , );
my $font10t = new Win32::GUI::Font(-name       => 'Arial'              ,
                                   -size       =>  10                  ,
                                   -underline  =>  1                   , );

# Load Pointers
my $loadImage = new Win32::API('user32', 'LoadImage', ['N','N','I','I','I','I'],'N');
$HOURGLASS    = $loadImage->Call(0, 32514, 2, 0, 0, 0x8040);
$ARROW        = $loadImage->Call(0, 32512, 2, 0, 0, 0x8040);

# Taskbar
$win->AddNotifyIcon(-name    => "Tray"           , 
                    -icon    => $winICO          ,
                    -tip     => 'ExtractFace'    ,
                    -balloon => 1                , );

# Main section
$win->AddLabel( -name        => 'lblLogo'           ,
                -size        => [128,128]           ,
                -pos         => [  0,  5]           ,
                -bitmap      => $logoBmp            ,
                -background  => [255, 255, 255]     , );
$win->AddLabel( -name        => 'lblText1'          ,
                -size        => [ 90, 65]           ,
                -pos         => [135, 10]           ,
                -font        => $font10             ,
                -foreground  => [0  , 0  , 102]     ,
                -background  => [255, 255, 255]     ,
                -text        => $STR{'update4'}.":\n".$STR{'website'}.":\n".$STR{'author'}.":\n".$STR{'translatedBy'}.':', );
$win->AddLabel( -name        => 'lblText2'          ,
                -size        => [270, 65]           ,
                -pos         => [230, 10]           ,
                -font        => $font10             ,
                -foreground  => [185, 154,   0]     ,
                -background  => [255, 255, 255]     ,
                -text        =>  "$VERSION\nhttp://www.le-tools.com/\nAlain Rioux (admin\@le-tools.com)\n$STR{'translatorName'}", );
$win->AddLabel( -name        => 'lblText3'          ,
                -size        => [300, 20]           ,
                -pos         => [135, 80]           ,
                -font        => $font10             ,
                -foreground  => [0  , 0  , 102]     ,
                -background  => [255, 255, 255]     ,
                -text        => '© Copyright 2015 Alain Rioux', );
$win->AddLabel( -name        => 'lblText4'          ,
                -size        => [340, 20]           ,
                -pos         => [160,110]           ,
                -font        => $font10             ,
                -foreground  => [255,   0,   0]     ,
                -background  => [255, 255, 255]     ,
                -text        => '>> '.$STR{'lblText4'}.' <<', );

# Load taskbar menu
my $trayMenu = Win32::GUI::Menu->new(
 	"SysTray"             => "SysTray",
  ">$STR{'menu1'}"      => { -name => "ScrollExpand" , -onClick => \&scrollExpand           },
  ">$STR{'menu2'}"      => { -name => "Scrolling"    , -onClick => \&scroll                 },
  ">$STR{'menu3'}"      => { -name => "Expand"       , -onClick => \&expand                 },
  ">$STR{'menu4'}"      => { -name => "Cancel"       , -onClick => \&cancel                 },
  " > -"                => 0,
  ">$STR{'menu5'}..."   => { -name => "Albums"       , -onClick => \&winAlbums              },
  ">$STR{'menu6'}..."   => { -name => "Friends"      , -onClick => \&winFriends             },
  ">$STR{'menu7'}..."   => { -name => "Events"       , -onClick => \&winEvent               },
  " > -"                => 0,
  ">$STR{'menu8'}"      => { -name => "ScrollChat"   , -onClick => \&scrollChat             },
  ">$STR{'menu9'}"      => { -name => "LoadOldMsg"   , -onClick => \&loadOldMsg             },
  ">$STR{'menu10'}"     => { -name => "LoadNewMsg"   , -onClick => \&loadNewMsg             },
  ">$STR{'menu11'}..."  => { -name => "Chat"         , -onClick => \&winChat                },
  " > -"                => 0,
  ">$STR{'menu12'}..."  => { -name => "Config"       , -onClick => \&winConfig              },
  ">$STR{'menu13'}"     => { -name => "Update"                                              },
  " > -"                => 0,
  ">$STR{'menu14'}..."  => { -name => "Help"         , -onClick => \&help                   },
  ">$STR{'menu15'}..."  => { -name => "About"        , -onClick => \&Tray_DblClick          },
  ">$STR{'menu16'}"     => { -name => "Quit"         , -onClick => \&main_Quit              },
);

#------------------------------------------------------------------------------#
# Dump albums window
#------------------------------------------------------------------------------#
my $winAlbumsPosX   = ($scrnX - 745) / 2;
my $winAlbumsPosY   = ($scrnY - 270) / 2;
my $winAlbums = Win32::GUI::DialogBox->new( -name        => 'winAlbums'                     ,
                                            -parent      => $win                            ,
                                            -text        => $STR{'winAlbums'}               ,
                                            -pos         => [$winAlbumsPosX, $winAlbumsPosY],
                                            -size        => [745,270]                       ,
                                            -background  => [255, 255, 255]                 ,
                                            -hasmaximize => 0                               ,
                                            -hasminimize => 1                               ,
                                            -helpbutton  => 0                               ,
                                            -resizable   => 0                               ,
                                            -topmost     => 1                               ,
                                            -dialogui    => 1                               , );
$winAlbums->SetIcon($winICO);

$winAlbums->AddLabel(             -name         => 'lblLogo'                      ,
                                  -size         => [128,128]                      ,
                                  -pos          => [  5,  5]                      ,
                                  -bitmap       => $albumBmp                      ,
                                  -background   => [255, 255, 255]                , );
$winAlbums->AddLabel(             -name         => 'lblDirSaveAlbums'             ,
                                  -size         => [ 75, 22]                      ,
                                  -pos          => [140,  8]                      ,
                                  -text         => $STR{'dir'}.':'                ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        , );
$winAlbums->AddTextfield(         -name         => 'tfDirSaveAlbums'              ,
                                  -size         => [440, 22]                      ,
                                  -pos          => [220,  5]                      ,
                                  -tabstop      => 1                              , );
$winAlbums->AddButton(            -name         => 'btnDirSaveAlbums'             ,
                                  -size         => [ 22, 22]                      ,
                                  -pos          => [662,  5]                      ,
                                  -bitmap       => $browseBmp                     ,
                                  -tabstop      => 1                              , );
$winAlbums->AddCheckbox(          -name         => 'chSaveAlbumDir'               ,
                                  -size         => [200, 20]                      ,
                                  -pos          => [220, 30]                      ,
                                  -text         => $STR{'remDir'}                 ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        ,
                                  -tabstop      => 1                              ,
                                  -checked      => 0                              , );
$winAlbums->AddLabel(             -name         => 'lblInProgress'                ,
                                  -size         => [240, 22]                      ,
                                  -pos          => [490, 31]                      ,
                                  -font         => $font10                        ,
                                  -foreground   => [0, 153, 0]                    ,
                                  -background   => [255, 255, 255]                ,
                                  -visible      => 1                              , );
$winAlbums->AddGrid (             -name         => 'GridAlbums'                   ,
                                  -pos          => [140, 55]                      ,
                                  -size         => [590,145]                      ,
                                  -fixedrows    => 1                              ,
                                  -fixedcolumns => 0                              ,
                                  -editable     => 0                              , );
$winAlbums->GridAlbums->SetListMode (1);
$winAlbums->AddButton(            -name         => 'btnAlbumsOk'                  ,
                                  -size         => [ 85, 30]                      ,
                                  -pos          => [345,205]                      ,
                                  -text         => $STR{'dump'}                   ,
                                  -font         => $font10                        ,
                                  -disabled     => 1                              ,
                                  -tabstop      => 1                              ,
                                  -ok           => 1                              ,
                                  -default      => 1                              , );

#------------------------------------------------------------------------------#
# Dump friends window
#------------------------------------------------------------------------------#
my $winFriendsPosX   = ($scrnX - 600) / 2;
my $winFriendsPosY   = ($scrnY - 230) / 2;
my $winFriends = Win32::GUI::DialogBox->new(-name        => 'winFriends'                   ,
                                            -parent      => $win                           ,
                                            -text        => $STR{'winFriends'}             ,
                                            -pos         => [$winFriendsPosX, $winFriendsPosY],
                                            -size        => [600,230]                      ,
                                            -background  => [255, 255, 255]                ,
                                            -hasmaximize => 0                              ,
                                            -hasminimize => 1                              ,
                                            -helpbutton  => 0                              ,
                                            -resizable   => 0                              ,
                                            -topmost     => 1                              ,
                                            -dialogui    => 1                              , );
$winFriends->SetIcon($winICO);

$winFriends->AddLabel(              -name       => 'lblLogo'                      ,
                                    -size       => [128,128]                      ,
                                    -pos        => [  0,  5]                      ,
                                    -bitmap     => $friendsBmp                    ,
                                    -background => [255, 255, 255]                , );
$winFriends->AddLabel(              -name       => 'lblFriendName'                ,
                                    -size       => [ 75, 22]                      ,
                                    -pos        => [140, 18]                      ,
                                    -text       => $STR{'file'}.':'               ,
                                    -font       => $font10                        ,
                                    -background => [255, 255, 255]                , );
$winFriends->AddTextfield(          -name       => 'tfFriendName'                 ,
                                    -size       => [260, 22]                      ,
                                    -pos        => [220, 15]                      ,
                                    -tabstop    => 1                              , );
$winFriends->AddLabel(              -name       => 'lblInProgress'                ,
                                    -size       => [ 80, 22]                      ,
                                    -pos        => [485, 16]                      ,
                                    -font       => $font10                        ,
                                    -foreground => [0, 153, 0]                    ,
                                    -background => [255, 255, 255]                ,
                                    -visible    => 1                              , );
$winFriends->AddLabel(              -name       => 'lblDirSaveFriends'            ,
                                    -size       => [ 75, 22]                      ,
                                    -pos        => [140, 48]                      ,
                                    -text       => $STR{'dir'}.':'                ,
                                    -font       => $font10                        ,
                                    -background => [255, 255, 255]                , );
$winFriends->AddTextfield(          -name       => 'tfDirSaveFriends'             ,
                                    -size       => [340, 22]                      ,
                                    -pos        => [220, 45]                      ,
                                    -tabstop    => 1                              , );
$winFriends->AddButton(             -name       => 'btnDirSaveFriends'            ,
                                    -size       => [ 22, 22]                      ,
                                    -pos        => [562, 45]                      ,
                                    -bitmap     => $browseBmp                     ,
                                    -tabstop    => 1                              , );
$winFriends->AddCheckbox(           -name       => 'chSaveFriendsDir'             ,
                                    -size       => [200, 20]                      ,
                                    -pos        => [220, 73]                      ,
                                    -text       => $STR{'remDir'}                 ,
                                    -background => [255, 255, 255]                ,
                                    -font       => $font10                        ,
                                    -tabstop    => 1                              ,
                                    -checked    => 0                              , );
$winFriends->AddCheckbox(           -name       => 'chIncludeIcons'               ,
                                    -size       => [200, 20]                      ,
                                    -pos        => [220, 98]                      ,
                                    -text       => $STR{'chIncludeIcons'}         ,
                                    -background => [255, 255, 255]                ,
                                    -font       => $font10                        ,
                                    -tabstop    => 1                              ,
                                    -checked    => 1                              , );
$winFriends->AddCheckbox(           -name       => 'chFriendsOpenXLSX'            ,
                                    -size       => [220, 22]                      ,
                                    -pos        => [220,123]                      ,
                                    -text       => $STR{'openXLSX'}               ,
                                    -background => [255, 255, 255]                ,
                                    -font       => $font10                        ,
                                    -tabstop    => 1                              ,
                                    -checked    => 0                              , );
$winFriends->AddButton(             -name       => 'btnFriendsOk'                 ,
                                    -size       => [ 90, 30]                      ,
                                    -pos        => [300,160]                      ,
                                    -text       => $STR{'dump'}                   ,
                                    -font       => $font10                        ,
                                    -disabled   => 1                              ,
                                    -tabstop    => 1                              ,
                                    -ok         => 1                              ,
                                    -default    => 1                              , );

#------------------------------------------------------------------------------#
# Dump Event members window
#------------------------------------------------------------------------------#
my $winEventPosX = ($scrnX - 745) / 2;
my $winEventPosY = ($scrnY - 400) / 2;
my $winEvent = Win32::GUI::DialogBox->new( -name        => 'winEvent'                     ,
                                           -parent      => $win                           ,
                                           -text        => $STR{'winEvent'}               ,
                                           -pos         => [$winEventPosX, $winEventPosY] ,
                                           -size        => [745,400]                      ,
                                           -background  => [255, 255, 255]                ,
                                           -hasmaximize => 0                              ,
                                           -hasminimize => 1                              ,
                                           -helpbutton  => 0                              ,
                                           -resizable   => 0                              ,
                                           -topmost     => 1                              ,
                                           -dialogui    => 1                              , );
$winEvent->SetIcon($winICO);

$winEvent->AddLabel(              -name         => 'lblLogo'                      ,
                                  -size         => [128,128]                      ,
                                  -pos          => [  0,  5]                      ,
                                  -bitmap       => $eventBmp                      ,
                                  -background   => [255, 255, 255]                , );
$winEvent->AddLabel(              -name         => 'lblEventName'                 ,
                                  -size         => [ 75, 22]                      ,
                                  -pos          => [140, 18]                      ,
                                  -text         => $STR{'file'}.':'               ,
                                  -font         => $font10                        ,
                                  -background   => [255, 255, 255]                , );
$winEvent->AddTextfield(          -name         => 'tfEventName'                  ,
                                  -size         => [260, 22]                      ,
                                  -pos          => [220, 15]                      ,
                                  -tabstop      => 1                              , );
$winEvent->AddLabel(              -name         => 'lblDirSaveEvent'              ,
                                  -size         => [ 75, 22]                      ,
                                  -pos          => [140, 48]                      ,
                                  -text         => $STR{'dir'}.':'                ,
                                  -font         => $font10                        , 
                                  -background   => [255, 255, 255]                ,);
$winEvent->AddTextfield(          -name         => 'tfDirSaveEvent'               ,
                                  -size         => [340, 22]                      ,
                                  -pos          => [220, 45]                      ,
                                  -tabstop      => 1                              , );
$winEvent->AddButton(             -name         => 'btnDirSaveEvent'              ,
                                  -size         => [ 22, 22]                      ,
                                  -pos          => [562, 45]                      ,
                                  -bitmap       => $browseBmp                     ,
                                  -tabstop      => 1                              , );
$winEvent->AddCheckbox(           -name         => 'chSaveEventDir'               ,
                                  -size         => [200, 20]                      ,
                                  -pos          => [220, 73]                      ,
                                  -text         => $STR{'remDir'}                 ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        ,
                                  -tabstop      => 1                              ,
                                  -checked      => 0                              , );
$winEvent->AddCheckbox(           -name         => 'chDownProfileIcons'           ,
                                  -size         => [220, 22]                      ,
                                  -pos          => [220, 95]                      ,
                                  -text         => $STR{'downIcons'}              ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        ,
                                  -tabstop      => 1                              ,
                                  -checked      => 0                              , );
$winEvent->AddCheckbox(           -name         => 'chEventOpenXLSX'              ,
                                  -size         => [220, 22]                      ,
                                  -pos          => [220,117]                      ,
                                  -text         => $STR{'openXLSX'}               ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        ,
                                  -tabstop      => 1                              ,
                                  -checked      => 0                              , );
# Event Details
$winEvent->AddLabel(              -name         => 'lblEventDetailsT'             ,
                                  -size         => [590, 22]                      ,
                                  -pos          => [140,150]                      ,
                                  -text         => $STR{'lblEventDetailsT'}       ,
                                  -font         => $fontGB                        ,
                                  -background   => [206, 221, 255]                , );
$winEvent->AddLabel(              -name         => 'lblEventID'                   ,
                                  -size         => [115, 22]                      ,
                                  -pos          => [140,183]                      ,
                                  -text         => $STR{'lblEventID'}.':'         ,
                                  -font         => $font10                        ,
                                  -background   => [255, 255, 255]                , );
$winEvent->AddTextfield(          -name         => 'tfEventID'                    ,
                                  -size         => [220, 22]                      ,
                                  -pos          => [260,180]                      ,
                                  -tabstop      => 1                              ,
                                  -readonly     => 1                              , );
$winEvent->AddLabel(              -name         => 'lblInProgress'                ,
                                  -size         => [240, 22]                      ,
                                  -pos          => [490,183]                      ,
                                  -font         => $font10                        ,
                                  -foreground   => [0, 153, 0]                    ,
                                  -background   => [255, 255, 255]                ,
                                  -visible      => 1                              , );
$winEvent->AddLabel(              -name         => 'lblAuthorID'                  ,
                                  -size         => [115, 22]                      ,
                                  -pos          => [140,213]                      ,
                                  -text         => $STR{'lblAuthorID'}.':'        ,
                                  -font         => $font10                        ,
                                  -background   => [255, 255, 255]                , );
$winEvent->AddTextfield(          -name         => 'tfAuthorID'                   ,
                                  -size         => [220, 22]                      ,
                                  -pos          => [260,210]                      ,
                                  -tabstop      => 1                              ,
                                  -readonly     => 1                              , );
$winEvent->AddLabel(              -name         => 'lblDataURL'                   ,
                                  -size         => [115, 22]                      ,
                                  -pos          => [140,243]                      ,
                                  -text         => $STR{'lblDataURL'}.':'         ,
                                  -font         => $font10                        ,
                                  -background   => [255, 255, 255]                , );
$winEvent->AddTextfield(          -name         => 'tfDataURL'                    ,
                                  -size         => [470, 22]                      ,
                                  -pos          => [260,240]                      ,
                                  -tabstop      => 1                              ,
                                  -readonly     => 1                              , );
$winEvent->AddLabel(              -name         => 'lblGuestLists'                ,
                                  -size         => [ 75, 22]                      ,
                                  -pos          => [140,273]                      ,
                                  -text         => $STR{'lblGuestLists'}.':'      ,
                                  -font         => $font10                        ,
                                  -background   => [255, 255, 255]                , );
$winEvent->AddCheckbox(           -name         => 'chGoing'                      ,
                                  -size         => [140, 20]                      ,
                                  -pos          => [260,270]                      ,
                                  -text         => 'Going'                        ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        ,
                                  -tabstop      => 1                              ,
                                  -checked      => 0                              , );
$winEvent->AddCheckbox(           -name         => 'chMaybe'                      ,
                                  -size         => [140, 20]                      ,
                                  -pos          => [405,270]                      ,
                                  -text         => 'Maybe'                        ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        ,
                                  -tabstop      => 1                              ,
                                  -checked      => 0                              , );
$winEvent->AddCheckbox(           -name         => 'chInvited'                    ,
                                  -size         => [140, 20]                      ,
                                  -pos          => [260,292]                      ,
                                  -text         => 'Invited'                      ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        ,
                                  -tabstop      => 1                              ,
                                  -checked      => 0                              , );
$winEvent->AddCheckbox(           -name         => 'chDeclined'                   ,
                                  -size         => [140, 20]                      ,
                                  -pos          => [405,292]                      ,
                                  -text         => 'Declined'                     ,
                                  -background   => [255, 255, 255]                ,
                                  -font         => $font10                        ,
                                  -tabstop      => 1                              ,
                                  -checked      => 0                              , );
$winEvent->AddButton(             -name         => 'btnEventOk'                   ,
                                  -size         => [ 90, 30]                      ,
                                  -pos          => [360,325]                      ,
                                  -text         => $STR{'dump'}                   ,
                                  -font         => $font10                        ,
                                  -disabled     => 1                              ,
                                  -tabstop      => 1                              ,
                                  -ok           => 1                              ,
                                  -default      => 1                              , );

#------------------------------------------------------------------------------#
# Dump Chat window
#------------------------------------------------------------------------------#
my $winChatPosX = ($scrnX - 650) / 2;
my $winChatPosY = ($scrnY - 260) / 2;
my $winChat = Win32::GUI::DialogBox->new(  -name        => 'winChat'                      ,
                                           -parent      => $win                           ,
                                           -text        => $STR{'winChat'}                ,
                                           -pos         => [$winChatPosX, $winChatPosY]   ,
                                           -size        => [650,260]                      ,
                                           -background  => [255, 255, 255]                ,
                                           -hasmaximize => 0                              ,
                                           -hasminimize => 1                              ,
                                           -helpbutton  => 0                              ,
                                           -resizable   => 0                              ,
                                           -topmost     => 1                              ,
                                           -dialogui    => 1                              , );
$winChat->SetIcon($winICO);

$winChat->AddLabel(               -name       => 'lblLogo'                      ,
                                  -size       => [128,128]                      ,
                                  -pos        => [  0,  5]                      ,
                                  -bitmap     => $chatBmp                       ,
                                  -background => [255, 255, 255]                , );
$winChat->AddLabel(               -name       => 'lblChatName'                  ,
                                  -size       => [ 70, 22]                      ,
                                  -pos        => [140, 18]                      ,
                                  -text       => $STR{'file'}.':'               ,
                                  -font       => $font10                        ,
                                  -background => [255, 255, 255]                , );
$winChat->AddTextfield(           -name       => 'tfChatName'                   ,
                                  -size       => [260, 22]                      ,
                                  -pos        => [220, 15]                      ,
                                  -tabstop    => 1                              , );
$winChat->AddLabel(               -name       => 'lblDirSaveChat'               ,
                                  -size       => [ 70, 22]                      ,
                                  -pos        => [140, 48]                      ,
                                  -text       => $STR{'dir'}.':'                ,
                                  -font       => $font10                        ,
                                  -background => [255, 255, 255]                , );
$winChat->AddTextfield(           -name       => 'tfDirSaveChat'                ,
                                  -size       => [340, 22]                      ,
                                  -pos        => [220, 45]                      ,
                                  -tabstop    => 1                              , );
$winChat->AddButton(              -name       => 'btnDirSaveChat'               ,
                                  -size       => [ 22, 22]                      ,
                                  -pos        => [562, 45]                      ,
                                  -bitmap     => $browseBmp                     ,
                                  -tabstop    => 1                              , );
$winChat->AddCheckbox(            -name       => 'chSaveChatDir'                ,
                                  -size       => [200, 20]                      ,
                                  -pos        => [220, 72]                      ,
                                  -text       => $STR{'remDir'}                 ,
                                  -background => [255, 255, 255]                ,
                                  -font       => $font10                        ,
                                  -tabstop    => 1                              ,
                                  -checked    => 0                              , );
$winChat->AddCheckbox(            -name       => 'chDownloadAD'                 ,
                                  -size       => [400, 20]                      ,
                                  -pos        => [220, 92]                      ,
                                  -text       => $STR{'chDownloadAD'}           ,
                                  -background => [255, 255, 255]                ,
                                  -font       => $font10                        ,
                                  -tabstop    => 1                              ,
                                  -checked    => 0                              , );
$winChat->AddCheckbox(            -name       => 'chDownloadImg'                ,
                                  -size       => [400, 20]                      ,
                                  -pos        => [240,112]                      ,
                                  -text       => $STR{'chDownloadImg'}          ,
                                  -background => [255, 255, 255]                ,
                                  -font       => $font10                        ,
                                  -tabstop    => 1                              ,
                                  -checked    => 0                              ,
                                  -disabled   => 1                              , );
$winChat->AddCheckbox(            -name       => 'chHideMe'                     ,
                                  -size       => [220, 20]                      ,
                                  -pos        => [220,132]                      ,
                                  -text       => $STR{'chHideMe'}               ,
                                  -background => [255, 255, 255]                ,
                                  -font       => $font10                        ,
                                  -tabstop    => 1                              ,
                                  -checked    => 0                              , );
$winChat->AddCheckbox(            -name       => 'chSearched'                   ,
                                  -size       => [240, 20]                      ,
                                  -pos        => [220,152]                      ,
                                  -text       => $STR{'chSearched'}             ,
                                  -background => [255, 255, 255]                ,
                                  -font       => $font10                        ,
                                  -tabstop    => 1                              ,
                                  -checked    => 0                              , );
$winChat->AddButton(              -name       => 'btnChatOk'                    ,
                                  -size       => [ 85, 30]                      ,
                                  -pos        => [275,192]                      ,
                                  -text       => $STR{'dump'}                   ,
                                  -font       => $font10                        ,
                                  -disabled   => 1                              ,
                                  -tabstop    => 1                              ,
                                  -ok         => 1                              ,
                                  -default    => 1                              , );

#------------------------------------------------------------------------------#
# Config window
#------------------------------------------------------------------------------#
my $winConfigPosX   = ($scrnX - 532) / 2;
my $winConfigPosY   = ($scrnY - 285) / 2;
my $winConfig = Win32::GUI::DialogBox->new( -name        => 'winConfig'                    ,
                                            -parent      => $win                           ,
                                            -text        => $STR{'winConfig'}              ,
                                            -pos         => [$winConfigPosX, $winConfigPosY] ,
                                            -size        => [532,285]                      ,
                                            -background  => [255, 255, 255]                ,
                                            -hasmaximize => 0                              ,
                                            -hasminimize => 0                              ,
                                            -helpbutton  => 0                              ,
                                            -resizable   => 0                              ,
                                            -topmost     => 1                              ,
                                            -dialogui    => 1                              , );
$winConfig->SetIcon($winICO);

$winConfig->AddLabel(     -name         => 'lblLogo'             ,
                          -size         => [128,128]             ,
                          -pos          => [  0,  5]             ,
                          -bitmap       => $configBmp            ,
                          -background   => [255, 255, 255]       , );

# Tabstrip
$winConfig->AddTabStrip(            -name         => 'configTab'           ,
                                    -size         => [382,245]             ,
                                    -pos          => [140,  5]             ,
                                    -fixedwidth   => 1                     ,
                                    -tabstop      => 1                     ,
                                    -background   => [255, 255, 255]       , );
$winConfig->configTab->InsertItem(  -text         => $STR{'lblGenOpt'}     , );
$winConfig->configTab->InsertItem(  -text         => $STR{'lblExpOpt'}     , );
$winConfig->configTab->InsertItem(  -text         => $STR{'lblChatOpt'}    , );
$winConfig->configTab->SetItemSize(126,20);

# General options
$winConfig->AddLabel(     -name        => 'lblTimeToWait'       ,
                          -size        => [150, 22]             ,
                          -pos         => [150, 38]             ,
                          -text        => $STR{'lblTimeToWait'}.':',
                          -font        => $font10               ,
                          -background  => [255, 255, 255]       , );
$winConfig->AddTextfield( -name        => 'tfTimeToWait'        ,
                          -size        => [ 30, 22]             ,
                          -pos         => [305, 35]             ,
                          -tip         => $STR{'tfTimeToWaitTip'},
                          -number      => 1                     ,
                          -tabstop     => 1                     , );
$winConfig->AddLabel(     -name        => 'lblTimeToWait2'      ,
                          -size        => [ 80, 22]             ,
                          -pos         => [345, 38]             ,
                          -text        => $STR{'lblTimeToWait2'},
                          -font        => $font10               ,
                          -background  => [255, 255, 255]       , );
$winConfig->AddLabel(     -name        => 'lblNbrResume'        ,
                          -size        => [150, 22]             ,
                          -pos         => [150, 68]             ,
                          -text        => $STR{'lblNbrResume'}.':',
                          -font        => $font10               ,
                          -background  => [255, 255, 255]       , );
$winConfig->AddTextfield( -name        => 'tfNbrResume'         ,
                          -size        => [ 30, 22]             ,
                          -pos         => [305, 65]             ,
                          -tip         => $STR{'tfNbrResumeTip'},
                          -number      => 1                     ,
                          -tabstop     => 1                     , );
$winConfig->AddCheckbox(  -name        => 'chOptScrollTop'      ,
                          -size        => [310, 20]             ,
                          -pos         => [150, 95]             ,
                          -text        => $STR{'chOptScrollTop'},
                          -background  => [255, 255, 255]       ,
                          -font        => $font10               ,
                          -tabstop     => 1                     ,
                          -checked     => 1                     , );
$winConfig->AddCheckbox(  -name        => 'chAutoUpdate'        ,
                          -size        => [310, 20]             ,
                          -pos         => [150,120]             ,
                          -text        => $STR{'chAutoUpdate'}  ,
                          -background  => [255, 255, 255]       ,
                          -font        => $font10               ,
                          -tabstop     => 1                     ,
                          -checked     => 1                     , );
$winConfig->AddCheckbox(  -name        => 'chDelTempFiles'      ,
                          -size        => [310, 20]             ,
                          -pos         => [150,145]             ,
                          -text        => $STR{'chDelTempFiles'},
                          -background  => [255, 255, 255]       ,
                          -font        => $font10               ,
                          -tabstop     => 1                     ,
                          -checked     => 1                     , );
$winConfig->AddButton(    -name        => 'btnExportLang'       ,
                          -size        => [125, 24]             ,
                          -pos         => [150,175]             ,
                          -text        => $STR{'btnExportLang'} ,
                          -font        => $font10               ,
                          -tabstop     => 1                     , );

# Expand options
$winConfig->AddCheckbox(  -name        => 'chOptSeemore'        ,
                          -size        => [150, 20]             ,
                          -pos         => [150, 35]             ,
                          -text        => 'See more'            ,
                          -background  => [255, 255, 255]       ,
                          -font        => $font10               ,
                          -tabstop     => 1                     ,
                          -checked     => 1                     ,
                          -visible     => 0                     , );
$winConfig->AddCheckbox(  -name        => 'chOptComments'       ,
                          -size        => [305, 20]             ,
                          -pos         => [150, 60]             ,
                          -text        => 'View X more comment(s)' ,
                          -background  => [255, 255, 255]       ,
                          -font        => $font10               ,
                          -tabstop     => 1                     ,
                          -checked     => 1                     ,
                          -visible     => 0                     , );
$winConfig->AddCheckbox(  -name        => 'chOptPosts'          ,
                          -size        => [170, 20]             ,
                          -pos         => [150, 85]             ,
                          -text        => 'More post(s) from'   ,
                          -background  => [255, 255, 255]       ,
                          -font        => $font10               ,
                          -tabstop     => 1                     ,
                          -checked     => 1                     ,
                          -visible     => 0                     , );

# Chat options
$winConfig->AddLabel(     -name        => 'lblMaxLoading'       ,
                          -size        => [165, 22]             ,
                          -pos         => [150, 38]             ,
                          -text        => $STR{'lblMaxLoading'}.':',
                          -font        => $font10               ,
                          -background  => [255, 255, 255]       ,
                          -visible     => 0                     , );
$winConfig->AddTextfield( -name        => 'tfMaxLoading'        ,
                          -size        => [ 30, 22]             ,
                          -pos         => [320, 35]             ,
                          -tip         => $STR{'tfMaxLoadingTip'},
                          -number      => 1                     ,
                          -tabstop     => 1                     ,
                          -visible     => 0                     , );
$winConfig->AddLabel(     -name        => 'lblTextLink'         ,
                          -size        => [250, 22]             ,
                          -pos         => [150, 65]             ,
                          -text        => $STR{'lblTextLink'}   ,
                          -font        => $font10t              ,
                          -background  => [255, 255, 255]       ,
                          -visible     => 0                     , );
$winConfig->AddLabel(     -name        => 'lblRegular'          ,
                          -size        => [ 80, 22]             ,
                          -pos         => [150, 93]             ,
                          -text        => $STR{'lblRegular'}.':',
                          -font        => $font10               ,
                          -background  => [255, 255, 255]       ,
                          -visible     => 0                     , );
$winConfig->AddTextfield( -name        => 'tfRegular'           ,
                          -size        => [270, 22]             ,
                          -pos         => [235, 90]             ,
                          -tip         => $STR{'lblTextLinkTip'},
                          -tabstop     => 1                     ,
                          -visible     => 0                     , );
$winConfig->AddLabel(     -name        => 'lblOlder'            ,
                          -size        => [ 80, 22]             ,
                          -pos         => [150,123]             ,
                          -text        => $STR{'lblOlder'}.':',
                          -font        => $font10               ,
                          -background  => [255, 255, 255]       ,
                          -visible     => 0                     , );
$winConfig->AddTextfield( -name        => 'tfOlder'             ,
                          -size        => [270, 22]             ,
                          -pos         => [235,120]             ,
                          -tip         => $STR{'lblTextLinkTip'},
                          -tabstop     => 1                     ,
                          -visible     => 0                     , );
$winConfig->AddLabel(     -name        => 'lblNewer'            ,
                          -size        => [ 80, 22]             ,
                          -pos         => [150,153]             ,
                          -text        => $STR{'lblNewer'}.':',
                          -font        => $font10               ,
                          -background  => [255, 255, 255]       ,
                          -visible     => 0                     , );
$winConfig->AddTextfield( -name        => 'tfNewer'             ,
                          -size        => [270, 22]             ,
                          -pos         => [235,150]             ,
                          -tip         => $STR{'lblTextLinkTip'},
                          -tabstop     => 1                     ,
                          -visible     => 0                     , );

$winConfig->AddButton(    -name        => 'btnConfigOK'         ,
                          -size        => [100, 30]             ,
                          -pos         => [220,210]             ,
                          -text        => $STR{'save'}          ,
                          -font        => $font10               ,
                          -tabstop     => 1                     ,
                          -ok          => 1                     ,
                          -default     => 1                     , );
$winConfig->AddButton(    -name        => 'btnConfigC'          ,
                          -size        => [100, 30]             ,
                          -pos         => [350,210]             ,
                          -text        => $STR{'cancel'}        ,
                          -font        => $font10               ,
                          -tabstop     => 1                     ,
                          -cancel      => 1                     , );

#------------------------------------------------------------------------------#
# Progress window
#------------------------------------------------------------------------------#
my $winProgressPosX = ($scrnX - 740) / 2;
my $winProgressPosY = ($scrnY - 180) / 2;
my $winPb = Win32::GUI::DialogBox->new( -name        => 'winPb'                   ,
                                        -parent      => $win                      ,
                                        -text        => $STR{'winPb'}             ,
                                        -pos         => [$winProgressPosX, $winProgressPosY],
                                        -size        => [740, 180]                ,
                                        -background  => [255, 255, 255]           ,
                                        -hasmaximize => 0                         ,
                                        -hasminimize => 1                         ,
                                        -helpbutton  => 0                         ,
                                        -resizable   => 0                         ,
                                        -topmost     => 1                         ,
                                        -dialogui    => 1                         , );
$winPb->SetIcon($winICO);

$winPb->AddLabel(       -name        => 'lblLogo'        ,
                        -size        => [128,128]        ,
                        -pos         => [  0, 10]        ,
                        -bitmap      => $logoBmp         ,
                        -background  => [255, 255, 255]  , );
$winPb->AddLabel(       -name        => 'lblPbCurr1'     ,
                        -size        => [578, 22]        ,
                        -pos         => [140,  8]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb->AddProgressBar( -name        => 'pbWinPb1'       ,
                        -size        => [470, 22]        ,
                        -pos         => [140, 32]        ,
                        -smooth      => 1                , );
$winPb->AddLabel(       -name        => 'lblCount1'      ,
                        -size        => [100, 22]        ,
                        -pos         => [620, 33]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb->AddLabel(       -name        => 'lblPbCurr2'     ,
                        -size        => [578, 22]        ,
                        -pos         => [140, 60]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb->AddProgressBar( -name        => 'pbWinPb2'       ,
                        -size        => [470, 22]        ,
                        -pos         => [140, 84]        ,
                        -smooth      => 1                , );
$winPb->AddLabel(       -name        => 'lblCount2'      ,
                        -size        => [100, 22]        ,
                        -pos         => [620, 85]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb->AddButton(      -name        => 'btnCancel'      ,
                        -text        => $STR{'cancel'}   ,
                        -font        => $font10          ,
                        -size        => [ 80, 30]        ,
                        -pos         => [330,115]        ,
                        -cancel      => 1                , );

#------------------------------------------------------------------------------#
# Simple Progress window
#------------------------------------------------------------------------------#
my $winProgress2PosX = ($scrnX - 550) / 2;
my $winProgress2PosY = ($scrnY - 175) / 2;
my $winPb2 = Win32::GUI::DialogBox->new(-name        => 'winPb2'                  ,
                                        -parent      => $win                      ,
                                        -text        => $STR{'winPb'}             ,
                                        -pos         => [$winProgress2PosX, $winProgress2PosY],
                                        -size        => [550,175]                 ,
                                        -background  => [255, 255, 255]           ,
                                        -hasmaximize => 0                         ,
                                        -hasminimize => 1                         ,
                                        -helpbutton  => 0                         ,
                                        -resizable   => 0                         ,
                                        -topmost     => 1                         ,
                                        -dialogui    => 1                         , );
$winPb2->SetIcon($winICO);

$winPb2->AddLabel(      -name        => 'lblLogo'        ,
                        -size        => [128,128]        ,
                        -pos         => [  0,  5]        ,
                        -bitmap      => $logoBmp         ,
                        -background  => [255, 255, 255]  , );
$winPb2->AddLabel(      -name        => 'lblPbCurr'      ,
                        -size        => [360, 40]        ,
                        -pos         => [140, 30]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb2->AddLabel(      -name        => 'lblCount'       ,
                        -size        => [ 45, 22]        ,
                        -pos         => [505, 30]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb2->AddButton(     -name        => 'btnCancel2'     ,
                        -text        => $STR{'cancel'}   ,
                        -font        => $font10          ,
                        -size        => [ 80, 30]        ,
                        -pos         => [250, 80]        ,
                        -cancel      => 1                , );

#------------------------------------------------------------------------------#
# Starting program
#------------------------------------------------------------------------------#

# Taskbar
$win->Tray->Change(-balloon_icon    => 'info'         ,
                   -balloon_title   => 'ExtractFace'  ,
                   -balloon_timeout => 5000           , );

# Header Dump albums grid
$winAlbums->GridAlbums->SetRows(1);
$winAlbums->GridAlbums->SetColumns(3); # 1: checkbox, 2: Album name, 3e: Album url
$winAlbums->GridAlbums->SetCellText(0, 0, ''        );
$winAlbums->GridAlbums->SetCellType(0, 0, GVIT_CHECK);
$winAlbums->GridAlbums->SetCellCheck(0, 0, 1);
$winAlbums->GridAlbums->SetCellText(0, 1, $STR{'albumNames'});
$winAlbums->GridAlbums->SetCellText(0, 2, $STR{'albumURLs'});
$winAlbums->GridAlbums->SetColumnWidth(0, 25);
$winAlbums->GridAlbums->SetColumnWidth(1, 80);
$winAlbums->GridAlbums->ExpandLastColumn();

&loadConfig(\%CONFIG);

# If First use


# Auto-Update
if ($CONFIG{'AUTO_UPDATE'} == 1) { &checkUpdate(0); }

my $API = new Win32::API('user32','GetForegroundWindow','', 'N');
Win32::GUI::DoEvents();
usleep(500000);
$splash->Hide;

Win32::GUI::Dialog();

#--------------------------#
sub main_Terminate
#--------------------------#
{
  $win->Disable();  # Act as minimize, to quit, user must use the taskbar function
  $win->Hide();
  if ($THR and $THR->is_running()) { $win->Tray->ShowBalloon(); }
  return(0);

}  #--- End main_Terminate

#--------------------------#
sub main_Quit
#--------------------------#
{
  $win->Tray->Remove();
  -1; # Exit signal

}  #--- End main_Quit

#--------------------------#
sub main_Minimize
#--------------------------#
{
  $win->Disable();
  $win->Hide();
  if ($THR and $THR->is_running()) { $win->Tray->ShowBalloon(); }
  return(0);

}  #--- End main_Minimize

#--------------------------#
sub Tray_DblClick
#--------------------------#
{
  $win->Enable();
  $win->Show();  

}  #--- End Tray_DblClick

#--------------------------#
sub Tray_RightClick
#--------------------------#
{
  $win->TrackPopupMenu($trayMenu->{SysTray});
  return(1);

}  #--- End Tray_Click

#--------------------------#
sub scroll
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Start the thread
    my $nbrRetries = 0;
    $THR = threads->create(\&scrollThr, $nbrRetries);
  }
}  #--- End scroll

#--------------------------#
sub scrollThr
#--------------------------#
{
  # Local variables
  my ($nbrRetries) = @_;
  
  # Cancel button
  $SIG{'KILL'} = sub {
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    &winPb2_Terminate;
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'scrollTaskC'});
    threads->exit();
  };
  
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($msgErr =~ /problem connecting/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    } else {
      # Retry 10 times
      $nbrRetries++;
      if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
        # Restart a new thread to continue
        $winPb2->lblPbCurr->Text($STR{'crash'}.'...');
        sleep(2);
        $THR = threads->create(\&scrollThr, $nbrRetries);
      } else {
        Win32::GUI::MessageBox($win, $STR{'err2'}, $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
      }
    }
    threads->exit();
  };
  
  # First execution
  if ($nbrRetries == 0) {
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'scrollTaskP'}.'...');
    
    # Turn on progress bar
    $winPb2->Center();
    $winPb2->Show();
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    $win->Disable();
  }
  
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  
  $winPb2->lblPbCurr->Text($STR{'scrollTaskP'}.'...');
  &scrollToBottom(\$mech, $CONFIG{'TIME_TO_WAIT'});
  
  # Scroll to the top
  if ($winConfig->chOptScrollTop->Checked() == 1) {
    $mech->eval_in_page('window.scrollTo(0,0)');
  }
  
  # Turn off progress bar
  $winPb2->lblPbCurr->Text('');
  $winPb2->lblCount->Text('');
  &winPb2_Terminate;
    
  $win->Tray->Change(-tip => $STR{'scrollTaskF'});
  if (!$win->IsVisible()) {
    $win->Tray->Change( -balloon_icon  => 'info'              ,
                        -balloon_title => 'ExtractFace'       ,
                        -balloon_tip   => $STR{'scrollTaskF'} , );
    $win->Tray->ShowBalloon(1);
  }
  $win->ChangeCursor($ARROW);

}  #--- End scrollThr

#--------------------------#
sub expand
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    if ($winConfig->chOptSeemore->Checked() == 1 or $winConfig->chOptPosts->Checked() == 1 or $winConfig->chOptComments->Checked() == 1) {
      # Start the thread
      my $nbrRetries = 0;
      $THR = threads->create(\&expandThr, $nbrRetries);
    } else { Win32::GUI::MessageBox($win, $STR{'warn2'}, $STR{'warn2T'}, 0x40010); }
  }
}  #--- End expand

#--------------------------#
sub expandThr
#--------------------------#
{
  # Local variables
  my ($nbrRetries) = @_;
  
  # Cancel button
  $SIG{'KILL'} = sub {
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    &winPb2_Terminate;
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'expandTaskC'});
    threads->exit();
  };
  
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($msgErr =~ /problem connecting/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    } else {
      # Retry 10 times
      $nbrRetries++;
      if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
        # Restart a new thread to continue
        $winPb2->lblPbCurr->Text($STR{'crash'}.'...');
        sleep(2);
        $THR = threads->create(\&scrollThr, $nbrRetries);
      } else {
        Win32::GUI::MessageBox($win, $STR{'err2'}, $STR{'err1T'}, 0x40010);
        # Turn off progress bar
        $winPb2->lblPbCurr->Text('');
        $winPb2->lblCount->Text('');
        &winPb2_Terminate;
        $win->ChangeCursor($ARROW);
        $win->Tray->Change(-tip => 'ExtractFace');
      }
    }
    threads->exit();
  };
  
  # First execution
  if ($nbrRetries == 0) {
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'expandTaskP'}.'...');
    
    # Turn on progress bar
    $winPb2->Center();
    $winPb2->Show();
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    $win->Disable();
  }
  
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  
  $winPb2->lblPbCurr->Text($STR{'expandTaskP'}.'...');
  &expandContent(\$mech);
  &expandContent(\$mech); # Do it again
  
  # Turn off progress bar
  $winPb2->lblPbCurr->Text('');
  $winPb2->lblCount->Text('');
  &winPb2_Terminate;
    
  $win->Tray->Change(-tip => $STR{'expandTaskF'});
  if (!$win->IsVisible()) {
    $win->Tray->Change( -balloon_icon  => 'info'              ,
                        -balloon_title => 'ExtractFace'       ,
                        -balloon_tip   => $STR{'expandTaskF'} , );
    $win->Tray->ShowBalloon(1);
  }
  $win->ChangeCursor($ARROW);

}  #--- End expandThr

#--------------------------#
sub scrollExpand
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Start the thread
    my $nbrRetries = 0;
    my $status     = 0; # If status == 1, scrolling finished
    $THR = threads->create(\&scrollExpandThr, $nbrRetries, $status);
  }
}  #--- End scrollExpand

#--------------------------#
sub scrollExpandThr
#--------------------------#
{
  # Local variables
  my ($nbrRetries, $status) = @_;
  
  # Cancel button
  $SIG{'KILL'} = sub {
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    &winPb2_Terminate;
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'scrExpTaskC'});
    threads->exit();
  };
  
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    $win->Tray->Change(-tip => 'ExtractFace');
    if ($msgErr =~ /problem connecting/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
    } else {
      # Retry 10 times
      $nbrRetries++;
      if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
        # Restart a new thread to continue
        $winPb2->lblPbCurr->Text($STR{'crash'}.'...');
        sleep(2);
        $THR = threads->create(\&scrollExpand, $nbrRetries, $status);
      } else {
        Win32::GUI::MessageBox($win, $STR{'err2'}, $STR{'err1T'}, 0x40010);
        # Turn off progress bar
        $winPb2->lblPbCurr->Text('');
        $winPb2->lblCount->Text('');
        &winPb2_Terminate;
        $win->ChangeCursor($ARROW);
      }
    }
    threads->exit();
  };
  
  # First execution
  if ($nbrRetries == 0) {
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'scrollTaskP'}.'...');
    
    # Turn on progress bar
    $winPb2->Center();
    $winPb2->Show();
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    $win->Disable();
  }
  
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }

  # Scroll at the bottom
  if ($status == 0) {
    $winPb2->lblPbCurr->Text($STR{'scrollTaskP'}.'...');
    &scrollToBottom(\$mech, $CONFIG{'TIME_TO_WAIT'});
    
    $win->Tray->Change(-tip => $STR{'scrollTaskF'});
    if (!$win->IsVisible()) {
      $win->Tray->Change( -balloon_icon  => 'info'              ,
                          -balloon_title => 'ExtractFace'       ,
                          -balloon_tip   => $STR{'scrollTaskF'} , );
      $win->Tray->ShowBalloon(1);
    }
    $status = 1;
  }
  
  # Expand additional content
  if ($status == 1 and ($winConfig->chOptSeemore->Checked() == 1 or $winConfig->chOptPosts->Checked() == 1 or $winConfig->chOptComments->Checked() == 1)) {
    # Expand all additional content
    $winPb2->lblPbCurr->Text($STR{'expandTaskP'}.'...');
    $win->Tray->Change(-tip => $STR{'expandTaskP'}.'...');
    &expandContent(\$mech);
    &expandContent(\$mech); # Do it again
    
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    &winPb2_Terminate;
    $win->ChangeCursor($ARROW);
    
    $win->Tray->Change(-tip => $STR{'expandTaskF'});
    if (!$win->IsVisible()) {
      $win->Tray->Change( -balloon_icon  => 'info'              ,
                          -balloon_title => 'ExtractFace'       ,
                          -balloon_tip   => $STR{'expandTaskF'} , );
      $win->Tray->ShowBalloon(1);
    }
  }
  
  # Scroll to the top
  if ($winConfig->chOptScrollTop->Checked() == 1) { $mech->eval_in_page('window.scrollTo(0,0)'); }

}  #--- End scrollExpandThr

#--------------------------#
sub winAlbums
#--------------------------#
{
  # Local variables
  my $tempDir = "$PROGDIR\\temp";
  
  # Gather album names
  $THR = threads->create(sub {
    # Deal with crash
    $SIG{__DIE__} = sub {
      my $msgErr = $_[0];
      chomp($msgErr);
      $msgErr =~ s/[\t\r\n]/ /g;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
      Win32::GUI::MessageBox($winAlbums, $STR{'err3'}, $STR{'err1T'}, 0x40010);
      threads->exit();
    };
    
    my $mech;
    eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
    if ($@) {
      if ($@ =~ /Failed to connect to/) {
        $winAlbums->btnAlbumsOk->Disable();
        Win32::GUI::MessageBox($winAlbums, $STR{'err1'}, $STR{'err1T'}, 0x40010);
      }
      threads->exit();
    }
    
    # Valid current page
    $winAlbums->ChangeCursor($HOURGLASS);
    &validAlbumPage(\$mech);

    # Save and parse the page
    my ($isStream, $goodURL) = &parsingAlbumPage(\$mech, $tempDir);
    
    # Scroll to the top
    if ($winConfig->chOptScrollTop->Checked() == 1) {
      $mech->eval_in_page('window.scrollTo(0,0)');
    }
    
    # Stream type page, reload
    if ($isStream) {
      my ($currURL, $currTitle) = &loadPage(\$mech, $goodURL);
      &validAlbumPage(\$mech);
      my ($isStream, $goodURL) = &parsingAlbumPage(\$mech, $tempDir);
    }
    
    # Delete temporary files
    if ($winConfig->chDelTempFiles->Checked() == 1) { remove_tree($tempDir); }
    
    $winAlbums->lblInProgress->Text('');
    $winAlbums->ChangeCursor($ARROW);
    
    # Ready ?
    &isDumpAlbumsReady();
  });
    
  $winAlbums->GridAlbums->AutoSize();
  $winAlbums->GridAlbums->DeleteNonFixedRows();
  $winAlbums->Center();
  $winAlbums->DoModal();

}  #--- End winAlbums

#--------------------------#
sub validAlbumPage
#--------------------------#
{
  # Local variables
  my ($refMech) = @_;
  
  my $currURL = $$refMech->uri();
  my $currTitle;
  if ($currURL !~ /photos_albums$/ and $currURL !~ /collection_token=\w+%\w+%3A6$/) {
    # Trying to get the good page
    if ($currURL =~ /https:\/\/www.facebook.com\/profile.php\?id=([^\/\&]+)/) {
      my $profilID = $1;
      $winAlbums->lblInProgress->Text($STR{'loadAlbum'}.'...');
      my $goodURL = "https://www.facebook.com/profile.php?id=$profilID&sk=photos&collection_token=$profilID%3A2305272732%3A6";
      ($currURL, $currTitle) = &loadPage($refMech, $goodURL);
    } elsif ($currURL =~ /https:\/\/www.facebook.com\/([^\/]+)/) {
      $winAlbums->lblInProgress->Text($STR{'loadAlbum'}.'...');
      my $goodURL = "https://www.facebook.com/$1/photos_albums";
      ($currURL, $currTitle) = &loadPage($refMech, $goodURL);
    }
    
    # Re evaluate current page
    if (($currURL !~ /photos_albums$/ and $currURL !~ /collection_token=\w+%\w+%3A6$/) or $currTitle =~ /Page Not Found/) {
      $winAlbums->btnAlbumsOk->Disable();
      Win32::GUI::MessageBox($winAlbums, $STR{'warn3'}, $STR{'warn2T'}, 0x40010);
      threads->exit();
    } else {
      $winAlbums->lblInProgress->Text($STR{'loadAlbum'}.'...');
      &scrollToBottom($refMech, $CONFIG{'TIME_TO_WAIT'});
    }
  # You are in the right page, scroll down to load the whole page
  } else {
    $winAlbums->lblInProgress->Text($STR{'loadAlbum'}.'...');
    &scrollToBottom($refMech, $CONFIG{'TIME_TO_WAIT'});
  }

}  #--- End validAlbumPage

#--------------------------#
sub parsingAlbumPage
#--------------------------#
{
  # Local variables
  my ($refMech, $tempDir) = @_;
  my $isStream            = 0;
  my $goodURL             = '';
  my %albums;
  
  $winAlbums->lblInProgress->Text($STR{'dumpAlbumP'}.'...');
  # Save
  if (!-d $tempDir) { mkdir($tempDir); }
  my $pageHtml   = "$tempDir\\page.html";
  my $status     = $$refMech->save_content($pageHtml);
  while ($status->{currentState} != $status->{PERSIST_STATE_FINISHED}) { usleep(100000); }
  # Parse
  open(my $tmp, $pageHtml);
  my $file_as_string = do { local $/ = <$tmp> };
  $file_as_string =~ s/[\r\n]//g;
  my $section1 = (split(/function\(Bootloader\)/, $file_as_string))[0];
  undef($file_as_string);
  if ($section1 =~ /clearfix pvs photoDetails/) {
    my @parts = split(/clearfix pvs photoDetails/, $section1);
    foreach my $part (@parts) {
      if ($part =~ /<a class="photoTextTitle" href="([^\"]+)"><strong>([^\<]+)<\/strong><\/a>/ or
          $part =~ /<a class="photoTextTitle" href="([^\"]+)"><i class="fbPhotosRedesignVideoIcon[^\"]+"><\/i><strong>([^\<]+)<\/strong><\/a>/) {
        my $albumURL  = $1;
        my $albumName = $2;
        $albumURL =~ s/&amp;/&/g;
        $albumName = decode_entities($albumName);
        if (!exists($albums{$albumName}) and my $i = $winAlbums->GridAlbums->InsertRow($albumName, -1)) {
          $albums{$albumName} = $albumURL;
          $winAlbums->GridAlbums->SetCellText($i, 0, ''        );
          $winAlbums->GridAlbums->SetCellType($i, 0, GVIT_CHECK);
          $winAlbums->GridAlbums->SetCellCheck($i, 0, 1);
          $winAlbums->GridAlbums->SetCellText($i, 1, $albumName);
          $winAlbums->GridAlbums->SetCellText($i, 2, $albumURL);
          $winAlbums->GridAlbums->AutoSize();
          $winAlbums->GridAlbums->Refresh();
        }
      }
    }
  # You are not in the right page, maybe "stream type"
  } elsif ($section1 =~ /(https:\/\/www.facebook.com\/[^\/]+\/photos_stream\?tab=photos_albums)/ ) {
    $isStream = 1;
    $goodURL  = $1;
  }
  close($tmp);
  
  return($isStream, $goodURL);  

}  #--- End parsingAlbumPage

#--------------------------#
sub tfDirSaveAlbums_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winAlbums->tfDirSaveAlbums->Text();
  
  # Remember
  if ($saveDir and -d $saveDir and $winAlbums->chSaveAlbumDir->Checked() == 1) {
      $CONFIG{'DIR_SAVE_ALBUMS'} = $saveDir;
      &saveConfig(\%CONFIG);
  }
  
  # Ready ?
  &isDumpAlbumsReady();

}  #--- End tfDirSaveAlbums_Change

#--------------------------#
sub btnDirSaveAlbums_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winAlbums->tfDirSaveAlbums->Text();
  my $dir;

  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) {
      while ($lastDir =~ /[^\\]$/) { chop($lastDir); }
    }
    $dir = $win->BrowseForFolder( -owner      => $winAlbums        ,
                                  -title      => $STR{'selDir'}    ,
                                  -folderonly => 1                 ,
                                  -directory  => $lastDir          ,);
  } else {
    $dir = $win->BrowseForFolder( -owner      => $winAlbums        ,
                                  -title      => $STR{'selDir'}    ,
                                  -folderonly => 1                 , );
  }

  # Selected folder
  if ($dir and -d $dir) {
    if ($dir =~ /\\$/) { chop($dir); }
    $winAlbums->tfDirSaveAlbums->Text($dir);
  }
  
}  #--- End btnDirSaveAlbums_Click

#--------------------------#
sub chSaveAlbumDir_Click
#--------------------------#
{
  # Local variables
  my $dir = $winAlbums->tfDirSaveAlbums->Text();
  
  # If directory exists, save it
  if ($dir and -d $dir and $winAlbums->chSaveAlbumDir->Checked() == 1) {
    $CONFIG{'REMEMBER_SAVE_ALBUMS'} = 1;
    $CONFIG{'DIR_SAVE_ALBUMS'} = $dir;
    &saveConfig(\%CONFIG);
  # Don't save
  } elsif ($winAlbums->chSaveAlbumDir->Checked() == 0) {
    $CONFIG{'REMEMBER_SAVE_ALBUMS'} = 0;
    delete($CONFIG{'DIR_SAVE_ALBUMS'});
    &saveConfig(\%CONFIG);
  }

}  #--- End chSaveAlbumDir_Click

#--------------------------#
sub GridAlbums_Click
#--------------------------#
{
  # Local variables
  my ($row, $column) = @_;
  
  # Select
  if ($column == 0) {
    my $selStatus = $winAlbums->GridAlbums->GetCellCheck($row, $column);
    if ($row == 0) {
      # Check all
      if (!$selStatus) { for (my $i = 0; $i < $winAlbums->GridAlbums->GetRows(); $i++) { $winAlbums->GridAlbums->SetCellCheck($i, 0, 1); } }
      # Uncheck all
      else             { for (my $i = 0; $i < $winAlbums->GridAlbums->GetRows(); $i++) { $winAlbums->GridAlbums->SetCellCheck($i, 0, 0); } }
    } else {
      # Check
      if (!$selStatus) { $winAlbums->GridAlbums->SetCellCheck($row, $column, 1); }
      # Uncheck
      else             { $winAlbums->GridAlbums->SetCellCheck($row, $column, 0); }
    }
  }
  
  return(1);

}  #--- End GridAlbums_Click

#--------------------------#
sub isDumpAlbumsReady
#--------------------------#
{
  # Local variables
  my $saveDir = $winAlbums->tfDirSaveAlbums->Text();
  
  # Valid directory for save ?
  if (!$saveDir or !(-d $saveDir)) { $winAlbums->btnAlbumsOk->Disable(); return(0); }
  
  # Albums name loaded and at least one checked ?
  my $albumChecked = 0;
  for (my $i = 1; $i < $winAlbums->GridAlbums->GetRows(); $i++) {
    my $selStatus = $winAlbums->GridAlbums->GetCellCheck($i, 0);
    if ($selStatus == 1) {
      $albumChecked = 1;
      last;
    }
  }
  if ($albumChecked == 0) { $winAlbums->btnAlbumsOk->Disable(); return(0); }
  
  $winAlbums->btnAlbumsOk->Enable();

}  #--- End isDumpAlbumsReady

#--------------------------#
sub btnAlbumsOk_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    my $saveDir = $winAlbums->tfDirSaveAlbums->Text();
    my %listAlbums    = ();
    my $refListAlbums = \%listAlbums;
    my $nbrAlbums     = 0;
    my $posPb1        = 0;
    my $nbrRetries    = 0;
    
    if (-d $saveDir) {
      # Start the thread
      $THR = threads->create(\&dumpAlbums, $saveDir, $refListAlbums, $nbrAlbums, $posPb1, $nbrRetries);
      return(-1);
    } else { Win32::GUI::MessageBox($win, $STR{'err4'}, $STR{'err1T'}, 0x40010); }
  }

}  #--- End btnAlbumsOk_Click

#--------------------------#
sub dumpAlbums
#--------------------------#
{
  # Local variables
  my ($saveDir, $refListAlbums, $nbrAlbums, $posPb1, $nbrRetries) = @_;
  my $firstExec = 0;
  
  # Cancel button
  $SIG{'KILL'} = sub {
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'dumpAlbumC'});
    # Turn off progress bar
    $winPb->lblPbCurr1->Text('');
    $winPb->lblCount1->Text('');
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    $winPb->pbWinPb1->SetPos(0);
    $winPb->pbWinPb2->SetPos(0);
    &winPb_Terminate;
    threads->exit();
  };
  
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    $win->ChangeCursor($ARROW);
    # Progress window
    $posPb1 = $winPb->pbWinPb1->GetPos();
    $winPb->pbWinPb2->SetPos(0);
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    # Retry 10 times
    $nbrRetries++;
    if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
      # Restart a new thread to continue
      $winPb->lblPbCurr1->Text($STR{'crash'}.'...');
      sleep(2);
      $THR = threads->create(\&dumpAlbums, $saveDir, $refListAlbums, $nbrAlbums, $posPb1, $nbrRetries);
    } else {
      Win32::GUI::MessageBox($winPb, $STR{'err2'}, $STR{'err1T'}, 0x40010);
    }
    # Kill this thread
    threads->exit();
  };
  
  # First execution, must gather album names and urls
  if ($posPb1 == 0 and $nbrAlbums == 0) {
    $firstExec = 1;
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'dumpAlbumP'}.'...');
    for (my $i = 1; $i < $winAlbums->GridAlbums->GetRows(); $i++) {
      my $selStatus = $winAlbums->GridAlbums->GetCellCheck($i, 0);
      if ($selStatus == 1) {
        my $albumName = $winAlbums->GridAlbums->GetCellText($i, 1);
        my $albumURL  = $winAlbums->GridAlbums->GetCellText($i, 2);
        $$refListAlbums{$albumName} = $albumURL;
      }
    }
    # Number of album
    $nbrAlbums = keys %{$refListAlbums};
  }
  
  if ($nbrAlbums > 0) {
    my $count1;
    
    # First execution, turn on the progress window
    if ($firstExec == 1) {
      # Turn on progress bar
      $winPb->Center();
      $winPb->Show();
      $win->Disable();
      $winPb->pbWinPb1->SetRange(0, $nbrAlbums);
      $winPb->pbWinPb1->SetPos(0);
      $winPb->pbWinPb1->SetStep(1);
      $count1 = 0;
    # If on resume state, get number of albums left
    } else {
      my $nbrCurrAlbums = keys %{$refListAlbums};
      $count1 = $nbrAlbums - $nbrCurrAlbums;
    }
    
    # Parse each album
    foreach my $album (sort keys %{$refListAlbums}) {
      my @listPics;
      my @listVideos;
      
      $winPb->lblPbCurr1->Text("$STR{'opening'}: $album");
      $winPb->lblCount1->Text("$count1/$nbrAlbums");
      $winPb->lblPbCurr2->Text('');
      $winPb->lblCount2->Text('');
      my $album2 = $album;
      $album =~ s/[\<\>\:\"\/\\\|\?\*]/_/g;
      
      # Gather album page
      if (!-d "$saveDir\\$album"      ) { mkdir("$saveDir\\$album");       }
      if (!-d "$saveDir\\$album\\temp") { mkdir("$saveDir\\$album\\temp"); }
      my $mechAlbum = WWW::Mechanize::Firefox->new(tab => 'current', autodie => 0);
      $mechAlbum->get($$refListAlbums{$album2}, synchronize => 0);
      $winPb->lblPbCurr1->Text("$STR{'scrolling'}: $album");
      sleep($CONFIG{'TIME_TO_WAIT'});
      &scrollToBottom(\$mechAlbum, $CONFIG{'TIME_TO_WAIT'});
      
      $winPb->lblPbCurr1->Text("$STR{'downloading'}: $album");      
      my $htmlPage = "$saveDir\\$album\\temp\\page.html";
      my $status = $mechAlbum->save_content($htmlPage);
      while ($status->{currentState} != $status->{PERSIST_STATE_FINISHED}) { usleep(100000); }
      
      # Video album
      if ($album eq 'Videos') {
        # Parse page and gather video urls
        if (-T $htmlPage) {
          open(my $tmp, $htmlPage);
          my $file_as_string = do { local $/ = <$tmp> };
          $file_as_string =~ s/[\r\n]//g;
          my @parts = split(/_53s/, $file_as_string);
          my %videoNames;
          foreach my $part (@parts) {
            if ($part =~ /a[^\>]+href="([^\"]+)"[^\>]+aria-label="[^\"]+"/ or
                $part =~ /a[^\>]+aria-label="[^\"]+"[^\>]+href="([^\"]+)"/) {
              my $videoPageURL = $1;
              if ($videoPageURL =~ /\/([^\/]+)\/\?type=/) {
                my $vd = $1;
                if (!exists($videoNames{$vd})) {
                  $videoNames{$vd} = 1;
                  if ($videoPageURL !~ /^http/) { $videoPageURL = 'https://www.facebook.com'.$videoPageURL; }
                  $videoPageURL =~ s/&amp;/&/g;
                  push(@listVideos, $videoPageURL);
                }
              }
            }
          }
          close($tmp);
        }
        # Gather videos
        my $nbrVideos = @listVideos;
        if ($nbrVideos > 0) {
          $winPb->pbWinPb2->SetRange(0, $nbrVideos);
          $winPb->pbWinPb2->SetPos(0);
          $winPb->pbWinPb2->SetStep(1);
          my $count2 = 0;
          foreach my $videoPageURL (@listVideos) {
            if ($videoPageURL =~ /vb\.[^\/]+\/([^\/]+)/) {
              # Gather page with the video
              $winPb->lblPbCurr2->Text("$STR{'opening'}: $videoPageURL");
              my $videoName = $1;
              $mechAlbum->get($videoPageURL, synchronize => 0);
              sleep($CONFIG{'TIME_TO_WAIT'});
              my $status2 = $mechAlbum->save_content("$saveDir\\$album\\temp\\$videoName\.html");
              while ($status2->{currentState} != $status2->{PERSIST_STATE_FINISHED}) { usleep(100000); }
          
              # Parse the video page
              open(my $tmpVid, "$saveDir\\$album\\temp\\$videoName.html");
              my $vidfile_as_string = do { local $/ = <$tmpVid> };
              $vidfile_as_string =~ s/[\r\n]//g;
              if ($vidfile_as_string =~ /video[^\>]+src="([^\"]+)"/) {
                my $videoURL = $1;
                $videoURL =~ s/&amp;/&/g;
                if ($videoURL =~ /^http/) {
                  $winPb->lblPbCurr2->Text("$STR{'downloading'}: $videoURL");
                  $mechAlbum->save_url($videoURL, "$saveDir\\$album\\$videoName\.mp4"); # Download video
                } elsif ($videoURL =~ /([^\/]+\.mp4)/) {
                  my $trueVideoName = $1;
                  $winPb->lblPbCurr2->Text("$STR{'downloading'}: $trueVideoName");
                  rcopy("$saveDir\\$album\\temp\\$trueVideoName", "$saveDir\\$album\\$videoName\.mp4"); # Copy video
                }
              }
              undef($vidfile_as_string);
              close($tmpVid);
            }
            
            # Update progress
            $count2++;
            $winPb->pbWinPb2->StepIt();
            $winPb->lblCount2->Text("$count2/$nbrVideos");
          }
        }        
      # Picture album
      } else {
        # Parse page and gather picture urls
        if (-T $htmlPage) {
          open(my $tmp, $htmlPage);
          my $file_as_string = do { local $/ = <$tmp> };
          $file_as_string =~ s/[\r\n]//g;
          my @parts = split(/_53d _53q/, $file_as_string);
          foreach my $part (@parts) {
            if ($part =~ /data-starred-src="([^\"]+)" /) {
              my $picURL = $1;
              # It's a pic
              if ($part =~ /class="uiMediaThumb _6i9 uiMediaThumbMedium"/) {
                $picURL =~ s/&amp;/&/g;
                push(@listPics, $picURL);
              }
            }
          }
          close($tmp);
        }
        
        # Gather pictures
        my $nbrPics = @listPics;
        if ($nbrPics > 0) {
          $winPb->pbWinPb2->SetRange(0, $nbrPics);
          $winPb->pbWinPb2->SetPos(0);
          $winPb->pbWinPb2->SetStep(1);
          my $count2 = 0;
          foreach my $picURL (@listPics) {
            if ($picURL =~ /\/([^\/\?]+)\?/) {
              my $pic = $1;
              my $picPath = "$saveDir\\$album\\$pic";
              $winPb->lblPbCurr2->Text("$STR{'downloading'}: $pic");
              # Download the picture if does not exist
              if (!-e $picPath) { $mechAlbum->save_url($picURL, $picPath); }
            }
            
            # Update progress
            $count2++;
            $winPb->pbWinPb2->StepIt();
            $winPb->lblCount2->Text("$count2/$nbrPics");
          }
        }
      }
      
      $count1++;
      $winPb->pbWinPb1->StepIt();
      $winPb->lblCount1->Text("$count1/$nbrAlbums");
      $winPb->pbWinPb2->SetPos(0);
      $winPb->lblPbCurr2->Text('');
      $winPb->lblCount2->Text('');
      
      # Delete completed album
      delete($$refListAlbums{$album2});
      
      # Delete temporary files
      if (-d "$saveDir\\$album\\temp" and $winConfig->chDelTempFiles->Checked() == 1) { remove_tree("$saveDir\\$album\\temp"); }
    }

    # Turn off progress bar
    $winPb->lblPbCurr1->Text('');
    $winPb->lblCount1->Text('');
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    $winPb->pbWinPb1->SetPos(0);
    $winPb->pbWinPb2->SetPos(0);
    &winPb_Terminate;
    
    # Open Window Explorer
    Win32::Process::Create(my $ProcessObj                 ,
                           "$ENV{'WINDIR'}\\explorer.exe" ,
                           "explorer $saveDir"             ,
                           0                              ,
                           NORMAL_PRIORITY_CLASS          ,
                           ".");
  }

  $win->Tray->Change(-tip => $STR{'dumpAlbumF'});
  if (!$win->IsVisible()) {
    $win->Tray->Change( -balloon_icon  => 'info'             ,
                        -balloon_title => 'ExtractFace'      ,
                        -balloon_tip   => $STR{'dumpAlbumF'} , );
    $win->Tray->ShowBalloon(1);
  }
  $win->ChangeCursor($ARROW);


}  #--- End dumpAlbums
  
#--------------------------#
sub winPb_Terminate
#--------------------------#
{
  $winPb->Hide();
  $win->Enable();
  $win->SetForegroundWindow();
  return(0);

}  #--- End winPb_Terminate

#--------------------------#
sub winPb2_Terminate
#--------------------------#
{
  $winPb2->Hide();
  $win->Enable();
  $win->SetForegroundWindow();
  return(0);

}  #--- End winPb2_Terminate

#--------------------------#
sub winAlbums_Terminate
#--------------------------#
{
  return(-1);

}  #--- End winAlbums_Terminate

#--------------------------#
sub winFriends
#--------------------------#
{
  # Local variables
  my $saveDir = $winFriends->tfDirSaveFriends->Text();
  
  $THR = threads->create(sub {
    # Deal with crash
    $SIG{__DIE__} = sub {
      my $msgErr = $_[0];
      chomp($msgErr);
      $msgErr =~ s/[\t\r\n]/ /g;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
      Win32::GUI::MessageBox($winFriends, $STR{'err3'}, $STR{'err1T'}, 0x40010);
      threads->exit();
    };
    
    my $mech;
    eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
    if ($@) {
      if ($@ =~ /Failed to connect to/) {
        $winFriends->btnFriendsOk->Disable();
        Win32::GUI::MessageBox($winFriends, $STR{'err1'}, $STR{'err1T'}, 0x40010);
      }
      threads->exit();
    }

    # Valid current page
    $winFriends->tfFriendName->Text('');
    $winFriends->btnFriendsOk->Disable();
    $winFriends->lblInProgress->Text($STR{'wait'}.'...');
    $winFriends->ChangeCursor($HOURGLASS);
    my $currURL   = $mech->uri();
    my $currTitle = $mech->title();
    if ($currURL !~ /\/friends\/?$/ and $currURL !~ /\&sk=friends/) {
      # Trying to get the good page
      if ($currURL =~ /https:\/\/www.facebook.com\/profile.php\?id=([^\/\&]+)/) {
        my $profilID = $1;
        my $goodURL = "https://www.facebook.com/profile.php?id=$profilID&sk=friends";
        ($currURL, $currTitle) = &loadPage(\$mech, $goodURL);
      } elsif ($currURL =~ /https:\/\/www.facebook.com\/([^\/\?]+)/) {
        my $goodURL = "https://www.facebook.com/$1/friends";
        ($currURL, $currTitle) = &loadPage(\$mech, $goodURL);
      }
      
      # Re evaluate current page
      if (($currURL !~ /\/friends\/?$/ and $currURL !~ /\&sk=friends/) or $currTitle =~ /Page Not Found/) {
        $winFriends->btnFriendsOk->Disable();
        Win32::GUI::MessageBox($winFriends, $STR{'warn3'}, $STR{'warn2T'}, 0x40010);
        $winFriends->ChangeCursor($ARROW);
        $winFriends->lblInProgress->Text('');
        threads->exit();
      } else {
        &scrollToBottom(\$mech, $CONFIG{'TIME_TO_WAIT'});
        $currTitle =~ s/[\<\>\:\"\/\\\|\?\*]/-/g;
        $currTitle = encode("iso-8859-1", $currTitle);
        $winFriends->tfFriendName->Text("$currTitle - $STR{'friends'}");
      }
    # You are in the right page, scroll down to be sure
    } else {
      &scrollToBottom(\$mech, $CONFIG{'TIME_TO_WAIT'});
      $currTitle =~ s/[\<\>\:\"\/\\\|\?\*]/-/g;
      $currTitle = encode("iso-8859-1", $currTitle);
      $winFriends->tfFriendName->Text("$currTitle - $STR{'friends'}");
    }
    
    # Scroll to the top
    if ($winConfig->chOptScrollTop->Checked() == 1) {
      $mech->eval_in_page('window.scrollTo(0,0)');
    }
  
    $winFriends->ChangeCursor($ARROW);
    $winFriends->lblInProgress->Text('');
    
    # Ready ?
    &isDumpFriendsReady();
  });
  usleep(500000);
  $winFriends->Center();
  $winFriends->DoModal();

}  #--- End winFriends

#--------------------------#
sub tfFriendName_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winFriends->tfDirSaveFriends->Text();
  
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winFriends->chSaveFriendsDir->Checked() == 1) {
    $CONFIG{'DIR_SAVE_FRIENDS'} = $saveDir;
    &saveConfig(\%CONFIG);
  }
    
  # Ready ?
  &isDumpFriendsReady();

}  #--- End tfFriendName_Change

#--------------------------#
sub tfDirSaveFriends_Change
#--------------------------#
{
  # Local variables
  my $friendName = $winFriends->tfFriendName->Text();
  my $saveDir    = $winFriends->tfDirSaveFriends->Text();
  
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winFriends->chSaveFriendsDir->Checked() == 1) {
    $CONFIG{'DIR_SAVE_FRIENDS'} = $saveDir;
    &saveConfig(\%CONFIG);
  }
    
  # Ready ?
  &isDumpFriendsReady();

}  #--- End tfDirSaveFriends_Change

#--------------------------#
sub btnDirSaveFriends_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winFriends->tfDirSaveFriends->Text();
  my $dir;

  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) {
      while ($lastDir =~ /[^\\]$/) { chop($lastDir); }
    }
    $dir = $win->BrowseForFolder( -owner      => $winFriends       ,
                                  -title      => $STR{'selDir'}    ,
                                  -folderonly => 1                 ,
                                  -directory  => $lastDir          ,);
  } else {
    $dir = $win->BrowseForFolder( -owner      => $winFriends       ,
                                  -title      => $STR{'selDir'}    ,
                                  -folderonly => 1                 , );
  }

  # Selected folder
  if ($dir and -d $dir) {
    if ($dir =~ /\\$/) { chop($dir); }
    $winFriends->tfDirSaveFriends->Text($dir);
  }
  
}  #--- End btnDirSaveFriends_Click

#--------------------------#
sub chSaveFriendsDir_Click
#--------------------------#
{
  # Local variables
  my $dir = $winFriends->tfDirSaveFriends->Text();
  
  # If directory exists, save it
  if ($dir and -d $dir and $winFriends->chSaveFriendsDir->Checked() == 1) {
    $CONFIG{'REMEMBER_SAVE_FRIENDS'} = 1;
    $CONFIG{'DIR_SAVE_FRIENDS'} = $dir;
    &saveConfig(\%CONFIG);
  # Don't save
  } elsif ($winFriends->chSaveFriendsDir->Checked() == 0) {
    $CONFIG{'REMEMBER_SAVE_FRIENDS'} = 0;
    delete($CONFIG{'DIR_SAVE_FRIENDS'});
    &saveConfig(\%CONFIG);
  }

}  #--- End chSaveFriendsDir_Click

#--------------------------#
sub chIncludeIcons_Click
#--------------------------#
{
  # Save the choice
  if ($winFriends->chIncludeIcons->Checked() == 1) {
    $CONFIG{'FRIENDS_INCLUDE_ICONS'} = 1;
    &saveConfig(\%CONFIG);
  # Don't save
  } elsif ($winFriends->chIncludeIcons->Checked() == 0) {
    $CONFIG{'FRIENDS_INCLUDE_ICONS'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chIncludeIcons_Click

#--------------------------#
sub chFriendsOpenXLSX_Click
#--------------------------#
{
  # Save the choice
  if ($winFriends->chFriendsOpenXLSX->Checked() == 1) {
    $CONFIG{'FRIENDS_OPEN_XLSX'} = 1;
    &saveConfig(\%CONFIG);
  # Don't save
  } elsif ($winFriends->chFriendsOpenXLSX->Checked() == 0) {
    $CONFIG{'FRIENDS_OPEN_XLSX'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chFriendsOpenXLSX_Click

#--------------------------#
sub isDumpFriendsReady
#--------------------------#
{
  # Local variables
  my $saveDir    = $winFriends->tfDirSaveFriends->Text();
  my $friendName = $winFriends->tfFriendName->Text();
  
  # Valid directory and valid name for save ?
  if (!$saveDir or !(-d $saveDir) or !$friendName) { $winFriends->btnFriendsOk->Disable(); return(0); }

  $winFriends->btnFriendsOk->Enable();

}  #--- End isDumpFriendsReady


#--------------------------#
sub btnFriendsOk_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Local variables
    my $friendName = $winFriends->tfFriendName->Text();
    $friendName    =~ s/[\<\>\:\"\/\\\|\?\*]/-/g;
    my $saveDir    = $winFriends->tfDirSaveFriends->Text();
    my %profilOrder;
    my %profilUrl;
    my %profilImg;
    my %profilName;
    my %profilDetails;
    my $refProfilOrder   = \%profilOrder;
    my $refProfilUrl     = \%profilUrl;
    my $refProfilImg     = \%profilImg;
    my $refProfilName    = \%profilName;
    my $refProfilDetails = \%profilDetails;
    my $nbrRetries       = 0;
    my $count            = 0;
    my $step             = 1;

    if ($friendName and -d $saveDir) {
      # Start the thread
      $THR = threads->create(\&dumpFriends, $friendName, $saveDir, $refProfilOrder, $refProfilUrl, $refProfilImg, $refProfilName, $refProfilDetails, $nbrRetries, $count, $step);
      return(-1);
    } else { Win32::GUI::MessageBox($win, $STR{'err5'}, $STR{'err1T'}, 0x40010); }
  }

}  #--- End btnFriendsOk_Click

#--------------------------#
sub dumpFriends
#--------------------------#
{
  # Local variables
  my ($friendName, $saveDir, $refProfilOrder, $refProfilUrl, $refProfilImg, $refProfilName, $refProfilDetails, $nbrRetries, $count, $step) = @_;

  # Cancel button
  $SIG{'KILL'} = sub {
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'dumpFriendsC'});
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    &winPb2_Terminate;
    threads->exit();
  };
  
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    $win->ChangeCursor($ARROW);
    # Progress window
    $winPb2->lblPbCurr->Text('');
    # Retry 10 times
    $nbrRetries++;
    if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
      # Restart a new thread to continue
      $winPb2->lblPbCurr->Text($STR{'crash'}.'...');
      sleep(2);
      $THR = threads->create(\&dumpFriends, $friendName, $saveDir, $refProfilOrder, $refProfilUrl, $refProfilImg, $refProfilName, $refProfilDetails, $nbrRetries, $count, $step);
    } else {
      Win32::GUI::MessageBox($winPb2, $STR{'err2'}, $STR{'err1T'}, 0x40010);
    }
    # Kill this thread
    threads->exit();
  };

  # First execution
  if ($count == 0) {
    # Turn on progress bar
    $winPb2->Center();
    $winPb2->Show();
    $win->Disable();
    
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'dumpFriendsP'}.'...');
  }
  
  # Connect to current tab
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($winPb2, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }

  $winPb2->lblPbCurr->Text($STR{'dumpFriendsP'}.'...');

  # Create folders
  my $origURL      = $mech->uri;
  my $includeIcons = $winFriends->chIncludeIcons->Checked();
  if ($step == 1) {
    if (!-d "$saveDir\\temp") { mkdir("$saveDir\\temp"); }
    my $htmlPage = "$saveDir\\temp\\page.html";
    my $status = $mech->save_content($htmlPage, "$saveDir\\temp");
    if (!-d "$saveDir\\images_$friendName" and $includeIcons) { mkdir("$saveDir\\images_$friendName"); }
    while ($status->{currentState} != $status->{PERSIST_STATE_FINISHED}) { sleep(1); }
    
    # Parse html page
    open(my $tmp, $htmlPage);
    my $file_as_string = do { local $/ = <$tmp> };
    $file_as_string =~ s/[\r\n]//g;
    my $section1 = (split(/function\(Bootloader\)/, $file_as_string))[0];
    undef($file_as_string);
    if ($section1 =~ /class="_5q6s _8o _8t lfloat _ohe"/) {
      # Split page
      my @parts = split(/_5q6s _8o _8t lfloat _ohe/, $section1);
  
      # Parse each part
      my $i = 0;
      if ($count != 0) { $count--; }
      foreach my $part (@parts) {
        if ($i >= $count and $part =~ /" href="([^\&]+)&[^\>]+hovercard\/user.php\?id=([^\&]+)&[^\>]+><img class="_s0 _rv img" src="([^\"]+)" alt=""><\/a>/) {
          my $url = $1;
          my $id  = $2;
          my $img = $3;
          my $ImgFile = $img;
          
          $count++;
          $winPb2->lblPbCurr->Text("$STR{'friendsExtract'} $id...");
          $winPb2->lblCount->Text($count);
          
          if ($includeIcons) { # Include profile icons
            $ImgFile =~ s/[^\.]+\./$id\./; # Replace image name by profil id
            rcopy("$saveDir\\temp\\$img", "$saveDir\\images_$friendName\\$ImgFile"); # Copy image
            $$refProfilImg{$id} = "images_$friendName\\$ImgFile";
          }
          $$refProfilUrl{$id} = $url;
          $$refProfilOrder{$count} = $id;
          
          # Gather profil name
          my $url2 = quotemeta($url);
          if ($part =~ /<div class="fsl fwb fcb"><a href="$url2[^\>]+>([^\<]+)<\/a>/) {
            $$refProfilName{$id} = $1;
          }
          
          # Gather details (if available)
          if ($part =~ /<span class="_50hf fsm fwn">(.+)<\/span><\/li>/) {
            my $details = $1;
            $details =~ s/<[^\>]+>//g;
            $details = decode_entities($details);
            $$refProfilDetails{$id} = $details;
          }
        }
        $i++;
      }
    }
    close($tmp);
    $step = 2;
  }

  # Save in a XLSX file
  $winPb2->lblPbCurr->Text($STR{'createXLSX'}.'...');
  $winPb2->lblCount->Text('');
  my $nbrFriends = keys %{$refProfilOrder};
  if ($nbrFriends) {
    my $filename = "$saveDir\\$friendName\.xlsx";
    my $list     = Excel::Writer::XLSX->new($filename);    # Create the XLSX file
    my $sheet    = $list->add_worksheet($STR{'friends2'}); # Add a sheet
    # Formats 
    my $format = $list->add_format();
    $format->set_bold();
    $format->set_align( 'center' );
    $format->set_align( 'vcenter' );
    my $format2 = $list->add_format();
    $format2->set_align( 'center' );
    $format2->set_align( 'vcenter' );
    my $format3 = $list->add_format();
    $format3->set_align( 'top' );
    my $j = 0; # Column no
    # Headers
    if ($includeIcons) { $sheet->write( 0, $j, $STR{'image'}     , $format ); $j++; }
    $sheet->write( 0, $j, $STR{'profilID'}  , $format ); $j++;
    $sheet->write( 0, $j, $STR{'url'}       , $format ); $j++;
    $sheet->write( 0, $j, $STR{'name'}      , $format ); $j++;
    $sheet->write( 0, $j, $STR{'details'}   , $format ); $j++;
    if ($includeIcons) { $sheet->write( 0, $j, $STR{'imgPath'}   , $format ); $j++; }
    $sheet->write( 0, $j, $STR{'originURL'} , $format );
    # Create content
    my $i = 1; # Row no
    my $maxWidthCol2 = 0;
    my $maxWidthCol3 = 0;
    my $maxWidthCol4 = 0;
    my $maxWidthCol5 = 0;
    my $maxWidthCol6 = 0;
    my $maxWidthCol7 = length($origURL);
    foreach my $no (sort {$a <=> $b} keys %{$refProfilOrder}) {
      $j = 0;
      my $id = $$refProfilOrder{$no};
      # Image column
      if ($includeIcons) {
        my $imgPath = "$saveDir\\$$refProfilImg{$id}";
        my $info = image_info($imgPath);
        if (!$info->{error}) { $sheet->insert_image($i, $j, $imgPath); } # Ignore if not a valid image
        $sheet->set_row($i, 75.50);
        $j++;
      }
      # Profil ID column
      $sheet->write_string($i, $j, $id);
      $sheet->set_column($j, 6, undef, $format3);
      if (length($id) > $maxWidthCol2) { $maxWidthCol2 = length($id); }
      $j++;
      # URL column
      $sheet->write($i, $j, $$refProfilUrl{$id});
      if (length($$refProfilUrl{$id}) > $maxWidthCol3) { $maxWidthCol3 = length($$refProfilUrl{$id}); }
      $j++;
      # Name column
      if ($$refProfilName{$id}) {
        my $decName = decode('UTF-8', $$refProfilName{$id});
        $sheet->write($i, $j, $decName);
        if (length($$refProfilName{$id}) > $maxWidthCol4) { $maxWidthCol4 = length($$refProfilName{$id}); }
      }
      $j++;
      # Profil Details column
      if ($$refProfilDetails{$id}) {
        my $decDetails = decode('UTF-8', $$refProfilDetails{$id});
        $sheet->write($i, $j, $decDetails);
        if (length($$refProfilDetails{$id}) > $maxWidthCol5) { $maxWidthCol5 = length($$refProfilDetails{$id}); }
      }
      $j++;
      # Image Path column
      if ($includeIcons) {
        $sheet->write($i, $j, $$refProfilImg{$id});
        if (length($$refProfilImg{$id}) > $maxWidthCol6) { $maxWidthCol6 = length($$refProfilImg{$id}); }
        $j++;
      }
      # Original URL column
      $sheet->write($i, $j, $origURL);
      $i++;
    }
    # Ajust column size
    $j = 0;
    if ($includeIcons) { $sheet->set_column($j, $j, 13.70, $format2); $j++; }
    $sheet->set_column($j, $j, $maxWidthCol2); $j++;
    $sheet->set_column($j, $j, $maxWidthCol3); $j++;
    $sheet->set_column($j, $j, $maxWidthCol4); $j++;
    $sheet->set_column($j, $j, $maxWidthCol5); $j++;
    if ($includeIcons) { $sheet->set_column($j, $j, $maxWidthCol6); $j++; }
    $sheet->set_column($j, $j, $maxWidthCol7);
    $list->close(); # Close the file
    
    # Open the file
    if ($winFriends->chFriendsOpenXLSX->Checked() == 1) { $win->ShellExecute('open', $filename,'','',1); }
  }
  
  # Turn off progress bar
  $winPb2->lblPbCurr->Text('');
  $winPb2->lblCount->Text('');
  &winPb2_Terminate;
  
  # Delete temporary files
  if ($winConfig->chDelTempFiles->Checked() == 1) { remove_tree("$saveDir\\temp"); }

  $win->Tray->Change(-tip => $STR{'dumpFriendsF'});
  if (!$win->IsVisible()) {
    $win->Tray->Change( -balloon_icon  => 'info'               ,
                        -balloon_title => 'ExtractFace'        ,
                        -balloon_tip   => $STR{'dumpFriendsF'} , );
    $win->Tray->ShowBalloon(1);
  }
  $win->ChangeCursor($ARROW);

}  #--- End dumpFriends

#--------------------------#
sub winFriends_Terminate
#--------------------------#
{
  return(-1);

}  #--- End winFriends_Terminate

#--------------------------#
sub winEvent
#--------------------------#
{
  # Local variables
  my $saveDir = $winEvent->tfDirSaveEvent->Text();
  my $tempDir = "$PROGDIR\\temp";
  
  # Reset window
  $winEvent->tfEventID->Text('');
  $winEvent->tfAuthorID->Text('');
  $winEvent->tfDataURL->Text('');
  $winEvent->chGoing->Text('Going');
  $winEvent->chMaybe->Text('Maybe');
  $winEvent->chInvited->Text('Invited');
  $winEvent->chDeclined->Text('Declined');
  $winEvent->chGoing->Checked(1);
  $winEvent->chMaybe->Checked(1);
  $winEvent->chInvited->Checked(1);
  $winEvent->chDeclined->Checked(1);
  
  $THR = threads->create(sub {
    # Deal with crash
    $SIG{__DIE__} = sub {
      my $msgErr = $_[0];
      chomp($msgErr);
      $msgErr =~ s/[\t\r\n]/ /g;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
      Win32::GUI::MessageBox($winEvent, $STR{'err3'}, $STR{'err1T'}, 0x40010);
      threads->exit();
    };
    
    my $mech;
    eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
    if ($@) {
      if ($@ =~ /Failed to connect to/) {
        $winEvent->btnEventOk->Disable();
        Win32::GUI::MessageBox($winEvent, $STR{'err1'}, $STR{'err1T'}, 0x40010);
      }
      threads->exit();
    }
    my $title    = $mech->title();
    $title       =~ s/[\<\>\:\"\/\\\|\?\*]/-/g;
    my $decTitle = encode("iso-8859-1", $title);
    $winEvent->tfEventName->Text($decTitle);
    
    # Valid current page
    my $currURL = $mech->uri();
    my $idEvent;
    if ($currURL =~ /https:\/\/www.facebook.com\/events\/(\d+)\/?/) { $idEvent = $1; }
    else {
      $winEvent->btnEventOk->Disable();
      Win32::GUI::MessageBox($winEvent, $STR{'warn3'}, $STR{'warn2T'}, 0x40010);
      threads->exit();
    }

    $winEvent->ChangeCursor($HOURGLASS);
    $winEvent->lblInProgress->Text($STR{'gatherEvent'}.'...');
    
    # Gather event details
    my $eventDetailsURL = "https://www.facebook.com/events/ajax/guest_list/?acontext[ref]=51&acontext[source]=1&acontext[action_history]=[{%22surface%22%3A%22permalink%22%2C%22mechanism%22%3A%22surface%22%2C%22extra_data%22%3A[]}]&event_id=$idEvent&initial_tab=going&__pc=EXP1%3ADEFAULT&__asyncDialog=6&__a=1";
    if (!-d "$tempDir") { mkdir("$tempDir"); }
    my $localDataFile = "$tempDir\\data.txt";
    my $mechData = WWW::Mechanize::Firefox->new(create   => 1,
                                                autodie  => 0, );
    $mechData->get($eventDetailsURL, synchronize => 0);
    sleep($CONFIG{'TIME_TO_WAIT'});
    my $status = $mechData->save_content($localDataFile, $tempDir);
    while ($status->{currentState} != $status->{PERSIST_STATE_FINISHED}) { sleep(1); }
    
    # Parse html page
    open(my $tmp, $localDataFile);
    my $file_as_string = do { local $/ = <$tmp> };
    $file_as_string =~ s/[\r\n]//g;
    # Event ID
    if ($file_as_string =~ /"eventID":"([^\"]+)"/ ) { $winEvent->tfEventID->Text($1);  }
    # Author ID
    if ($file_as_string =~ /"authorID":"([^\"]+)"/) { $winEvent->tfAuthorID->Text($1); }
    # URL of content
    if ($file_as_string =~ /"prefetchURI":"([^\"]+)"/) {
      my $dataURL = $1;
      $dataURL =~ s#\\\/#\/#g;
      $dataURL =~ s/&amp;/&/g;
      $dataURL =~ s/\\u([[:xdigit:]]{4})/chr(hex $1)/eg;
      $dataURL = "https://www.facebook.com" . $dataURL . "&__pc=EXP1%3ADEFAULT&__a=1&__req=a";
      $winEvent->tfDataURL->Text($dataURL);
    }
    # Guest list name
    my %glText;
    if ($file_as_string =~ /"typeaheadSubtitles":{([^\}]+)}/) {
      my $data = $1;
      my @lists = split(/,/, $data);
      foreach (@lists) {
        my ($lname, $ltext) = split(/:/, $_);
        $lname =~ s/"//g;
        $ltext =~ s/"//g;
        $glText{$lname} = $ltext;
      }
    }
    # Guest list members count
    my %glCount;
    if ($file_as_string =~ /"adminRSVPNuxCount":0,"counts":{([^\}]+)}/) {
      my $data = $1;
      my @lists = split(/,/, $data);
      foreach (@lists) {
        my ($lname, $lcount) = split(/:/, $_);
        $lname =~ s/"//g;
        $glCount{$lname} = $lcount;
      }
    }
    close($tmp);
    # Adjust Guest list checkbox text
    if ($glCount{'going'}    and $glText{'going'}   ) { $winEvent->chGoing->Text("$glText{'going'} [$glCount{'going'}]");          }
    if ($glCount{'maybe'}    and $glText{'maybe'}   ) { $winEvent->chMaybe->Text("$glText{'maybe'} [$glCount{'maybe'}]");          }
    if ($glCount{'invited'}  and $glText{'invited'} ) { $winEvent->chInvited->Text("$glText{'invited'} [$glCount{'invited'}]");    }
    if ($glCount{'declined'} and $glText{'declined'}) { $winEvent->chDeclined->Text("$glText{'declined'} [$glCount{'declined'}]"); }
    
    # Delete temporary files
    if ($winConfig->chDelTempFiles->Checked() == 1) { remove_tree($tempDir); }
    
    $winEvent->lblInProgress->Text('');
    $winEvent->ChangeCursor($ARROW);
    
    # Ready ?
    &isDumpEventReady();
  });
  $winEvent->Center();
  $winEvent->DoModal();

}  #--- End winEvent

#--------------------------#
sub tfEventName_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winEvent->tfDirSaveEvent->Text();

  # Remember the save dir
  if ($saveDir and -d $saveDir and $winEvent->chSaveEventDir->Checked() == 1) {
    $CONFIG{'DIR_SAVE_EVENT'} = $saveDir;
    &saveConfig(\%CONFIG);
  }
    
  # Ready ?
  &isDumpEventReady();

}  #--- End tfEventName_Change

#--------------------------#
sub tfDirSaveEvent_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winEvent->tfDirSaveEvent->Text();
  
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winEvent->chSaveEventDir->Checked() == 1) {
    $CONFIG{'DIR_SAVE_EVENT'} = $saveDir;
    &saveConfig(\%CONFIG);
  }
    
  # Ready ?
  &isDumpEventReady();

}  #--- End tfDirSaveEvent_Change

#--------------------------#
sub btnDirSaveEvent_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winEvent->tfDirSaveEvent->Text();
  my $dir;

  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) {
      while ($lastDir =~ /[^\\]$/) { chop($lastDir); }
    }
    $dir = $win->BrowseForFolder( -owner      => $winEvent         ,
                                  -title      => $STR{'selDir'}    ,
                                  -folderonly => 1                 ,
                                  -directory  => $lastDir          ,);
  } else {
    $dir = $win->BrowseForFolder( -owner      => $winEvent         ,
                                  -title      => $STR{'selDir'}    ,
                                  -folderonly => 1                 , );
  }

  # Selected folder
  if ($dir and -d $dir) {
    if ($dir =~ /\\$/) { chop($dir); }
    $winEvent->tfDirSaveEvent->Text($dir);
  }
  
}  #--- End btnDirSaveEvent_Click

#--------------------------#
sub chSaveEventDir_Click
#--------------------------#
{
  # Local variables
  my $dir = $winEvent->tfDirSaveEvent->Text();
  
  # If directory exists, save it
  if ($dir and -d $dir and $winEvent->chSaveEventDir->Checked() == 1) {
    $CONFIG{'REMEMBER_SAVE_EVENT'} = 1;
    $CONFIG{'DIR_SAVE_EVENT'} = $dir;
    &saveConfig(\%CONFIG);
  # Don't save
  } elsif ($winEvent->chSaveEventDir->Checked() == 0) {
    $CONFIG{'REMEMBER_SAVE_EVENT'} = 0;
    delete($CONFIG{'DIR_SAVE_EVENT'});
    &saveConfig(\%CONFIG);
  }

}  #--- End chSaveEventDir_Click

#--------------------------#
sub chGoing_Click
#--------------------------#
{
  # Ready ?
  &isDumpEventReady();

}  #--- End chGoing_Click

#--------------------------#
sub chMaybe_Click
#--------------------------#
{
  # Ready ?
  &isDumpEventReady();

}  #--- End chMaybe_Click

#--------------------------#
sub chInvited_Click
#--------------------------#
{
  # Ready ?
  &isDumpEventReady();

}  #--- End chInvited_Click

#--------------------------#
sub chDeclined_Click
#--------------------------#
{
  # Ready ?
  &isDumpEventReady();

}  #--- End chDeclined_Click

#--------------------------#
sub isDumpEventReady
#--------------------------#
{
  # Local variables
  my $eventName = $winEvent->tfEventName->Text();
  my $saveDir   = $winEvent->tfDirSaveEvent->Text();
  
  # Valid directory and valid name for save ?
  if (!$saveDir or !(-d $saveDir) or !$eventName) {
    $winEvent->btnEventOk->Disable();
    return(0);
  }
  
  # No selected lists
  if ($winEvent->chGoing->Checked()   == 0 and $winEvent->chMaybe->Checked()    == 0 and
      $winEvent->chInvited->Checked() == 0 and $winEvent->chDeclined->Checked() == 0) {
    $winEvent->btnEventOk->Disable();
    return(0);
  }

  $winEvent->btnEventOk->Enable();

}  #--- End isDumpEventReady

#--------------------------#
sub chDownProfileIcons_Click
#--------------------------#
{
  # Save the choice
  if ($winEvent->chDownProfileIcons->Checked() == 1) {
    $CONFIG{'DOWN_PROFILE_ICONS'} = 1;
    &saveConfig(\%CONFIG);
  # Don't save
  } elsif ($winEvent->chDownProfileIcons->Checked() == 0) {
    $CONFIG{'DOWN_PROFILE_ICONS'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chDownProfileIcons_Click

#--------------------------#
sub chEventOpenXLSX_Click
#--------------------------#
{
  # Save the choice
  if ($winEvent->chEventOpenXLSX->Checked() == 1) {
    $CONFIG{'FRIENDS_OPEN_XLSX'} = 1;
    &saveConfig(\%CONFIG);
  # Don't save
  } elsif ($winEvent->chEventOpenXLSX->Checked() == 0) {
    $CONFIG{'FRIENDS_OPEN_XLSX'} = 0;
    &saveConfig(\%CONFIG);
  }

}  #--- End chEventOpenXLSX_Click

#--------------------------#
sub btnEventOk_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Local variables
    my $eventName = $winEvent->tfEventName->Text();
    $eventName    =~ s/[\<\>\:\"\/\\\|\?\*]/-/g;
    my $saveDir   = $winEvent->tfDirSaveEvent->Text();
    my %profilUrl;
    my %profilImg;
    my %profilName;
    my %selectedLists;
    my $refProfilUrl     = \%profilUrl;
    my $refProfilImg     = \%profilImg;
    my $refProfilName    = \%profilName;
    my $refSelectedLists = \%selectedLists;
    my $nbrRetries       = 0;
    my $count            = 0;
    my $step             = 1;

    if ($eventName and -d $saveDir) {
      # Start the thread
      $THR = threads->create(\&dumpEvent, $eventName, $saveDir, $refProfilUrl, $refProfilImg, $refProfilName, $refSelectedLists, $nbrRetries, $count, $step);
      return(-1);
    } else { Win32::GUI::MessageBox($win, $STR{'err5'}, $STR{'err1T'}, 0x40010); }
  }

}  #--- End btnEventOk_Click

#--------------------------#
sub dumpEvent
#--------------------------#
{
  # Local variables
  my ($eventName, $saveDir, $refProfilUrl, $refProfilImg, $refProfilName, $refSelectedLists, $nbrRetries, $count, $step) = @_;

  # Cancel button
  $SIG{'KILL'} = sub {
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'dumpEventC'});
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    &winPb2_Terminate;
    threads->exit();
  };
  
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    $win->ChangeCursor($ARROW);
    # Progress window
    $winPb2->lblPbCurr->Text('');
    # Retry 10 times
    $nbrRetries++;
    if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
      # Restart a new thread to continue
      $winPb2->lblPbCurr->Text($STR{'crash'}.'...');
      sleep(2);
      $THR = threads->create(\&dumpEvent, $eventName, $saveDir, $refProfilUrl, $refProfilImg, $refProfilName, $refSelectedLists, $nbrRetries, $count, $step);
    } else {
      $winPb2->lblPbCurr->Text($STR{'err2'});
      Win32::GUI::MessageBox($winPb2, $STR{'err2'}, $STR{'err1T'}, 0x40010);
    }
    # Kill this thread
    threads->exit();
  };

  # First execution
  if ($count == 0) {
    # Turn on progress bar
    $winPb2->Center();
    $winPb2->Show();
    $win->Disable();
    
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'dumpEventP'}.'...');
    
    # Selected list
    if ($winEvent->chGoing->Checked()    == 1) { $$refSelectedLists{'going'}    = 1; }
    if ($winEvent->chMaybe->Checked()    == 1) { $$refSelectedLists{'maybe'}    = 1; }
    if ($winEvent->chInvited->Checked()  == 1) { $$refSelectedLists{'invited'}  = 1; }
    if ($winEvent->chDeclined->Checked() == 1) { $$refSelectedLists{'declined'} = 1; }
  }
  
  # Connect to current tab
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($winPb2, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  
  # Target url
  my $currURL   = $mech->uri();
  my $targetURL = $winEvent->tfDataURL->Text();
  if ($step == 1) {
    if ($targetURL) {
      $winPb2->lblPbCurr->Text($STR{'dumpEventP'}.'...');
    
      # Download the data
      if (!-d "$saveDir\\temp") { mkdir("$saveDir\\temp"); }
      if (!-d "$saveDir\\images_$eventName") { mkdir("$saveDir\\images_$eventName"); }
      my $localDataFile = "$saveDir\\temp\\data.txt";
      my $mechData = WWW::Mechanize::Firefox->new(create   => 1,
                                                  autodie  => 0, );
      $mechData->get($targetURL, synchronize => 0);
      sleep($CONFIG{'TIME_TO_WAIT'}+2);
      my $status = $mechData->save_content($localDataFile, "$saveDir\\temp");
      while ($status->{currentState} != $status->{PERSIST_STATE_FINISHED}) { sleep(1); }
      
      # Parse the data
      open(my $tmp, $localDataFile);
      my $data = do { local $/ = <$tmp> };
      close($tmp);
      $data =~ s/[\r\n]//g;
      my @tabData = split(/},/, $data);
      undef $data;
      foreach my $line (@tabData) {
        my %memberData;
        if ($line =~ /{("uniqueID":[^\}]+)}/) {
          my @fields = split(/,/, $1);
          foreach my $field (@fields) {
            my ($key, $value) = split(/:[^\\]/, $field);
            $key   =~ s/"//g;
            $value =~ s/"//g;
            $memberData{$key} = $value;
          }
          # Save member data
          if ($memberData{'uniqueID'} and $memberData{'tab'} and
              exists($$refSelectedLists{$memberData{'tab'}}) and
              !exists($$refProfilUrl{$memberData{'tab'}}{$memberData{'uniqueID'}})) {
            $count++;
            $winPb2->lblCount->Text($count);
            # Profil URL
            if ($memberData{'uri'}) {
              $memberData{'uri'} =~ s#\\\/#\/#g;
              $$refProfilUrl{$memberData{'tab'}}{$memberData{'uniqueID'}} = $memberData{'uri'};
            }
            # Profil Img
            if ($memberData{'photo'}) {
              $memberData{'photo'} =~ s#\\\/#\/#g;
              $memberData{'photo'} =~ s/&amp;/&/g;
              $$refProfilImg{$memberData{'tab'}}{$memberData{'uniqueID'}} = $memberData{'photo'};
              # Download the image
              if ($winEvent->chDownProfileIcons->Checked() == 1) {
                if (!-e("$saveDir\\images_$eventName\\$memberData{'uniqueID'}\.jpg")) {
                  $mechData->save_url($memberData{'photo'}, "$saveDir\\images_$eventName\\$memberData{'uniqueID'}\.jpg", "progress" => {});
                }
              }
            }
            # Profil Name
            if ($memberData{'title'}) {
              my $name = $memberData{'title'};
              $name =~ s/\\u([[:xdigit:]]{4})/chr(hex $1)/eg;
              $name = encode('utf8', $name);
              $$refProfilName{$memberData{'tab'}}{$memberData{'uniqueID'}} = $name;
            }
          }
        }
      }
      $step = 2;
    } else {
      Win32::GUI::MessageBox($winPb2, $STR{'err6'}, $STR{'err1T'}, 0x40010);
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => $STR{'dumpEventC'});
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      &winPb2_Terminate;
      threads->exit();
    }
  }
  
  # Check profile icons
  if ($winEvent->chDownProfileIcons->Checked() == 1 and $step == 2) {
    $winPb2->lblPbCurr->Text($STR{'checkIcons'}.'...');
    my $count2 = 0;
    foreach my $guestList (sort keys %{$refProfilUrl}) {
      foreach my $id (keys $$refProfilUrl{$guestList}) {
        $count2++;
        $winPb2->lblCount->Text($count2);
        my $imgPath = "$saveDir\\images_$eventName\\$id\.jpg";
        if (!-e $imgPath and $$refProfilImg{$guestList}{$id}) { # Profile icon doesn't exist, try to download
          $mech->save_url($$refProfilImg{$guestList}{$id}, "$saveDir\\images_$eventName\\$id\.jpg");
        }
        # Check again
        if (-e $imgPath) { # Profile icon exists, check infos
          my $info = image_info($imgPath);
          my $dim;
          if (!$info->{error}) { $dim = dim($info); } # No error, get dim
          if (($info->{error} or !$dim) and $$refProfilImg{$guestList}{$id}) { # Error with the image or no dim, try to download again
            unlink("$saveDir\\images_$eventName\\$id\.jpg");
            $mech->save_url($$refProfilImg{$guestList}{$id}, "$saveDir\\images_$eventName\\$id\.jpg");
            $info = image_info($imgPath);
          }
          # No error, replace profile icon URL by profile icon path
          if (!$info->{error}) {
            $dim = dim($info);
            if ($dim) { $$refProfilImg{$guestList}{$id} = "images_$eventName\\$id\.jpg"; }
          }
        }
      }
    }
    $step = 3;
  }
  
  # Save in a XLSX file
  $winPb2->lblPbCurr->Text($STR{'createXLSX'}.'...');
  my $nbrMembers = keys %{$refProfilImg};
  if ($nbrMembers) {
    my $filename = "$saveDir\\$eventName\.xlsx";
    my $list  = Excel::Writer::XLSX->new($filename); # Create the XLSX file
    
    # A sheet for each guest list
    foreach my $guestList (sort keys %{$refProfilUrl}) {
      my $sheet = $list->add_worksheet($guestList); # Add a sheet
      # Formats 
      my $format = $list->add_format();
      $format->set_bold();
      $format->set_align( 'center' );
      $format->set_align( 'vcenter' );
      my $format2 = $list->add_format();
      $format2->set_align( 'center' );
      $format2->set_align( 'vcenter' );
      my $format3 = $list->add_format();
      $format3->set_align( 'top' );
      # Headers
      $sheet->write( 0, 0, $STR{'image'}    , $format );
      $sheet->write( 0, 1, $STR{'profilID'} , $format );
      $sheet->write( 0, 2, $STR{'url'}      , $format );
      $sheet->write( 0, 3, $STR{'name'}     , $format );
      $sheet->write( 0, 4, $STR{'imgPath2'} , $format );
      $sheet->write( 0, 5, $STR{'eventURL'} , $format );
      # Create content
      my $i = 1;
      my $maxWidthCol2 = 0;
      my $maxWidthCol3 = 0;
      my $maxWidthCol4 = 0;
      my $maxWidthCol5 = 0;
      my $maxWidthCol6 = length($currURL);
      foreach my $id (keys $$refProfilUrl{$guestList}) {
        # Image column
        if ($winEvent->chDownProfileIcons->Checked() == 1 and -e "$saveDir\\$$refProfilImg{$guestList}{$id}") {
          my $info = image_info("$saveDir\\$$refProfilImg{$guestList}{$id}");
          if (!$info->{error}) { # Insert only if image is not corrupted
            $sheet->insert_image($i, 0, "$saveDir\\$$refProfilImg{$guestList}{$id}");
            $sheet->set_row($i, 30);
          }
        }
        # Profil ID column
        $sheet->write_string($i, 1, $id);
        $sheet->set_column(1, 5, undef, $format3);
        if (length($id) > $maxWidthCol2) { $maxWidthCol2 = length($id); }
        # URL column
        $sheet->write($i, 2, $$refProfilUrl{$guestList}{$id});
        if (length($$refProfilUrl{$guestList}{$id}) > $maxWidthCol3) { $maxWidthCol3 = length($$refProfilUrl{$guestList}{$id}); }
        # Name column
        if ($$refProfilName{$guestList}{$id}) {
          my $utf8Name = decode_utf8($$refProfilName{$guestList}{$id});
          my $decName  = encode("iso-8859-1", $utf8Name);
          $sheet->write($i, 3, $decName);
          if (length($decName) > $maxWidthCol4) { $maxWidthCol4 = length($decName); }
        }
        # Image Path column
        $sheet->write($i, 4, $$refProfilImg{$guestList}{$id});
        if (length($$refProfilImg{$guestList}{$id}) > $maxWidthCol5) { $maxWidthCol5 = length($$refProfilImg{$guestList}{$id}); }
        # Original URL column
        $sheet->write($i, 5, $currURL);
        $i++;
      }
      # Ajust column size
      $sheet->set_column(0, 0, 5, $format2);
      $sheet->set_column(1, 1, $maxWidthCol2);
      $sheet->set_column(2, 2, $maxWidthCol3);
      $sheet->set_column(3, 3, $maxWidthCol4);
      $sheet->set_column(4, 4, $maxWidthCol5);
      $sheet->set_column(5, 5, $maxWidthCol6);
    }
    
    $list->close(); # Close XLSX file
    
    # Open the file
    if ($winEvent->chEventOpenXLSX->Checked() == 1) { $win->ShellExecute('open', $filename,'','',1); }
  }

  # Turn off progress bar
  $winPb2->lblPbCurr->Text('');
  $winPb2->lblCount->Text('');
  &winPb2_Terminate;
  
  # Delete temporary files
  if ($winConfig->chDelTempFiles->Checked() == 1) { remove_tree("$saveDir\\temp"); }

  $win->Tray->Change(-tip => $STR{'dumpEventF'});
  if (!$win->IsVisible()) {
    $win->Tray->Change( -balloon_icon  => 'info'             ,
                        -balloon_title => 'ExtractFace'      ,
                        -balloon_tip   => $STR{'dumpEventF'} , );
    $win->Tray->ShowBalloon(1);
  }
  $win->ChangeCursor($ARROW);

}  #--- End dumpEvent

#--------------------------#
sub winEvent_Terminate
#--------------------------#
{
  return(-1);

}  #--- End winEvent_Terminate

#--------------------------#
sub scrollChat
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Start the thread
    my $nbrRetries = 0;
    my $count      = 0;
    $THR = threads->create(\&scrollChatThr, $nbrRetries, $count);
  }
}  #--- End scrollChat

#--------------------------#
sub scrollChatThr
#--------------------------#
{
  # Local variables
  my ($nbrRetries, $count) = @_;
  
  # Cancel button
  $SIG{'KILL'} = sub {
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    &winPb2_Terminate;
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'scrollChatC'});
    threads->exit();
  };
  
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($msgErr =~ /problem connecting/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    } else {
      # Retry 10 times
      $nbrRetries++;
      if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
        # Restart a new thread to continue
        $winPb2->lblPbCurr->Text($STR{'crash'}.'...');
        sleep(2);
        $THR = threads->create(\&scrollChatThr, $nbrRetries, $count);
      } else {
        Win32::GUI::MessageBox($win, $STR{'err2'}, $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
      }
    }
    threads->exit();
  };

  # First execution
  if ($nbrRetries == 0) {
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'scrollChatP'}.'...');
    
    # Turn on progress bar
    $winPb2->Center();
    $winPb2->Show();
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    $win->Disable();
  }
  
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  
  $winPb2->lblPbCurr->Text($STR{'scrollChatP'}.'...');
  my $maxScroll = $winConfig->tfMaxLoading->Text();
  my @textLinkValues = split(/\|/, $CONFIG{'SCROLL_TEXT_REGULAR'});
  while (1) {
    if ($maxScroll and $count >= $maxScroll) { last; } # Maximum scrolling reached
    #$mech->eval_in_page("var el = document.getElementsByClassName('_7hy'); for (var i=0;i<el.length; i++) { el[i].click(); }");
    $mech->eval_in_page("var el = document.getElementsByClassName('pam uiBoxLightblue uiMorePagerPrimary'); for (var i=0;i<el.length; i++) { el[i].click(); }");
    my ($value, $type) = $mech->eval("document.getElementsByClassName('_7hy')[0].innerHTML");
    my $left;
    # English: Loadi?n?g? Older Messages\.{0,3}
    # French: Charger les anciens messages
    foreach (@textLinkValues) { if ($value =~ /$_ \(<span>(\d+)<\/span>\)/) { $left = $1; } }
    if ($left) {
      $winPb2->lblCount->Text($left);
      $count++;
    } else { last; }
  }
  
  # Turn off progress bar
  $winPb2->lblPbCurr->Text('');
  $winPb2->lblCount->Text('');
  &winPb2_Terminate;
  
  $win->Tray->Change(-tip => $STR{'scrollChatF'});
  if (!$win->IsVisible()) {
    $win->Tray->Change( -balloon_icon  => 'info'              ,
                        -balloon_title => 'ExtractFace'       ,
                        -balloon_tip   => $STR{'scrollChatF'} , );
    $win->Tray->ShowBalloon(1);
  }
  $win->ChangeCursor($ARROW);

}  #--- End scrollChatThr

#--------------------------#
sub loadNewMsg
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Start the thread
    my $nbrRetries = 0;
    my $count      = 0;
    $THR = threads->create(\&loadNewMsgThr, $nbrRetries, $count);
  }
}  #--- End loadNewMsg

#--------------------------#
sub loadNewMsgThr
#--------------------------#
{
  # Local variables
  my ($nbrRetries, $count) = @_;
  
  # Cancel button
  $SIG{'KILL'} = sub {
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    &winPb2_Terminate;
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'scrollChat2C'});
    threads->exit();
  };
  
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($msgErr =~ /problem connecting/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    } else {
      # Retry 10 times
      $nbrRetries++;
      if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
        # Restart a new thread to continue
        $winPb2->lblPbCurr->Text($STR{'crash'}.'...');
        sleep(2);
        $THR = threads->create(\&loadNewMsgThr, $nbrRetries, $count);
      } else {
        Win32::GUI::MessageBox($win, $STR{'err2'}, $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
      }
    }
    threads->exit();
  };

  # First execution
  if ($nbrRetries == 0) {
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'scrollChat2P'}.'...');
    
    # Turn on progress bar
    $winPb2->Center();
    $winPb2->Show();
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    $win->Disable();
  }
  
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  
  $winPb2->lblPbCurr->Text($STR{'scrollChat2P'}.'...');
  my $maxScroll = $winConfig->tfMaxLoading->Text();
  my @textLinkValues = split(/\|/, $CONFIG{'SCROLL_TEXT_NEWER'});
  while (1) {
    if ($maxScroll and $count >= $maxScroll) { last; } # Maximum scrolling reached
    my ($value, $type) = $mech->eval("document.getElementsByClassName('clearfix mbs uiMorePager stat_elem _3hh hidden_elem _52jv')[0]");
    if (!$value) {
      for my $el ($mech->clickables) {
        my $text = $el->{innerHTML};
        # English: Load Newer Messages
        # French: Charger les nouveaux messages
        foreach (@textLinkValues) {
          if ($text =~ /$_/) {
            $el->__click;
            $count++;
            $winPb2->lblCount->Text($count);
            last;
          }
        }
      }
      sleep($CONFIG{'TIME_TO_WAIT'});
    } else { last; }
  }
  
  # Turn off progress bar
  $winPb2->lblPbCurr->Text('');
  $winPb2->lblCount->Text('');
  &winPb2_Terminate;
  
  $win->Tray->Change(-tip => $STR{'scrollChat2F'});
  if (!$win->IsVisible()) {
    $win->Tray->Change( -balloon_icon  => 'info'               ,
                        -balloon_title => 'ExtractFace'        ,
                        -balloon_tip   => $STR{'scrollChat2F'} , );
    $win->Tray->ShowBalloon(1);
  }
  $win->ChangeCursor($ARROW);

}  #--- End loadNewMsgThr

#--------------------------#
sub loadOldMsg
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Start the thread
    my $nbrRetries = 0;
    my $count      = 0;
    $THR = threads->create(\&loadOldMsgThr, $nbrRetries, $count);
  }
}  #--- End loadOldMsg

#--------------------------#
sub loadOldMsgThr
#--------------------------#
{
  # Local variables
  my ($nbrRetries, $count) = @_;
  
  # Cancel button
  $SIG{'KILL'} = sub {
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    &winPb2_Terminate;
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'scrollChat3C'});
    threads->exit();
  };
  
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    if ($msgErr =~ /problem connecting/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
    } else {
      # Retry 10 times
      $nbrRetries++;
      if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
        # Restart a new thread to continue
        $winPb2->lblPbCurr->Text($STR{'crash'}.'...');
        sleep(2);
        $THR = threads->create(\&loadOldMsgThr, $nbrRetries, $count);
      } else {
        Win32::GUI::MessageBox($win, $STR{'err2'}, $STR{'err1T'}, 0x40010);
      # Turn off progress bar
      $winPb2->lblPbCurr->Text('');
      $winPb2->lblCount->Text('');
      &winPb2_Terminate;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
      }
    }
    threads->exit();
  };

  # First execution
  if ($nbrRetries == 0) {
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'scrollChat3P'}.'...');
    
    # Turn on progress bar
    $winPb2->Center();
    $winPb2->Show();
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    $win->Disable();
  }
  
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($win, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
  
  $winPb2->lblPbCurr->Text($STR{'scrollChat3P'}.'...');
  my $maxScroll = $winConfig->tfMaxLoading->Text();
  my @textLinkValues = split(/\|/, $CONFIG{'SCROLL_TEXT_OLDER'});
  while (1) {
    if ($maxScroll and $count >= $maxScroll) { last; } # Maximum scrolling reached
    my ($value, $type) = $mech->eval("document.getElementsByClassName('clearfix mbs uiMorePager stat_elem _3hg hidden_elem _52jv')[0]");
    if (!$value) {
      for my $el ($mech->clickables) {
        my $text = $el->{innerHTML};
        # English: Load Older Messages
        # French: Charger des messages plus anciens
        foreach (@textLinkValues) {
          if ($text =~ /$_/) {
            $el->__click;
            $count++;
            $winPb2->lblCount->Text($count);
            last;
          }
        }
      }
      sleep($CONFIG{'TIME_TO_WAIT'});
    } else { last; }
  }
  
  # Turn off progress bar
  $winPb2->lblPbCurr->Text('');
  $winPb2->lblCount->Text('');
  &winPb2_Terminate;
  
  $win->Tray->Change(-tip => $STR{'scrollChat3F'});
  if (!$win->IsVisible()) {
    $win->Tray->Change( -balloon_icon  => 'info'               ,
                        -balloon_title => 'ExtractFace'        ,
                        -balloon_tip   => $STR{'scrollChat3F'} , );
    $win->Tray->ShowBalloon(1);
  }
  $win->ChangeCursor($ARROW);
  
}  #--- End loadOldMsgThr

#--------------------------#
sub winChat
#--------------------------#
{
  $THR = threads->create(sub {
    # Deal with crash
    $SIG{__DIE__} = sub {
      my $msgErr = $_[0];
      chomp($msgErr);
      $msgErr =~ s/[\t\r\n]/ /g;
      $win->ChangeCursor($ARROW);
      $win->Tray->Change(-tip => 'ExtractFace');
      Win32::GUI::MessageBox($winChat, $STR{'err3'}, $STR{'err1T'}, 0x40010);
      threads->exit();
    };
    
    my $mech;
    eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
    if ($@) {
      if ($@ =~ /Failed to connect to/) {
        $winChat->btnChatOk->Disable();
        Win32::GUI::MessageBox($winChat, $STR{'err1'}, $STR{'err1T'}, 0x40010);
      }
      threads->exit();
    }

    my $currURL  = $mech->uri();
    if ($currURL =~ /https:\/\/www.facebook.com\/messages\/[^\/]+\/?/) {
      my $title    = $mech->title();
      $title       =~ s/[\<\>\:\"\/\\\|\?\*]/-/g;
      my $decTitle = encode("iso-8859-1", $title);
      $winChat->tfChatName->Text($decTitle);
    } else {
      $winChat->btnChatOk->Disable();
      Win32::GUI::MessageBox($winChat, $STR{'warn3'}, $STR{'warn2T'}, 0x40010);
      threads->exit();
    }
    
    # Ready ?
    &isDumpChatReady();
  });
  usleep(500000);
  $winChat->Center($win);
  $winChat->DoModal();

}  #--- End winChat

#--------------------------#
sub tfChatName_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winChat->tfDirSaveChat->Text();

  # Remember the save dir
  if ($saveDir and -d $saveDir and $winChat->chSaveChatDir->Checked() == 1) {
    $CONFIG{'DIR_SAVE_CHAT'} = $saveDir;
    &saveConfig(\%CONFIG);
  }
    
  # Ready ?
  &isDumpChatReady();

}  #--- End tfChatName_Change

#--------------------------#
sub tfDirSaveChat_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winChat->tfDirSaveChat->Text();
  
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winChat->chSaveChatDir->Checked() == 1) {
    $CONFIG{'DIR_SAVE_CHAT'} = $saveDir;
    &saveConfig(\%CONFIG);
  }
    
  # Ready ?
  &isDumpChatReady();

}  #--- End tfDirSaveChat_Change

#--------------------------#
sub btnDirSaveChat_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winChat->tfDirSaveChat->Text();
  my $dir;

  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) {
      while ($lastDir =~ /[^\\]$/) { chop($lastDir); }
    }
    $dir = $win->BrowseForFolder( -owner      => $winChat                ,
                                  -title      => $STR{'selDir'}          ,
                                  -folderonly => 1                       ,
                                  -directory  => $lastDir                ,);
  } else {
    $dir = $win->BrowseForFolder( -owner      => $winChat                ,
                                  -title      => $STR{'selDir'}          ,
                                  -folderonly => 1                       , );
  }

  # Selected folder
  if ($dir and -d $dir) {
    if ($dir =~ /\\$/) { chop($dir); }
    $winChat->tfDirSaveChat->Text($dir);
  }
  
}  #--- End btnDirSaveChat_Click

#--------------------------#
sub chSaveChatDir_Click
#--------------------------#
{
  # Local variables
  my $dir = $winChat->tfDirSaveChat->Text();
  
  # If directory exists, save it
  if ($dir and -d $dir and $winChat->chSaveChatDir->Checked() == 1) {
    $CONFIG{'REMEMBER_SAVE_CHAT'} = 1;
    $CONFIG{'DIR_SAVE_CHAT'} = $dir;
    &saveConfig(\%CONFIG);
  # Don't save
  } elsif ($winChat->chSaveChatDir->Checked() == 0) {
    $CONFIG{'REMEMBER_SAVE_CHAT'} = 1;
    delete($CONFIG{'DIR_SAVE_CHAT'});
    &saveConfig(\%CONFIG);
  }

}  #--- End chSaveChatDir_Click

#--------------------------#
sub chDownloadAD_Click
#--------------------------#
{
  if ($winChat->chDownloadAD->Checked() == 1) {
    $winChat->chDownloadImg->Enable();
  } else {
    $winChat->chDownloadImg->Checked(0);
    $winChat->chDownloadImg->Disable();
  }

}  #--- End chDownloadAD_Click

#--------------------------#
sub isDumpChatReady
#--------------------------#
{
  # Local variables
  my $chatName = $winChat->tfChatName->Text();
  my $saveDir  = $winChat->tfDirSaveChat->Text();
  
  # Valid directory and valid name for save ?
  if (!$saveDir or !(-d $saveDir) or !$chatName) { $winChat->btnChatOk->Disable(); return(0); }

  $winChat->btnChatOk->Enable();

}  #--- End isDumpChatReady


#--------------------------#
sub btnChatOk_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) {
    Win32::GUI::MessageBox($win, $STR{'warn1'},$STR{'warn1T'},0x40010);
  } else {
    # Local variables
    my $chatName = $winChat->tfChatName->Text();
    my $saveDir  = $winChat->tfDirSaveChat->Text();
    $chatName    =~ s/[\<\>\:\"\/\\\|\?\*]/-/g;
    my $startText;
    my %msgProfileImg;
    my %msgProfileUrl;
    my %msgProfileName;
    my %msgIsText;
    my %msgText;
    my $refMsgProfileImg  = \%msgProfileImg;
    my $refMsgProfileUrl  = \%msgProfileUrl;
    my $refMsgProfileName = \%msgProfileName;
    my $refMsgIsText      = \%msgIsText;
    my $refMsgText        = \%msgText;
    my $nbrRetries        = 0;
    my $count             = 0;
    my $step              = 1;
    my $lastDateUTime;

    if ($chatName and -d $saveDir) {
      # Start the thread
      $THR = threads->create(\&dumpChat, $chatName, $saveDir, $refMsgProfileImg, $refMsgProfileUrl, $refMsgProfileName, $refMsgIsText, $refMsgText,
                             $startText, $nbrRetries, $count, $step, $lastDateUTime);
      return(-1);
    } else { Win32::GUI::MessageBox($win, $STR{'err5'}, $STR{'err1T'}, 0x40010); }
  }

}  #--- End btnChatOk_Click

#--------------------------#
sub dumpChat
#--------------------------#
{
  # Local variables
  my ($chatName, $saveDir, $refMsgProfileImg, $refMsgProfileUrl, $refMsgProfileName, $refMsgIsText, $refMsgText, $startText, $nbrRetries, $count, $step, $lastDateUTime) = @_;
  my $imgDir        = "$saveDir\\images_$chatName";
  my $vidDir        = "$saveDir\\videos_$chatName";
  my $tmpDir        = "$saveDir\\temp";
  my $htmlPage      = "$tmpDir\\page.html";
  my $haveEmoticon  = 0;
  my $emoticonDL    = 0;
  my $cssSprite     = 0;
  my $spriteDL      = 0;
  my @emoticons;
  my @stickers16;

  # Cancel button
  $SIG{'KILL'} = sub {
    $win->ChangeCursor($ARROW);
    $win->Tray->Change(-tip => $STR{'dumpChatC'});
    # Turn off progress bar
    $winPb2->lblPbCurr->Text('');
    &winPb2_Terminate;
    threads->exit();
  };
  
  # Deal with crash
  $SIG{__DIE__} = sub {
    my $msgErr = $_[0];
    chomp($msgErr);
    $msgErr =~ s/[\t\r\n]/ /g;
    $win->ChangeCursor($ARROW);
    # Progress window
    $winPb2->lblPbCurr->Text('');
    # Retry 10 times
    $nbrRetries++;
    if ($nbrRetries < $CONFIG{'NBR_RESUME'}) {
      # Restart a new thread to continue
      $winPb2->lblPbCurr->Text($STR{'crash'}.'...');
      sleep(2);
      $THR = threads->create(\&dumpChat, $chatName, $saveDir, $refMsgProfileImg, $refMsgProfileUrl, $refMsgProfileName, $refMsgIsText, $refMsgText,
                             $startText, $nbrRetries, $count, $step, $lastDateUTime);
    } else {
      $winPb2->lblPbCurr->Text($STR{'err2'});
      Win32::GUI::MessageBox($winPb2, $STR{'err2'}, $STR{'err1T'}, 0x40010);
    }
    # Kill this thread
    threads->exit();
  };

  # First execution
  if ($count == 0) {
    # Turn on progress bar
    $winPb2->Center();
    $winPb2->Show();
    $win->Disable();
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    
    $win->ChangeCursor($HOURGLASS);
    $win->Tray->Change(-tip => $STR{'dumpChatP'}.'...');
  }
  
  # Connect to current tab
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
  if ($@) {
    if ($@ =~ /Failed to connect to/) {
      Win32::GUI::MessageBox($winPb2, $STR{'err1'}, $STR{'err1T'}, 0x40010);
    }
    threads->exit();
  }
   
  $winPb2->lblPbCurr->Text($STR{'dumpChatP'}.'...');

  # Create folders and save the page
  my $origURL = $mech->uri;
  my $profilID; if ($origURL =~ /messages\/(?:search\/)?([^?#]+)\#?/) { $profilID = $1; } # $profilID is the profil ID of the interlocutor
  if ($step == 1) {
    if (!-d $tmpDir) { mkdir($tmpDir); }
    if (!-d $imgDir) { mkdir($imgDir); }
    my $status = $mech->save_content($htmlPage, $tmpDir);
    while ($status->{currentState} != $status->{PERSIST_STATE_FINISHED}) { sleep(1); }
    $step = 2; # Page have been saved
  }
  
  # Parse html page
  if ($step == 2) {
    open(my $tmp, $htmlPage);
    my $file_as_string = do { local $/ = <$tmp> };
    $file_as_string =~ s/[\r\n]//g;
    my @sections = split(/function\(Bootloader\)/, $file_as_string);
    undef($file_as_string);
    if ($sections[0] =~ /<li class="_2n3"><abbr data-utime="0" class="timestamp" data-jsid="timestamp">([^\<]+)<\/abbr><\/li>/) {
      if ($winChat->chSearched->Checked() == 0) { $startText = $1; }
      my $searchedPart = 0;
  
      # Split page
      my @parts;
      if ($sections[0] =~ /<div class="_2w7 _8o _8t lfloat _ohe">/) { @parts = split(/_2w7 _8o _8t lfloat _ohe/, $sections[0]); }
  
      # Parse each part
      foreach my $part (@parts) {
        
        # Gather sender details
        if ($part =~ /^"><a href="([^\"]+)"[^\>]+data-reactid=[^\>]+><img alt="([^\"]+)" src="([^\"]+)/ or
            $part =~ /^"><a href="([^\"]+)"[^\>]+data-reactroot=[^\>]+><img[^\>]+alt="([^\"]+)"[^\>]+src="([^\"]+)/ or
            $part =~ /^"><a href="([^\"]+)"[^\>]+data-reactroot=[^\>]+><img[^\>]+src="([^\"]+)"[^\>]+alt="([^\"]+)/ or
            $part =~ /^"><img[^\>]+src="([^\"]+)"[^\>]+alt="([^\"]+)"/ or
            $part =~ /^"><img[^\>]+src="([^\"]+)"[^\>]+alt="([^\"]+)"/) { # Profil does not exist anymore
          my $profileUrl;
          my $profileName;
          my $profileImg;
          if ($3) {
            $profileUrl  = $1;
            if ($3 =~ /\.jpg$/) {
              $profileName = $2;
              $profileImg  = $3;
            } else {
              $profileName = $3;
              $profileImg  = $2;
            }
          } else {
            $profileUrl  = '-';
            if ($2 =~ /\.jpg$/) {
              $profileName = $1;
              $profileImg  = $2;
            } else {
              $profileName = $2;
              $profileImg  = $1;
            }
          }
          
          my $dateUTime;
          my $isText;
          my $text;
          my $GPS_URL;
          
          # Gather profil image if does not exist
          if (-e "$tmpDir\\$profileImg" and !-e "$imgDir\\$profileImg") { rcopy("$tmpDir\\$profileImg", "$imgDir\\$profileImg"); }
          
          # Truncate text
          $part = &truncateText($part, length($profileUrl) + length($profileName)+ length($profileImg), $profileUrl);
          
          # Gather message date
          if ($part =~ /<abbr title="([^\"]+)" data-utime="([^\"]+)" class="_35 timestamp">/) {
            my $temp   = $1;
            $dateUTime = $2;
            my $toKeep = 0;
            
            # If Searched part only is checked
            if ($winChat->chSearched->Checked() == 1) {
              # First screening, store the date of the first message (of the last overall messages displayed)
              if    (!$lastDateUTime) { $lastDateUTime = $dateUTime; }
              # First message of the searched part
              elsif (!$searchedPart and $dateUTime < $lastDateUTime) {
                $searchedPart = 1; # Set that the first message of the serached part is found
                $toKeep       = 1; # Set that the message must be keep
              # Additionnal messages of the searched part
              } elsif ($searchedPart and $dateUTime >= $lastDateUTime) {
                $toKeep       = 1;
              }
            # Normal message
            } elsif ($dateUTime >= $lastDateUTime) { $toKeep = 1; }
            
            # Parse message details if not already done
            # If Searched part only is checked, print only older messages (first part is the last messages, so searched part must be older)
            if ($toKeep == 1) {
              $lastDateUTime = $dateUTime;

              # Gather GPS coordinates if available
              if ($part =~ /data-hovercard="\/ajax\/messaging\/hovercard\/map\.php\?([^\"]+)/) {
                my $donnees = $1;
                if ($donnees =~ /longitude=([^\&\"]+)/) {
                  my $long = $1;
                  if ($donnees =~ /latitude=([^\&\"]+)/) {
                    my $lat  = $1;
                    $GPS_URL = "http://maps.google.com/maps?q=$lat,$long";
                  }
                }
              }
              
              # Truncate text
              $part = &truncateText($part, length($profileUrl) + length($dateUTime) + length($temp), $dateUTime);
              
              # Gather text, images and links
              my @paragraphs = split(/_38 direction_ltr/, $part);
              foreach my $par (@paragraphs) {
                # Searched part only, delete irrelevant text
                if ($par =~ /clearfix mbs uiMorePager stat_elem _3hh _52jv/) {
                  $par  = (split(/clearfix mbs uiMorePager stat_elem _3hh _52jv/, $par ))[0];
                  $part = (split(/clearfix mbs uiMorePager stat_elem _3hh _52jv/, $part))[0];
                }
                
                $count++;
                $winPb2->lblCount->Text($count);
                if ($par =~ /"><span class="null"><p>(.+)<\/p>/) {
                  $isText = 1;
                  my $extract = $1;
                  # Text
                  $extract = decode('UTF-8', $extract);
                  $extract = encode('UTF-8', $extract);
                  $text .= $extract;
                  $text =~ s/</ </g; # add spaces
                  
                  # Emoticons
                  # Ex. : <span class="emoticon_text">émoticône heart</span><span class="emoticon emoticon_heart" title="<3"></span>
                  if ($extract =~ /<span class=\"emoticon emoticon[^\"]+\" title=\"/) {
                    while ($extract =~ /<span class=\"emoticon (emoticon[^\"]+)\" title=\"/) {
                      my $emoticonTag = $1;
                      my $imgURL = 'https://www.facebook.com/rsrc.php/v2/yx/r/pimRBh7B6ER.png';
                      $haveEmoticon = 1;
                      # Download the image
                      if ($winChat->chDownloadAD->Checked() == 1 and !$emoticonDL) {
                        $mech->save_url($imgURL, "$imgDir\\pimRBh7B6ER.png");
                        $emoticonDL = 1;
                      }
                      my $emoCode = &emoticon($emoticonTag);
                      if ($emoCode) { push(@emoticons, $emoCode); }
                      
                      # Truncate text
                      $extract = &truncateText($extract, length($emoticonTag), $emoticonTag);
                      
                      # Replace in $text
                      if ($winChat->chDownloadAD->Checked() == 1) {
                        $text =~ s/<span class=\"[^\"]+\">[^\<]+<\/span> ?<span class=\"emoticon [^\"]+\" title=\"[^\"]+\"> ?<\/span>/<span class=\"emoticon\"><span class=\"$emoticonTag\"><\/span><\/span>/;
                      } else {
                        $text =~ s/<span[^\>]+>[^\<]+<\/span> ?<span class="emoticon[^\"]+" title="([^\"]+)"> ?<\/span>/<span style="background-color: #FFFF00">$1<\/span>/g;
                      }
                    }
                  }
                  
                  # CSS Sprite
                  # Ex. : <span class="_1az _1a- _2fd"></span>
                  if ($extract =~ /<span class=\"_1az _1a- [^\"]+\"> ?<\/span>/) {
                    while ($extract =~ /<span class=\"_1az _1a- ([^\"]+)\"> ?<\/span>/) {
                      my $spriteID = $1;
                      my $imgURL = 'https://www.facebook.com/rsrc.php/v2/yp/r/aeO1ik7i7-T.png';
                      $cssSprite = 1;
                      # Download the image
                      if ($winChat->chDownloadAD->Checked() == 1 and !$spriteDL) {
                        $mech->save_url($imgURL, "$imgDir\\aeO1ik7i7-T.png");
                        $spriteDL = 1;
                      }
                      my $sticker = &cssSpriteBD($spriteID);
                      if ($sticker) { push(@stickers16, $sticker); }
                      
                      # Truncate text
                      $extract = &truncateText($extract, length($spriteID), $spriteID);
                      
                      # Replace in $text
                      $text =~ s/<span class=\"_1az _1a- $spriteID\"> ?<\/span>/<span class=\"sticker16\"><span class=\"$spriteID\"><\/span><\/span>/;
                    }
                  }
                  
                  $text .= '<br>';
                  
                  # Gather notifications (call and other)
                  if ($par =~ /<abbr title="[^\"]+" data-utime="[^\"]+" class="_91 timestamp">[^\<]+<\/abbr><span><span data-(?:reactroot|reactid)="[^\"]*">(?:<a class="_1xpw"(?: data-reactid="[^\"]+")?><span[^\>]+>)?[^\<]+(?:<\/span><\/a>)?<\/span><\/span>/) {
                    while ($par =~ /<abbr title="[^\"]+" data-utime="([^\"]+)" class="_91 timestamp">[^\<]+<\/abbr><span><span data-(?:reactroot|reactid)="[^\"]*">(?:<a class="_1xpw"(?: data-reactid="[^\"]+")?><span[^\>]+>)?([^\<]+)(?:<\/span><\/a>)?<\/span><\/span>/) {
                      my $notifDate = $1; # Unixtime date, ex. 1337342303.181
                      my $notifCode = $2; # All code
                      my $ncTime    = $notifCode;
                      $text .= '<span style="font-size: 14px; color: #6E7B8B;">';
                      my $notifDateStr = &formatDate($notifDate);
                      $notifCode = decode('UTF-8', $notifCode);
                      $notifCode = encode('UTF-8', $notifCode);
                      $text .= "$notifDateStr: $notifCode</span><br>";
                      
                      # Truncate text
                      $par = &truncateText($par, length($ncTime), $ncTime);
                    }
                  }
                  
                # Gather warnings
                } elsif ($par =~ /<div class="mas pam uiBoxYellow">([^\<]+)<\/div>/) {
                  $isText = 1;
                  my $warning = $1;
                  $warning = decode('UTF-8', $warning);
                  $text = "<font color=\"#FFCC66\">$1</font><br>";
                }
              }
              # Gather normal image
              if    ($part =~ /a class="_ksh"/ and $part =~ /href="[^\"]+" role="img"/ and $part =~ /<img alt="" src="([^\"]+)">/) {
                my $imgName = $1;
                rcopy("$tmpDir\\$imgName", "$imgDir\\$imgName"); # Copy file
                $text = "<img src=\"images_$chatName\\$imgName\" border=0>";
                
                # Truncate text
                $part = &truncateText($part, length($imgName), $imgName);
              }
              
              # Special image (_55pj)
              elsif ($part =~ /class="_ksh _55pj"/ and $part =~ /style="background-image: ?url\((?:&quot;)?[^\)]+\)/) {
                while ($part =~ /class="_ksh _55pj"/ and $part =~ /style="background-image: ?url\((?:&quot;)?([^\)]+)\)/) {
                  my $imgURL = my $origImgURL = $1;
                  $imgURL =~ s/&amp;/&/g;
                  my $urlImg;
                  if ($imgURL !~ /^http/) { $urlImg = "https://www.facebook.com$imgURL"; }
                  else                    { $urlImg = $imgURL;                           }
                  if ($winChat->chDownloadAD->Checked() == 1) {
                    my $imgFileName;
                    if ($imgURL =~ /\/([^\/\?]+)\?/) { $imgFileName = $1; }
                    $mech->save_url($urlImg, "$imgDir\\$imgFileName");
                    $text .= "<img src=\"images_$chatName\\$imgFileName\" border=0><br><br>";
                  } else {
                    $text .= "<img src=\"$urlImg\" border=0><br><br>";
                  }
                  
                  # Truncate text
                  $part = &truncateText($part, length($origImgURL), $origImgURL);
                }
              }
              
              # Special image (_55pk)
              elsif ($part =~ /class=" ?_55pk/ and $part =~ /style="background-image: ?url\([^\)]+\)/) {
                while ($part =~ /div class="_332l" style="background-image: ?url\([^\)]+\)|div style="background-image: ?url\([^\)]+\)[^\>]+class="_332l"/ or
                       $part =~ /div class="_4yp9" style="background-image: ?url\([^\)]+\)|div style="background-image: ?url\([^\)]+\)[^\>]+class="_4yp9"/) {
                  # We keep the first
                  my $origImgURL;
                  if ($part =~ /(div class="_332l" style="background-image: ?url\([^\)]+\))/ or
                      $part =~ /(div style="background-image: ?url\([^\)]+\)[^\>]+class="_332l")/) {
                    my $el1 = $1;
                    my $posEl1 = index($part, $el1);
                    if ($part =~ /(div class="_4yp9" style="background-image: ?url\([^\)]+\))/ or
                        $part =~ /(div style="background-image: ?url\([^\)]+\)[^\>]+class="_4yp9")/) {
                      my $el2 = $1;
                      my $posEl2 = index($part, $el2);
                      if ($posEl2 > $posEl1) { $origImgURL = $el1; }
                      else                   { $origImgURL = $el2; }
                    } else { $origImgURL = $el1; }
                  } elsif ($part =~ /(div class="_4yp9" style="background-image: ?url\([^\)]+\))/ or
                           $part =~ /(div style="background-image: ?url\([^\)]+\)[^\>]+class="_4yp9")/) {
                    $origImgURL = $1;
                  }
                  my $imgURL;
                  if ($origImgURL =~ /style="background-image: ?url\((?:&quot;)?([^\)]+)\)/) { $imgURL = $1; }
                  if ($origImgURL and $imgURL) {
                    $imgURL =~ s/&amp;/&/g;
                    $imgURL =~ s/&quot;//g;
                    my $urlImg;
                    if ($imgURL !~ /^http/) { $urlImg = "https://www.facebook.com$imgURL"; }
                    else                    { $urlImg = $imgURL;                           }
                    if ($winChat->chDownloadAD->Checked() == 1) {
                      my $imgFileName;
                      if ($imgURL =~ /\/([^\/\?]+)\?/) { $imgFileName = $1; }
                      $mech->save_url($urlImg, "$imgDir\\$imgFileName");
                      my $chatNameEnc = encode('utf8', $chatName);
                      
                      # Download image in full size
                      if ($winChat->chDownloadImg->Checked() == 1) {
                        # Open popup image
                        my @links = $mech->selector('div._55pk a');
                        for my $link (@links) {
                          my $linkData = $link->{innerHTML};
                          if ($linkData =~ /class="_4yp6/ and $linkData =~ /$imgFileName/) {
                            my $width;
                            my $height;
                            if ($linkData =~ /width: ?(\d+)px/ ) { $width  = $1; }
                            if ($linkData =~ /height: ?(\d+)px/) { $height = $1; }                            
                            # Open popup
                            $link->click;
                            sleep($CONFIG{'TIME_TO_WAIT'});
                            # Download the image in full size
                            my @bigImgLinks = $mech->selector('img._4-od');
                            foreach (@bigImgLinks) {
                              my $linkBigImg = $_->{src};
                              if ($linkBigImg =~ /\/([^\/\?]+)\?/) {
                                my $nameBigImg = $1;
                                $mech->save_url($linkBigImg, "$imgDir\\$nameBigImg");
                                if ($width and $height) {
                                  $text .= "<img src=\"images_$chatNameEnc\\$imgFileName\" width=$width height=$height border=0><br>";
                                } else { $text .= "<img src=\"images_$chatNameEnc\\$imgFileName\" border=0><br>"; }
                                $text .= "<span style=\"font-size: 14px;\"><a href=\"images_$chatName\\$nameBigImg\" target=\"_blank\">$STR{'zoomImg'}</a></span><br>";
                              }
                            }
  
                            # Close popup
                            $mech->eval_in_page("var el = document.getElementsByClassName('_4-o9 _50-m _51an _5wx4'); for (var i=0;i<el.length; i++) { el[i].click(); }");
                          }
                        }
                      } else {
                        $text .= "<img src=\"images_$chatNameEnc\\$imgFileName\" border=0><br>";
                      }
                      $text .= "<br>";
                    } else {
                      $text .= "<img src=\"$urlImg\" border=0><br><br>";
                    }
                    
                    # Truncate text
                    $part = &truncateText($part, length($origImgURL), $origImgURL);
                  } else { last; }
                }
              }
              
              # Gather stickerContainer type image and animated Facebook images
              elsif ($part =~ /class="mvs/ and ($part =~ /style="background-image: ?url\((?:&quot;)?(\/stickers\/asset\/\?sticker_id[^\&]+)/ or
                                                $part =~ /style="background-image: ?url\(&quot;([^\&]+)&quot;\); background-size/)) {
                my $imgURL = $1;
                if ($imgURL !~ /^http/) { $imgURL = "https://www.facebook.com$imgURL"; }
                # Sticker use redirection
                if (($imgURL =~ /sticker_id=/)) {
                  my $mechSticker = WWW::Mechanize::Firefox->new(autodie => 0);
                  $mechSticker->get($imgURL, synchronize => 0);
                  sleep($CONFIG{'TIME_TO_WAIT'});
                  $imgURL = $mechSticker->uri;
                }
                # Download the image ?
                if ($winChat->chDownloadAD->Checked() == 1) {
                  my $imgName = $dateUTime;
                  if ($imgURL =~ /\/([^\/]+)$/) { $imgName = $1; }
                  $mech->save_url($imgURL, "$imgDir\\$imgName");
                  $text .= "<img src=\"images_$chatName\\$imgName\" border=0><br>";
                } else { $text .= "<img src=\"$imgURL\" border=0><br>"; }
                
                # Truncate text
                $part = &truncateText($part, length($imgURL), $imgURL);
              }
              
              # Special sticker
              elsif ($part =~ /class="mvs _576q[^\>]+style=\"[^\"]+\"/ or
                     $part =~ /style=\"[^\"]+\"[^\>]+class="mvs _576q[^\>]+/) {
                my $imgURL = 'https://www.facebook.com/rsrc.php/ya/r/FwHVs2eE5cr.svg';
                # Download the image ?
                if ($winChat->chDownloadAD->Checked() == 1) {
                  $mech->save_url($imgURL, "$imgDir\\FwHVs2eE5cr.svg");
                  $text .= "<img src=\"images_$chatName\\FwHVs2eE5cr.svg\" width=35 height=35 border=0>";
                } else { $text .= "<img src=\"$imgURL\" width=35 height=35 border=0>"; }
                
                # Truncate text
                $part = &truncateText($part, length($imgURL), $imgURL);
              }
              
              # Gather video
              elsif ($part =~ /a[^\>]+rel="theater"[^\>]+href="([^\"]+)"/ or $part =~ /a[^\>]+href="([^\"]+)"[^\>]+rel="theater"[^\>]*/) { # Link to the page with the video
                my $urlVideoPage = unescape($1);
                $urlVideoPage =~ s/&amp;/&/g;
                if ($winChat->chDownloadAD->Checked() == 1) { # Download image and video ?
                  if ($part =~ /div[^\>]+class="clearfix _23n-"[^\>]*><img[^\>]+src="([^\"]+)"/) { # Image of the video
                    my $videoImgName = $1;
                    if ($videoImgName =~ /https:\/\/(?:[^\/]+\/)+([^\/\?]+)\?/) { $videoImgName = $1; }
                    # Gather page with the video
                    my $mechVideo = WWW::Mechanize::Firefox->new(autodie => 0);
                    $mechVideo->get($urlVideoPage, synchronize => 0);
                    sleep($CONFIG{'TIME_TO_WAIT'});
                    my $title = $mechVideo->title();
                    $title = decode('UTF-8', $title);
                    if ($title =~ /([^ ]+) \(/) { $title = $1; }  # Title of the page
                    my $status2 = $mechVideo->save_content("$tmpDir\\videoPage.html", $tmpDir);
                    while ($status2->{currentState} != $status2->{PERSIST_STATE_FINISHED}) { usleep(100000); }
                    # Parse the video page
                    open(my $tmpVid, "$tmpDir\\videoPage.html");
                    my $vidfile_as_string = do { local $/ = <$tmpVid> };
                    $vidfile_as_string =~ s/[\r\n]//g;
                    if ($vidfile_as_string =~ /video[^\>]+src="([^\"]+)"/) {
                      my $videoName = $1;
                      if ($videoName =~ /https:\/\/(?:[^\/]+\/)+([^\/\?]+)\?/) { $videoName = $1; }
                      if (!-d $vidDir) { mkdir($vidDir); }
                      rcopy("$tmpDir\\$videoName", "$vidDir\\$videoName"); # Copy video file
                      rcopy("$tmpDir\\$videoImgName", "$imgDir\\$videoImgName"); # Copy video image file
                      # Create message
                      $text .= "<font color=\"#8B2323\">$STR{'video'}: </font><br>";
                      $text .= "<a href=\"videos_$chatName\\$videoName\" target=\"_blank\"><img src=\"images_$chatName\\$videoImgName\" border=0></a></span><br>";
                    }
                    undef($vidfile_as_string);
                    close($tmpVid);
                  # No image, print url only
                  } else {
                    $isText = 1;
                    $text .= "$STR{'videoErr'}:<br><span style=\"font-size: 14px;\"><a href=\"$urlVideoPage\" target=\"_blank\">$STR{'videoURL'}</a></span><br>";
                  }
                } else {
                  $isText = 1;
                  my $videoURLText = encode('utf-8', $STR{'videoURL'});
                  $text .= "<span style=\"font-size: 14px;\"><a href=\"$urlVideoPage\" target=\"_blank\">$videoURLText</a></span><br>";
                }
              }
              
              # Gather vocal message
              elsif ($part =~ / class="_1miz _2e-1/ and $part =~ / class="_1mj0 _2e-4 _3oh-"[^\>]*>([^\>]+)<\/span><div class="_1mj1 _2e-5"[^\>]*>/) {
                my $duree = $1;
                $isText = 1;
                my $idAudioFile;
                if ($dateUTime =~ /\./) {
                  $idAudioFile = (split(/\./, $dateUTime))[0];
                  #$mech->eval_in_page("var el = document.getElementsByClassName('_1miz _2e-1'); for (var i=0;i<el.length; i++) { el[i].click(); }");
                  $text .= "<font color=\"#339900\">$STR{'vocalMsg'}: </font> <font color=\"#8B2323\">$duree</font><br>";
                  $text .= "<font color=\"#339900\">$STR{'vocalJoin'}:</font> <font color=\"#8B2323\">$idAudioFile.mp4</font><br>";
                }
              }
              
              # Gather attached document (audio attached, pdf, doc, etc.)
              elsif ($part =~ /_59go _59gq clearfix"[^\>]*><div[^\>]+class="_ohe lfloat"[^\>]*><a[^\>]+href="([^\"]+)"[^\>]*>/) {
                my $attachedURL = $1;
                if ($part =~ /<span[^\>]+class="_59gp"[^\>]*>([^\<]+)<\/span>/) {
                  my $attachedName = $1;
                  $attachedName    = decode('UTF-8', $attachedName);
                  my $attachedText = encode('utf-8', $STR{'attached'});
                  $attachedURL =~ s/&amp;/&/g;
                  $isText = 1;
                  # Download attached document
                  if ($winChat->chDownloadAD->Checked() == 1) {
                    if (!-d "$saveDir\\pj_$chatName") { mkdir("$saveDir\\pj_$chatName"); }
                    my $localPJFile = "$saveDir\\pj_$chatName\\$attachedName";
                    $mech->save_url($attachedURL, $localPJFile);
                    $text .= "<font color=\"#8B2323\">$attachedText: <a href=\"pj_$chatName\\$attachedName\" target=\"_blank\">$attachedName</a></font><br>";
                  # Gather the link only
                  } else {
                    $text .= "<font color=\"#8B2323\">$attachedText: <a href=\"$attachedURL\" target=\"_blank\">Download $attachedName</a></font><br>";
                  }
                }
              }                
              
              # Notifications (source, Seen: date, etc.)
              if ($part =~ /<span class="_510f"[^\>]*>(.+)<\/span>/) {
                my $tempExt = $1;
                $tempExt =~ s/<\/span>.+//g;
                if (length($tempExt) > 2) { # Avoid single space notif
                  $tempExt = decode('iso-8859-1', $tempExt);
                  $text .= "<span style=\"font-size: 14px; color: #6E7B8B;\">$tempExt</span><br>";
                }
              }
              
              # GPS coordinates
              if ($GPS_URL) {
                $text .= "<span style=\"font-size: 14px;\"><a href=\"$GPS_URL\" target=\"_blank\">GPS coordinates</a></span><br>"; }
            }
            
            # Save the message
            if ($text) {
              $profileName = decode('utf8', $profileName);
              $profileName = encode('utf8', $profileName);
              
              $$refMsgProfileImg{$dateUTime}  = $profileImg;
              $$refMsgProfileUrl{$dateUTime}  = $profileUrl;
              $$refMsgProfileName{$dateUTime} = $profileName;
              $$refMsgIsText{$dateUTime}      = $isText;
              $$refMsgText{$dateUTime}        = $text;
            }
          }
        }
      }
    }
    close($tmp);
    $step = 3; # Page have been parsed
  }
  
  # Save the chat in a HTML file
  if ($step == 3) {
    my $count2 = 0;
    $winPb2->lblPbCurr->Text($STR{'saveChat'}.'...');
    $winPb2->lblCount->Text('');
    my $htmlChatPage = "$saveDir\\$chatName.html";
    my $titlePage    = encode('utf8', $chatName);
    open(HTML, ">$htmlChatPage");
    print HTML "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n";
    print HTML "<html>\n<head>\n<title>$titlePage</title>\n";
    print HTML "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf8\">\n";
    print HTML "<style>\n";
    if ($haveEmoticon == 1) {
      print HTML ".emoticon span\n";
      print HTML "{\n";
      print HTML "  display:inline-block;\n";
      print HTML "  vertical-align:top;\n";
      if ($winChat->chDownloadAD->Checked() == 1) {
        print HTML "  background: url(\"images_$titlePage\\\\pimRBh7B6ER.png\");\n";
      } else {
        print HTML "  background: url(\"https://www.facebook.com/rsrc.php/v2/yx/r/pimRBh7B6ER.png\");\n";
      }
      print HTML "  background-repeat:no-repeat;\n";
      print HTML "  background-size:auto;\n";
      print HTML "  width: 16px;\n";
      print HTML "  height: 16px;\n";
      print HTML "  margin:0 1px 0 1px;\n";
      print HTML "}\n";
      foreach (@emoticons) { print HTML "$_\n"; }
    }
    if ($cssSprite == 1) {
      print HTML ".sticker16 span\n";
      print HTML "{\n";
      print HTML "  display:inline-block;\n";
      print HTML "  vertical-align:top;\n";
      if ($winChat->chDownloadAD->Checked() == 1) {
        print HTML "  background: url(\"images_$titlePage\\\\aeO1ik7i7-T.png\");\n";
      } else {
        print HTML "  background: url(\"https://www.facebook.com/rsrc.php/v2/yp/r/aeO1ik7i7-T.png\");\n";
      }
      print HTML "  background-repeat:no-repeat;\n";
      print HTML "  background-size:auto;\n";
      print HTML "  width: 16px;\n";
      print HTML "  height: 16px;\n";
      print HTML "  margin:0 1px 0 1px;\n";
      print HTML "}\n";
      foreach (@stickers16) { print HTML "$_\n"; }
    }
    print HTML "    td:last-child {\n";
    print HTML "  overflow-wrap: break-word;\n";
    print HTML "  word-wrap: break-word;\n";
    print HTML "  -ms-word-break: break-all;\n";
    print HTML "  word-break: break-all;\n";
    print HTML "  word-break: break-word;\n";
    print HTML "  -ms-hyphens: auto;\n";
    print HTML "  -moz-hyphens: auto;\n";
    print HTML "  -webkit-hyphens: auto;\n";
    print HTML "  hyphens: auto;\n";
    print HTML "}\n";
    print HTML "</style>\n";
    print HTML "</head>\n";
    print HTML "<body style=\"font-family: Calibri, Verdana, Arial; font-size: smaller; color: Black;\">\n";
    print HTML "<h1 style=\"color:#003300; font-size: 18pt; font-variant: small-caps; font-weight: bold;\" align=\"center\">";
    print HTML "$titlePage</h1>\n";
    print HTML "<table border=1 cellspacing=0 cellpadding=1 align=\"center\">\n";
    if ($startText) {
      print HTML "<tr><td colspan=5 align=\"center\" bgcolor=\"#EEEEEE\">$startText</td></tr>\n";
    }
    print HTML "<tr>\n";
    print HTML "<td style=\"font-weight: bold;\">$STR{'image'}</td>\n";
    print HTML "<td style=\"font-weight: bold;\">$STR{'url'}</td>\n";
    print HTML "<td style=\"font-weight: bold;\">$STR{'name'}</td>\n";
    print HTML "<td style=\"font-weight: bold;\">$STR{'date'}</td>\n";
    print HTML "<td style=\"font-weight: bold;\">$STR{'message'}</td>\n";
    print HTML "</tr>\n";
    foreach my $date (sort keys %{$refMsgText}) {
      $count2++;
      $winPb2->lblCount->Text($count2);
      # Is it me ?
      my $isMe = 0;
      if ($$refMsgProfileUrl{$date} ne '-' and $$refMsgProfileUrl{$date} !~ /$profilID/) { $isMe = 1; }
      # Print fields
      print HTML "<tr>\n";
      my $imgPath = "images_$titlePage\\$$refMsgProfileImg{$date}";
      if ($isMe == 1 and $winChat->chHideMe->Checked() == 1) { # HideMe 
        print HTML "<td align=\"center\" style=\"background-color:black\"><img src=\"$imgPath\" width=32 height=32 border=0 style=\"display: none;\"></td>\n";
        print HTML "<td valign=\"top\" style=\"background-color:black\">$$refMsgProfileUrl{$date}</td>\n";
        print HTML "<td valign=\"top\" style=\"background-color:black\">$$refMsgProfileName{$date}</td>\n";
      } elsif ($isMe == 1) { # Me, no background color
        print HTML "<td align=\"center\"><img src=\"$imgPath\" width=32 height=32 border=0></td>\n";
        print HTML "<td valign=\"top\">$$refMsgProfileUrl{$date}</td>\n";
        print HTML "<td valign=\"top\">$$refMsgProfileName{$date}</td>\n";
      } else {
        print HTML "<td align=\"center\" style=\"background-color:#F9FAFC\"><img src=\"$imgPath\" width=32 height=32 border=0></td>\n";
        print HTML "<td valign=\"top\" style=\"background-color:#F9FAFC\">$$refMsgProfileUrl{$date}</td>\n";
        print HTML "<td valign=\"top\" style=\"background-color:#F9FAFC\">$$refMsgProfileName{$date}</td>\n";
      }
      my $dateStr = &formatDate($date);
      if ($isMe == 1) { print HTML "<td valign=\"top\">$dateStr</td>\n";                                    }
      else            { print HTML "<td valign=\"top\" style=\"background-color:#F9FAFC\">$dateStr</td>\n"; }
      
      if ($$refMsgIsText{$date} == 1) {
        if ($isMe == 1) { print HTML "<td valign=\"top\">$$refMsgText{$date}</td>\n</tr>\n";                                    }
        else            { print HTML "<td valign=\"top\" style=\"background-color:#F9FAFC\">$$refMsgText{$date}</td>\n</tr>\n"; }
      } else {
        if ($isMe == 1) { print HTML "<td align=\"center\">$$refMsgText{$date}</td>\n";                                    }
        else            { print HTML "<td align=\"center\" style=\"background-color:#F9FAFC\">$$refMsgText{$date}</td>\n"; }
      }
    }
    print HTML "</table>\n</body>\n</html>\n";
    close(HTML);
    
    # Open the page
    $win->ShellExecute('open', $htmlChatPage,'','',1);
  }
  
  # Turn off progress bar
  $winPb2->lblPbCurr->Text('');
  $winPb2->lblCount->Text('');
  &winPb2_Terminate;
  
  # Delete temporary files
  if ($winConfig->chDelTempFiles->Checked() == 1) { remove_tree($tmpDir); }

  $win->Tray->Change(-tip => $STR{'dumpChatF'});
  if (!$win->IsVisible()) {
    $win->Tray->Change( -balloon_icon  => 'info'            ,
                        -balloon_title => 'ExtractFace'     ,
                        -balloon_tip   => $STR{'dumpChatF'} , );
    $win->Tray->ShowBalloon(1);
  }
  $win->ChangeCursor($ARROW);
  

}  #--- End dumpChat

#--------------------------#
sub truncateText
#--------------------------#
{
  # Local variables
  my ($text, $long, $toIndex) = @_;
  
  my $lineWidth = length($text);
  my $pos       = index($text, $toIndex);
  my $offset    = $pos+$long;
  $text         = substr($text,$offset,$lineWidth-$offset);

  return($text);

}  #--- End truncateText

#--------------------------#
sub winChat_Terminate
#--------------------------#
{
  return(-1);

}  #--- Fin winChat_Terminate

#--------------------------#
sub cancel
#--------------------------#
{
  # Stop requests
  if ($THR) {
    $THR->kill('KILL')->detach();
    $win->ChangeCursor($ARROW);
  }
  return(1);

}  #--- End cancel

#--------------------------#
sub btnCancel_Click
#--------------------------#
{
  # Stop requests
  if ($THR) {
    $winPb->lblPbCurr1->Text($STR{'cancel2'}.'...');
    $winPb->lblCount1->Text('');
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    &winPb_Terminate;
    $THR->kill('KILL')->detach();
    $win->ChangeCursor($ARROW);
  }
  return(1);

}  #--- End btnCancel_Click

#--------------------------#
sub btnCancel2_Click
#--------------------------#
{
  # Stop requests
  if ($THR) {
    $winPb2->lblPbCurr->Text($STR{'cancel2'}.'...');
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    &winPb2_Terminate;
    $THR->kill('KILL')->detach();
    $win->ChangeCursor($ARROW);
  }
  return(1);

}  #--- End btnCancel2_Click

#--------------------------#
sub winConfig
#--------------------------#
{
  # Default tab is General options
  $winConfig->configTab->Select(0);
  $winConfig->lblTimeToWait->Show();
  $winConfig->tfTimeToWait->Show();
  $winConfig->lblTimeToWait2->Show();
  $winConfig->lblNbrResume->Show();
  $winConfig->tfNbrResume->Show();
  $winConfig->chOptScrollTop->Show();
  $winConfig->chAutoUpdate->Show();
  $winConfig->btnExportLang->Show();
  $winConfig->chOptSeemore->Hide();
  $winConfig->chOptComments->Hide();
  $winConfig->chOptPosts->Hide();
  $winConfig->lblMaxLoading->Hide();
  $winConfig->tfMaxLoading->Hide();
  $winConfig->lblTextLink->Hide();
  $winConfig->lblRegular->Hide();
  $winConfig->lblOlder->Hide();
  $winConfig->lblNewer->Hide();
  $winConfig->tfRegular->Hide();
  $winConfig->tfOlder->Hide();
  $winConfig->tfNewer->Hide();
  
  $winConfig->Center();
  $winConfig->DoModal();

}  #--- End winConfig

#--------------------------#
sub configTab_Click
#--------------------------#
{
  # Show General Options
  if ($winConfig->configTab->SelectedItem() == 0) {
    $winConfig->lblTimeToWait->Show();
    $winConfig->tfTimeToWait->Show();
    $winConfig->lblTimeToWait2->Show();
    $winConfig->lblNbrResume->Show();
    $winConfig->tfNbrResume->Show();
    $winConfig->chOptScrollTop->Show();
    $winConfig->chAutoUpdate->Show();
    $winConfig->chDelTempFiles->Show();
    $winConfig->btnExportLang->Show();
    $winConfig->chOptSeemore->Hide();
    $winConfig->chOptComments->Hide();
    $winConfig->chOptPosts->Hide();
    $winConfig->lblMaxLoading->Hide();
    $winConfig->tfMaxLoading->Hide();
    $winConfig->lblTextLink->Hide();
    $winConfig->lblRegular->Hide();
    $winConfig->lblOlder->Hide();
    $winConfig->lblNewer->Hide();
    $winConfig->tfRegular->Hide();
    $winConfig->tfOlder->Hide();
    $winConfig->tfNewer->Hide();
    
  # Show Expand Options
  } elsif ($winConfig->configTab->SelectedItem() == 1) {
    $winConfig->chOptSeemore->Show();
    $winConfig->chOptComments->Show();
    $winConfig->chOptPosts->Show();
    $winConfig->lblTimeToWait->Hide();
    $winConfig->tfTimeToWait->Hide();
    $winConfig->lblTimeToWait2->Hide();
    $winConfig->lblNbrResume->Hide();
    $winConfig->tfNbrResume->Hide();
    $winConfig->chOptScrollTop->Hide();
    $winConfig->chAutoUpdate->Hide();
    $winConfig->chDelTempFiles->Hide();
    $winConfig->btnExportLang->Hide();
    $winConfig->lblMaxLoading->Hide();
    $winConfig->tfMaxLoading->Hide();
    $winConfig->lblTextLink->Hide();
    $winConfig->lblRegular->Hide();
    $winConfig->lblOlder->Hide();
    $winConfig->lblNewer->Hide();
    $winConfig->tfRegular->Hide();
    $winConfig->tfOlder->Hide();
    $winConfig->tfNewer->Hide();
  
  # Show Chat options
  } else {
    $winConfig->lblMaxLoading->Show();
    $winConfig->tfMaxLoading->Show();
    $winConfig->lblTextLink->Show();
    $winConfig->lblRegular->Show();
    $winConfig->lblOlder->Show();
    $winConfig->lblNewer->Show();
    $winConfig->tfRegular->Show();
    $winConfig->tfOlder->Show();
    $winConfig->tfNewer->Show();
    $winConfig->chOptSeemore->Hide();
    $winConfig->chOptComments->Hide();
    $winConfig->chOptPosts->Hide();
    $winConfig->lblTimeToWait->Hide();
    $winConfig->tfTimeToWait->Hide();
    $winConfig->lblTimeToWait2->Hide();
    $winConfig->lblNbrResume->Hide();
    $winConfig->tfNbrResume->Hide();
    $winConfig->chOptScrollTop->Hide();
    $winConfig->chAutoUpdate->Hide();
    $winConfig->chDelTempFiles->Hide();
    $winConfig->btnExportLang->Hide();
  }

}  #--- End configTab_Click

#--------------------------#
sub winConfig_Terminate
#--------------------------#
{
  return(-1);

}  #--- End winConfig_Terminate

#--------------------------#
sub btnConfigOK_Click
#--------------------------#
{
  # Local variables
  my $timeToWait    = $winConfig->tfTimeToWait->Text();
  my $nbrResumes    = $winConfig->tfNbrResume->Text();
  my $optScrollTop  = $winConfig->chOptScrollTop->Checked();
  my $autoUpdate    = $winConfig->chAutoUpdate->Checked();
  my $delTempFiles  = $winConfig->chDelTempFiles->Checked();
  my $seeMoreOpt    = $winConfig->chOptSeemore->Checked();
  my $morePostOpt   = $winConfig->chOptPosts->Checked();
  my $moreComments  = $winConfig->chOptComments->Checked();
  my $maxScrolling  = $winConfig->tfMaxLoading->Text();
  my $scrTextReg    = $winConfig->tfRegular->Text();
  my $scrTextOld    = $winConfig->tfOlder->Text();
  my $scrTextNew    = $winConfig->tfNewer->Text();
  
  # Remember
  $CONFIG{'TIME_TO_WAIT'}         = $timeToWait;
  $CONFIG{'NBR_RESUME'}           = $nbrResumes;
  $CONFIG{'OPT_SCROLL_TOP'}       = $optScrollTop;
  $CONFIG{'AUTO_UPDATE'}          = $autoUpdate;
  $CONFIG{'DEL_TEMP_FILES'}       = $delTempFiles;
  $CONFIG{'EXPAND_SEE_MORE'}      = $seeMoreOpt;
  $CONFIG{'EXPAND_MORE_POSTS'}    = $morePostOpt;
  $CONFIG{'EXPAND_MORE_COMMENTS'} = $moreComments;
  $CONFIG{'MAX_LOADING_MSG'}      = $maxScrolling;
  $CONFIG{'SCROLL_TEXT_REGULAR'}  = $scrTextReg;
  $CONFIG{'SCROLL_TEXT_OLDER'}    = $scrTextOld;
  $CONFIG{'SCROLL_TEXT_NEWER'}    = $scrTextNew;
  &saveConfig(\%CONFIG);
  
  return(-1);

}  #--- End btnConfigOK_Click

#--------------------------#
sub btnExportLang_Click
#--------------------------#
{
  # Save strings in Lang.ini
  open(LANG,">$LANG_FILE");
  flock(LANG, 2);
  foreach my $cle (keys %STR) { print LANG "$cle = $STR{$cle}\n"; }
  close(LANG);
  # Open the page
  $win->ShellExecute('open', $LANG_FILE,'','',1);

}  #--- End btnExportLang_Click

#--------------------------#
sub btnConfigC_Click
#--------------------------#
{
  return(-1);

}  #--- End btnConfigC_Click

#--------------------------#
sub Update_Click
#--------------------------#
{
  &checkUpdate(1);

}  #--- End Update_Click

#--------------------------#
sub checkUpdate
#--------------------------#
{
  # Local variables
  my $confirm = shift;
  
  # Download the version file  
  my $ua = new LWP::UserAgent;
  $ua->agent('ExtractFaceUpdate $VERSION');
  $ua->default_header('Accept-Language' => 'en');
  my $req = new HTTP::Request GET => $URL_VER;
  my $res = $ua->request($req);
  # Success, compare versions
  if ($res->is_success) {
    my $status  = $res->code;
    my $content = $res->content;
    my $currVer;
    if ($content =~ /([\d\.]+)/i) { $currVer = $1; }
    # No update available
    if ($currVer le $VERSION) {
      if ($confirm) { Win32::GUI::MessageBox($win, $STR{'update1'}, $STR{'update2'}, 0x40040); } # Up to date
    } else {
      my $answer = Win32::GUI::MessageBox($win, "$STR{'update4'} $currVer $STR{'update5'} ?", $STR{'update3'}, 0x40024); # Download available
      # Download the update
      if ($answer == 6) { &update; }
    }
  }
  # Error 
  else {
    my $status  = $res->code;
    my $error   = $res->status_line;
    Win32::GUI::MessageBox($win, "$STR{'err1T'}: $STR{'update6'} = [$status]; $STR{'update7'} = [$error].", $STR{'err7'},0x40010);
  }

}  #--- End checkUpdate

#--------------------------#
sub update
#--------------------------#
{
  # Open Firefox to ExtractFace page
  $win->ShellExecute('open', $URL_TOOL,'','',1) or Win32::GUI::MessageBox($win, Win32::FormatMessage(Win32::GetLastError()), $STR{'err7'},0x40010);

}  #--- End update

#--------------------------#
sub help
#--------------------------#
{
  if (-e $HELP_FILE) {
    # Open the page
    $win->ShellExecute('open', $HELP_FILE,'','',1);
  } else {
    Win32::GUI::MessageBox($win, "Documentation.chm $STR{'err8'}", $STR{'err1T'},0x40010);
  }  

}  #--- End help

#--------------------------#
sub loadPage
#--------------------------#
{
  # Local variables
  my ($refMech, $url) = @_;
  
  $$refMech->get($url, synchronize => 0);
  sleep($CONFIG{'TIME_TO_WAIT'});
  my $currURL   = $$refMech->uri();
  my $currTitle = $$refMech->title();

  return($currURL, $currTitle);

}  #--- End loadPage

#--------------------------#
sub formatDate
#--------------------------#
{
  # Local variables
  my $unixtime = shift;
  
  # Convert to string, local timezone
  if ($unixtime =~ /\./) { $unixtime = (split(/\./, $unixtime))[0]; }
  my ($s,$min,$hr,$d,$m,$y,$weekday,$ha,$isDST) = localtime($unixtime);
  $y += 1900;
  $m++;
  $m   = $m   < 10 ? $m   = "0".$m   : $m;
  $d   = $d   < 10 ? $d   = "0".$d   : $d;
  $hr  = $hr  < 10 ? $hr  = "0".$hr  : $hr;
  $min = $min < 10 ? $min = "0".$min : $min;
  $s   = $s   < 10 ? $s   = "0".$s   : $s;
  return("$y-$m-$d $hr:$min:$s");

}  #--- End formatDate

#--------------------------#
sub saveConfig
#--------------------------#
{
  # Local variables
  my $refConfig = shift;
  
  # Save configuration hash values
  open(CONFIG,">$CONFIG_FILE");
  flock(CONFIG, 2);
  foreach my $cle (keys %{$refConfig}) { print CONFIG "$cle = $$refConfig{$cle}\n"; }
  close(CONFIG);  

}  #--- End saveConfig

#--------------------------#
sub loadConfig
#--------------------------#
{
  # Local variables
  my $refConfig = shift;
  
  # If ini file exists
  if (-T $CONFIG_FILE) {
    # Open and load config values
    open(CONFIG, $CONFIG_FILE);
    my @tab = <CONFIG>;
    close(CONFIG);
    
    foreach (@tab) {
      chomp($_);
      my ($key, $value) = split(/ = /, $_);
      if ($key) { $$refConfig{$key}  = $value; }
    }
  }
  
  # General settings
  if (exists($$refConfig{'TIME_TO_WAIT'}))          { $winConfig->tfTimeToWait->Text($$refConfig{'TIME_TO_WAIT'});                }
  else                                              { $winConfig->tfTimeToWait->Text(2); $$refConfig{'TIME_TO_WAIT'} =  2;        } # Default value is 2
  if (exists($$refConfig{'NBR_RESUME'}))            { $winConfig->tfNbrResume->Text($$refConfig{'NBR_RESUME'});                   }
  else                                              { $winConfig->tfNbrResume->Text(10); $$refConfig{'NBR_RESUME'}   = 10;        } # Default value is 10
  if (exists($$refConfig{'OPT_SCROLL_TOP'}))        { $winConfig->chOptScrollTop->Checked($$refConfig{'OPT_SCROLL_TOP'});         }
  else                                              { $winConfig->chOptScrollTop->Checked(1); $$refConfig{'OPT_SCROLL_TOP'} = 1;  } # Default is checked
  if (exists($$refConfig{'AUTO_UPDATE'}))           { $winConfig->chAutoUpdate->Checked($$refConfig{'AUTO_UPDATE'});              }
  else                                              { $winConfig->chAutoUpdate->Checked(1);   $$refConfig{'AUTO_UPDATE'}    = 1;  } # Default is checked
  if (exists($$refConfig{'DEL_TEMP_FILES'}))        { $winConfig->chDelTempFiles->Checked($$refConfig{'DEL_TEMP_FILES'});         }
  else                                              { $winConfig->chDelTempFiles->Checked(1); $$refConfig{'DEL_TEMP_FILES'} = 1;  } # Default is checked
  if (exists($$refConfig{'EXPAND_SEE_MORE'}))       { $winConfig->chOptSeemore->Checked($$refConfig{'EXPAND_SEE_MORE'});                }
  else                                              { $winConfig->chOptSeemore->Checked(1);   $$refConfig{'EXPAND_SEE_MORE'}      = 1;  } # Default is checked
  if (exists($$refConfig{'EXPAND_MORE_POSTS'}))     { $winConfig->chOptPosts->Checked($$refConfig{'EXPAND_MORE_POSTS'});                }
  else                                              { $winConfig->chOptPosts->Checked(1);     $$refConfig{'EXPAND_MORE_POSTS'}    = 1;  } # Default is checked
  if (exists($$refConfig{'EXPAND_MORE_COMMENTS'}))  { $winConfig->chOptComments->Checked($$refConfig{'EXPAND_MORE_COMMENTS'});          }
  else                                              { $winConfig->chOptComments->Checked(1);  $$refConfig{'EXPAND_MORE_COMMENTS'} = 1;  } # Default is checked
  if (exists($$refConfig{'MAX_LOADING_MSG'}))       { $winConfig->tfMaxLoading->Text($$refConfig{'MAX_LOADING_MSG'});           }
  else                                              { $winConfig->tfMaxLoading->Text(0); $$refConfig{'MAX_LOADING_MSG'} = 0;    } # Default value is 0 (No maximum)
  if ($$refConfig{'SCROLL_TEXT_REGULAR'})           { $winConfig->tfRegular->Text($$refConfig{'SCROLL_TEXT_REGULAR'});          }
  else                                              { $winConfig->tfRegular->Text('Loadi?n?g? Older Messages\.{0,3}');
                                                      $$refConfig{'SCROLL_TEXT_REGULAR'} = 'Loadi?n?g? Older Messages\.{0,3}';  } # Default value is english
  if ($$refConfig{'SCROLL_TEXT_OLDER'})             { $winConfig->tfOlder->Text($$refConfig{'SCROLL_TEXT_OLDER'});              }
  else                                              { $winConfig->tfOlder->Text('Load Older Messages');
                                                      $$refConfig{'SCROLL_TEXT_OLDER'} = 'Load Older Messages';                 } # Default value is english
  if ($$refConfig{'SCROLL_TEXT_NEWER'})             { $winConfig->tfNewer->Text($$refConfig{'SCROLL_TEXT_NEWER'});              }
  else                                              { $winConfig->tfNewer->Text('Load Newer Messages');
                                                      $$refConfig{'SCROLL_TEXT_NEWER'} = 'Load Newer Messages';                 } # Default value is english
  # Directories
  if (exists($$refConfig{'DIR_SAVE_ALBUMS'})  and -d $$refConfig{'DIR_SAVE_ALBUMS'})  { $winAlbums->tfDirSaveAlbums->Text($$refConfig{'DIR_SAVE_ALBUMS'});        }
  if (exists($$refConfig{'DIR_SAVE_FRIENDS'}) and -d $$refConfig{'DIR_SAVE_FRIENDS'}) { $winFriends->tfDirSaveFriends->Text($$refConfig{'DIR_SAVE_FRIENDS'});     }
  if (exists($$refConfig{'DIR_SAVE_EVENT'})   and -d $$refConfig{'DIR_SAVE_EVENT'})   { $winEvent->tfDirSaveEvent->Text($$refConfig{'DIR_SAVE_EVENT'});           }
  if (exists($$refConfig{'DIR_SAVE_CHAT'})    and -d $$refConfig{'DIR_SAVE_CHAT'})    { $winChat->tfDirSaveChat->Text($$refConfig{'DIR_SAVE_CHAT'});              }

  # Window options
  if (exists($$refConfig{'REMEMBER_SAVE_ALBUMS'}))  { $winAlbums->chSaveAlbumDir->Checked($$refConfig{'REMEMBER_SAVE_ALBUMS'});               }
  else                                              { $winAlbums->chSaveAlbumDir->Checked(1);     $$refConfig{'REMEMBER_SAVE_ALBUMS'}   = 1;  } # Default is checked
  if (exists($$refConfig{'REMEMBER_SAVE_FRIENDS'})) { $winFriends->chSaveFriendsDir->Checked($$refConfig{'REMEMBER_SAVE_FRIENDS'});           }
  else                                              { $winFriends->chSaveFriendsDir->Checked(1);  $$refConfig{'REMEMBER_SAVE_FRIENDS'}  = 1;  } # Default is checked
  if (exists($$refConfig{'FRIENDS_INCLUDE_ICONS'})) { $winFriends->chIncludeIcons->Checked($$refConfig{'FRIENDS_INCLUDE_ICONS'});             }
  else                                              { $winFriends->chIncludeIcons->Checked(1);    $$refConfig{'FRIENDS_INCLUDE_ICONS'}  = 1;  } # Default is checked
  if (exists($$refConfig{'FRIENDS_OPEN_XLSX'}))    { $winFriends->chFriendsOpenXLSX->Checked($$refConfig{'FRIENDS_OPEN_XLSX'});               }
  else                                              { $winFriends->chFriendsOpenXLSX->Checked(1); $$refConfig{'FRIENDS_OPEN_XLSX'}      = 1;  } # Default is checked
  if (exists($$refConfig{'REMEMBER_SAVE_EVENT'}))   { $winEvent->chSaveEventDir->Checked($$refConfig{'REMEMBER_SAVE_EVENT'});                 }
  else                                              { $winEvent->chSaveEventDir->Checked(1);      $$refConfig{'REMEMBER_SAVE_EVENT'}    = 1;  } # Default is checked
  if (exists($$refConfig{'DOWN_PROFILE_ICONS'}))    { $winEvent->chDownProfileIcons->Checked($$refConfig{'DOWN_PROFILE_ICONS'});              }
  else                                              { $winEvent->chDownProfileIcons->Checked(1);  $$refConfig{'DOWN_PROFILE_ICONS'}     = 1;  } # Default is checked
    if (exists($$refConfig{'EVENT_OPEN_XLSX'}))    { $winEvent->chEventOpenXLSX->Checked($$refConfig{'EVENT_OPEN_XLSX'});                     }
  else                                              { $winEvent->chEventOpenXLSX->Checked(1);     $$refConfig{'EVENT_OPEN_XLSX'}        = 1;  } # Default is checked
  if (exists($$refConfig{'REMEMBER_SAVE_CHAT'}))    { $winChat->chSaveChatDir->Checked($$refConfig{'REMEMBER_SAVE_CHAT'});                    }
  else                                              { $winChat->chSaveChatDir->Checked(1);        $$refConfig{'REMEMBER_SAVE_CHAT'}     = 1;  } # Default is checked
  
  &saveConfig($refConfig);

}  #--- End loadConfig

#--------------------------#
sub scrollToBottom
#--------------------------#
{
  # Local variables
  my ($refMech, $time) = @_;
  
  while (1) {
    # Scrolling down and wait for content to load
    $$refMech->eval_in_page('window.scrollTo(0,document.body.scrollHeight)');
    sleep($time);
    
    # Evaluate end of the page
    my ($end, $type) = $$refMech->eval_in_page('(window.innerHeight + window.scrollY) >= document.body.offsetHeight');
    if ($end == 1) {
      sleep($time); # Wait another X seconds and evaluate again
      ($end, $type) = $$refMech->eval_in_page('(window.innerHeight + window.scrollY) >= document.body.offsetHeight');
      if ($end == 1) { last; } # End of the page
    }
  }

}  #--- End scrollToBottom

#--------------------------#
sub expandContent
#--------------------------#
{
  # Local variables
  my ($refMech) = @_;
  
  # Continue Reading
  $$refMech->eval_in_page("var el = document.getElementsByClassName('text_exposed_link'); for (var i=0;i<el.length; i++) { el[i].click(); }");
  
  # See more
  if ($winConfig->chOptSeemore->Checked() == 1) {
    $$refMech->eval_in_page("var el = document.getElementsByClassName('see_more_link'); for (var i=0;i<el.length; i++) { el[i].click(); }");
    $$refMech->eval_in_page("var el = document.getElementsByClassName('_5v47 fss'); for (var i=0;i<el.length; i++) { el[i].click(); }");
    $$refMech->eval_in_page("var el = document.getElementsByClassName('UFIReplySocialSentenceLinkText UFIReplySocialSentenceVerified'); for (var i=0;i<el.length; i++) { el[i].click(); }");
  }
  
  # More post (wait to find the good classname)

  # View \d+ more comments? / View previous comments / Reply / etc
  if ($winConfig->chOptComments->Checked() == 1) {
    $$refMech->eval_in_page("var el = document.getElementsByClassName('UFIPagerLink'); for (var i=0;i<el.length; i++) { el[i].click(); }");
    $$refMech->eval_in_page("var el = document.getElementsByClassName('UFICommentLink'); for (var i=0;i<el.length; i++) { el[i].click(); }");
    $$refMech->eval_in_page("var el = document.getElementsByClassName('UFIBlingBox uiBlingBox feedbackBling'); for (var i=0;i<el.length; i++) { el[i].click(); }");
  }

}  #--- End expandContent

#--------------------------#
sub cssSpriteBD
#--------------------------#
{
  # Local variables
  my ($sprite) = @_;
  my %bdSprites = (
    '_4_o0' => 'span._4_o0 { background-position:0 0 }', 
    '_4_o1' => 'span._4_o1 { background-position:0 -17px }', 
    '_4_o2' => 'span._4_o2 { background-position:0 -34px }', 
    '_4_o3' => 'span._4_o3 { background-position:0 -51px }', 
    '_4_o4' => 'span._4_o4 { background-position:0 -68px }', 
    '_4_o5' => 'span._4_o5 { background-position:0 -85px }', 
    '_4_o6' => 'span._4_o6 { background-position:0 -102px }', 
    '_4_o7' => 'span._4_o7 { background-position:0 -119px }', 
    '_4_o8' => 'span._4_o8 { background-position:0 -136px }', 
    '_4_o9' => 'span._4_o9 { background-position:0 -153px }', 
    '_4_oa' => 'span._4_oa { background-position:0 -170px }', 
    '_4_ob' => 'span._4_ob { background-position:0 -187px }', 
    '_4_oc' => 'span._4_oc { background-position:0 -204px }', 
    '_4_od' => 'span._4_od { background-position:0 -221px }', 
    '_4_oe' => 'span._4_oe { background-position:0 -238px }', 
    '_4_of' => 'span._4_of { background-position:0 -255px }', 
    '_2b_' => 'span._2b_ { background-position:0 -272px }', 
    '_2c0' => 'span._2c0 { background-position:0 -289px }', 
    '_4_og' => 'span._4_og { background-position:0 -306px }', 
    '_4_oh' => 'span._4_oh { background-position:0 -323px }', 
    '_4_oi' => 'span._4_oi { background-position:0 -340px }', 
    '_4_oj' => 'span._4_oj { background-position:0 -357px }', 
    '_4_ok' => 'span._4_ok { background-position:0 -374px }', 
    '_4_ol' => 'span._4_ol { background-position:0 -391px }', 
    '_2c1' => 'span._2c1 { background-position:0 -408px }', 
    '_2c2' => 'span._2c2 { background-position:0 -425px }', 
    '_2c3' => 'span._2c3 { background-position:0 -442px }', 
    '_2c4' => 'span._2c4 { background-position:0 -459px }', 
    '_2c5' => 'span._2c5 { background-position:0 -476px }', 
    '_2c6' => 'span._2c6 { background-position:0 -493px }', 
    '_2c7' => 'span._2c7 { background-position:0 -510px }', 
    '_2c8' => 'span._2c8 { background-position:0 -527px }', 
    '_2c9' => 'span._2c9 { background-position:0 -544px }', 
    '_2ca' => 'span._2ca { background-position:0 -561px }', 
    '_2cb' => 'span._2cb { background-position:0 -578px }', 
    '_2cc' => 'span._2cc { background-position:0 -595px }', 
    '_2cd' => 'span._2cd { background-position:0 -612px }', 
    '_2ce' => 'span._2ce { background-position:0 -629px }', 
    '_2cf' => 'span._2cf { background-position:0 -646px }', 
    '_2cg' => 'span._2cg { background-position:0 -663px }', 
    '_4_om' => 'span._4_om { background-position:0 -680px }', 
    '_4_on' => 'span._4_on { background-position:0 -697px }', 
    '_4_oo' => 'span._4_oo { background-position:0 -714px }', 
    '_2ch' => 'span._2ch { background-position:0 -731px }', 
    '_2ci' => 'span._2ci { background-position:0 -748px }', 
    '_2cj' => 'span._2cj { background-position:0 -765px }', 
    '_2ck' => 'span._2ck { background-position:0 -782px }', 
    '_4_op' => 'span._4_op { background-position:0 -799px }', 
    '_4_oq' => 'span._4_oq { background-position:0 -816px }', 
    '_4_or' => 'span._4_or { background-position:0 -833px }', 
    '_4_os' => 'span._4_os { background-position:0 -850px }', 
    '_4_ot' => 'span._4_ot { background-position:0 -867px }', 
    '_4_ou' => 'span._4_ou { background-position:0 -884px }', 
    '_4_ov' => 'span._4_ov { background-position:0 -901px }', 
    '_4_ow' => 'span._4_ow { background-position:0 -918px }', 
    '_4_ox' => 'span._4_ox { background-position:0 -935px }', 
    '_4_oy' => 'span._4_oy { background-position:0 -952px }', 
    '_4_oz' => 'span._4_oz { background-position:0 -969px }', 
    '_4_o-' => 'span._4_o- { background-position:0 -986px }', 
    '_4_o_' => 'span._4_o_ { background-position:0 -1003px }', 
    '_4_p0' => 'span._4_p0 { background-position:0 -1020px }', 
    '_4_p1' => 'span._4_p1 { background-position:0 -1037px }', 
    '_4_p2' => 'span._4_p2 { background-position:0 -1054px }', 
    '_4_p3' => 'span._4_p3 { background-position:0 -1071px }', 
    '_4_p4' => 'span._4_p4 { background-position:0 -1088px }', 
    '_4_p5' => 'span._4_p5 { background-position:0 -1105px }', 
    '_4_p6' => 'span._4_p6 { background-position:0 -1122px }', 
    '_2cl' => 'span._2cl { background-position:0 -1139px }', 
    '_2cm' => 'span._2cm { background-position:0 -1156px }', 
    '_4_p7' => 'span._4_p7 { background-position:0 -1173px }', 
    '_4_p8' => 'span._4_p8 { background-position:0 -1190px }', 
    '_2cn' => 'span._2cn { background-position:0 -1207px }', 
    '_2co' => 'span._2co { background-position:0 -1224px }', 
    '_2cp' => 'span._2cp { background-position:0 -1241px }', 
    '_2cq' => 'span._2cq { background-position:0 -1258px }', 
    '_2cr' => 'span._2cr { background-position:0 -1275px }', 
    '_2cs' => 'span._2cs { background-position:0 -1292px }', 
    '_4_p9' => 'span._4_p9 { background-position:0 -1309px }', 
    '_2ct' => 'span._2ct { background-position:0 -1326px }', 
    '_2cu' => 'span._2cu { background-position:0 -1343px }', 
    '_2cv' => 'span._2cv { background-position:0 -1360px }', 
    '_2cw' => 'span._2cw { background-position:0 -1377px }', 
    '_4_pa' => 'span._4_pa { background-position:0 -1394px }', 
    '_2cx' => 'span._2cx { background-position:0 -1411px }', 
    '_4_pb' => 'span._4_pb { background-position:0 -1428px }', 
    '_4_pc' => 'span._4_pc { background-position:0 -1445px }', 
    '_4_pd' => 'span._4_pd { background-position:0 -1462px }', 
    '_4_pe' => 'span._4_pe { background-position:0 -1479px }', 
    '_4_pf' => 'span._4_pf { background-position:0 -1496px }', 
    '_4_pg' => 'span._4_pg { background-position:0 -1513px }', 
    '_4_ph' => 'span._4_ph { background-position:0 -1530px }', 
    '_4_pi' => 'span._4_pi { background-position:0 -1547px }', 
    '_4_pj' => 'span._4_pj { background-position:0 -1564px }', 
    '_4_pk' => 'span._4_pk { background-position:0 -1581px }', 
    '_4_pl' => 'span._4_pl { background-position:0 -1598px }', 
    '_4_pm' => 'span._4_pm { background-position:0 -1615px }', 
    '_4_pn' => 'span._4_pn { background-position:0 -1632px }', 
    '_2cy' => 'span._2cy { background-position:0 -1649px }', 
    '_2cz' => 'span._2cz { background-position:0 -1666px }', 
    '_4_po' => 'span._4_po { background-position:0 -1683px }', 
    '_4_pp' => 'span._4_pp { background-position:0 -1700px }', 
    '_4_pq' => 'span._4_pq { background-position:0 -1717px }', 
    '_2c-' => 'span._2c- { background-position:0 -1734px }', 
    '_4_pr' => 'span._4_pr { background-position:0 -1751px }', 
    '_4_ps' => 'span._4_ps { background-position:0 -1768px }', 
    '_4_pt' => 'span._4_pt { background-position:0 -1785px }', 
    '_4_pu' => 'span._4_pu { background-position:0 -1802px }', 
    '_4_pv' => 'span._4_pv { background-position:0 -1819px }', 
    '_4_pw' => 'span._4_pw { background-position:0 -1836px }', 
    '_4_px' => 'span._4_px { background-position:0 -1853px }', 
    '_4_py' => 'span._4_py { background-position:0 -1870px }', 
    '_4_pz' => 'span._4_pz { background-position:0 -1887px }', 
    '_4_p-' => 'span._4_p- { background-position:0 -1904px }', 
    '_4_p_' => 'span._4_p_ { background-position:0 -1921px }', 
    '_4_q0' => 'span._4_q0 { background-position:0 -1938px }', 
    '_4_q1' => 'span._4_q1 { background-position:0 -1955px }', 
    '_4_q2' => 'span._4_q2 { background-position:0 -1972px }', 
    '_4_q3' => 'span._4_q3 { background-position:0 -1989px }', 
    '_4_q4' => 'span._4_q4 { background-position:0 -2006px }', 
    '_4_q5' => 'span._4_q5 { background-position:0 -2023px }', 
    '_4_q6' => 'span._4_q6 { background-position:0 -2040px }', 
    '_4_q7' => 'span._4_q7 { background-position:0 -2057px }', 
    '_4_q8' => 'span._4_q8 { background-position:0 -2074px }', 
    '_4_q9' => 'span._4_q9 { background-position:0 -2091px }', 
    '_2c_' => 'span._2c_ { background-position:0 -2108px }', 
    '_2d0' => 'span._2d0 { background-position:0 -2125px }', 
    '_2d1' => 'span._2d1 { background-position:0 -2142px }', 
    '_2d2' => 'span._2d2 { background-position:0 -2159px }', 
    '_2d3' => 'span._2d3 { background-position:0 -2176px }', 
    '_2d4' => 'span._2d4 { background-position:0 -2193px }', 
    '_2d5' => 'span._2d5 { background-position:0 -2210px }', 
    '_2d6' => 'span._2d6 { background-position:0 -2227px }', 
    '_2d7' => 'span._2d7 { background-position:0 -2244px }', 
    '_2d8' => 'span._2d8 { background-position:0 -2261px }', 
    '_2d9' => 'span._2d9 { background-position:0 -2278px }', 
    '_2da' => 'span._2da { background-position:0 -2295px }', 
    '_2db' => 'span._2db { background-position:0 -2312px }', 
    '_2dc' => 'span._2dc { background-position:0 -2329px }', 
    '_2dd' => 'span._2dd { background-position:0 -2346px }', 
    '_2de' => 'span._2de { background-position:0 -2363px }', 
    '_2df' => 'span._2df { background-position:0 -2380px }', 
    '_2dg' => 'span._2dg { background-position:0 -2397px }', 
    '_2dh' => 'span._2dh { background-position:0 -2414px }', 
    '_2di' => 'span._2di { background-position:0 -2431px }', 
    '_2dj' => 'span._2dj { background-position:0 -2448px }', 
    '_2dk' => 'span._2dk { background-position:0 -2465px }', 
    '_2dl' => 'span._2dl { background-position:0 -2482px }', 
    '_2dm' => 'span._2dm { background-position:0 -2499px }', 
    '_2dn' => 'span._2dn { background-position:0 -2516px }', 
    '_2do' => 'span._2do { background-position:0 -2533px }', 
    '_2dp' => 'span._2dp { background-position:0 -2550px }', 
    '_2dq' => 'span._2dq { background-position:0 -2567px }', 
    '_491' => 'span._491 { background-position:0 -2584px }', 
    '_2dr' => 'span._2dr { background-position:0 -2601px }', 
    '_2ds' => 'span._2ds { background-position:0 -2618px }', 
    '_2dt' => 'span._2dt { background-position:0 -2635px }', 
    '_2du' => 'span._2du { background-position:0 -2652px }', 
    '_2dv' => 'span._2dv { background-position:0 -2669px }', 
    '_2dw' => 'span._2dw { background-position:0 -2686px }', 
    '_2dx' => 'span._2dx { background-position:0 -2703px }', 
    '_2dy' => 'span._2dy { background-position:0 -2720px }', 
    '_2dz' => 'span._2dz { background-position:0 -2737px }', 
    '_2d-' => 'span._2d- { background-position:0 -2754px }', 
    '_2d_' => 'span._2d_ { background-position:0 -2771px }', 
    '_2e0' => 'span._2e0 { background-position:0 -2788px }', 
    '_2e1' => 'span._2e1 { background-position:0 -2805px }', 
    '_2e2' => 'span._2e2 { background-position:0 -2822px }', 
    '_2e3' => 'span._2e3 { background-position:0 -2839px }', 
    '_2e4' => 'span._2e4 { background-position:0 -2856px }', 
    '_2e5' => 'span._2e5 { background-position:0 -2873px }', 
    '_2e6' => 'span._2e6 { background-position:0 -2890px }', 
    '_2e7' => 'span._2e7 { background-position:0 -2907px }', 
    '_2e8' => 'span._2e8 { background-position:0 -2924px }', 
    '_2e9' => 'span._2e9 { background-position:0 -2941px }', 
    '_2ea' => 'span._2ea { background-position:0 -2958px }', 
    '_4_qa' => 'span._4_qa { background-position:0 -2975px }', 
    '_4_qb' => 'span._4_qb { background-position:0 -2992px }', 
    '_4_qc' => 'span._4_qc { background-position:0 -3009px }', 
    '_4_qd' => 'span._4_qd { background-position:0 -3026px }', 
    '_4_qe' => 'span._4_qe { background-position:0 -3043px }', 
    '_4_qf' => 'span._4_qf { background-position:0 -3060px }', 
    '_4_qg' => 'span._4_qg { background-position:0 -3077px }', 
    '_4_qh' => 'span._4_qh { background-position:0 -3094px }', 
    '_4_qi' => 'span._4_qi { background-position:0 -3111px }', 
    '_4_qj' => 'span._4_qj { background-position:0 -3128px }', 
    '_4_qk' => 'span._4_qk { background-position:0 -3145px }', 
    '_4_ql' => 'span._4_ql { background-position:0 -3162px }', 
    '_2eb' => 'span._2eb { background-position:0 -3179px }', 
    '_2ec' => 'span._2ec { background-position:0 -3196px }', 
    '_2ed' => 'span._2ed { background-position:0 -3213px }', 
    '_2ee' => 'span._2ee { background-position:0 -3230px }', 
    '_2ef' => 'span._2ef { background-position:0 -3247px }', 
    '_2eg' => 'span._2eg { background-position:0 -3264px }', 
    '_2eh' => 'span._2eh { background-position:0 -3281px }', 
    '_2ei' => 'span._2ei { background-position:0 -3298px }', 
    '_2ej' => 'span._2ej { background-position:0 -3315px }', 
    '_2ek' => 'span._2ek { background-position:0 -3332px }', 
    '_2el' => 'span._2el { background-position:0 -3349px }', 
    '_2em' => 'span._2em { background-position:0 -3366px }', 
    '_2en' => 'span._2en { background-position:0 -3383px }', 
    '_2eo' => 'span._2eo { background-position:0 -3400px }', 
    '_2ep' => 'span._2ep { background-position:0 -3417px }', 
    '_2eq' => 'span._2eq { background-position:0 -3434px }', 
    '_2er' => 'span._2er { background-position:0 -3451px }', 
    '_2es' => 'span._2es { background-position:0 -3468px }', 
    '_2et' => 'span._2et { background-position:0 -3485px }', 
    '_2eu' => 'span._2eu { background-position:0 -3502px }', 
    '_2ev' => 'span._2ev { background-position:0 -3519px }', 
    '_2ew' => 'span._2ew { background-position:0 -3536px }', 
    '_2ex' => 'span._2ex { background-position:0 -3553px }', 
    '_4_qm' => 'span._4_qm { background-position:0 -3570px }', 
    '_2ey' => 'span._2ey { background-position:0 -3587px }', 
    '_4_qn' => 'span._4_qn { background-position:0 -3604px }', 
    '_4_qo' => 'span._4_qo { background-position:0 -3621px }', 
    '_4_qp' => 'span._4_qp { background-position:0 -3638px }', 
    '_2ez' => 'span._2ez { background-position:0 -3655px }', 
    '_4_qq' => 'span._4_qq { background-position:0 -3672px }', 
    '_4_qr' => 'span._4_qr { background-position:0 -3689px }', 
    '_4_qs' => 'span._4_qs { background-position:0 -3706px }', 
    '_2e-' => 'span._2e- { background-position:0 -3723px }', 
    '_2e_' => 'span._2e_ { background-position:0 -3740px }', 
    '_2f0' => 'span._2f0 { background-position:0 -3757px }', 
    '_4_qt' => 'span._4_qt { background-position:0 -3774px }', 
    '_2f1' => 'span._2f1 { background-position:0 -3791px }', 
    '_2f2' => 'span._2f2 { background-position:0 -3808px }', 
    '_2f3' => 'span._2f3 { background-position:0 -3825px }', 
    '_2f4' => 'span._2f4 { background-position:0 -3842px }', 
    '_2f5' => 'span._2f5 { background-position:0 -3859px }', 
    '_2f6' => 'span._2f6 { background-position:0 -3876px }', 
    '_2f7' => 'span._2f7 { background-position:0 -3893px }', 
    '_2f8' => 'span._2f8 { background-position:0 -3910px }', 
    '_2f9' => 'span._2f9 { background-position:0 -3927px }', 
    '_2fa' => 'span._2fa { background-position:0 -3944px }', 
    '_4_qu' => 'span._4_qu { background-position:0 -3961px }', 
    '_4_qv' => 'span._4_qv { background-position:0 -3978px }', 
    '_4_qw' => 'span._4_qw { background-position:0 -3995px }', 
    '_4_qx' => 'span._4_qx { background-position:0 -4012px }', 
    '_2fb' => 'span._2fb { background-position:0 -4029px }', 
    '_4_qy' => 'span._4_qy { background-position:0 -4046px }', 
    '_2fc' => 'span._2fc { background-position:0 -4063px }', 
    '_2fd' => 'span._2fd { background-position:0 -4080px }', 
    '_4_qz' => 'span._4_qz { background-position:0 -4097px }', 
    '_2fe' => 'span._2fe { background-position:0 -4114px }', 
    '_2ff' => 'span._2ff { background-position:0 -4131px }', 
    '_2fg' => 'span._2fg { background-position:0 -4148px }', 
    '_4_q-' => 'span._4_q- { background-position:0 -4165px }', 
    '_4_q_' => 'span._4_q_ { background-position:0 -4182px }', 
    '_4_r0' => 'span._4_r0 { background-position:0 -4199px }', 
    '_4_r1' => 'span._4_r1 { background-position:0 -4216px }', 
    '_4_r2' => 'span._4_r2 { background-position:0 -4233px }', 
    '_2fh' => 'span._2fh { background-position:0 -4250px }', 
    '_4_r3' => 'span._4_r3 { background-position:0 -4267px }', 
    '_2fi' => 'span._2fi { background-position:0 -4284px }', 
    '_2fj' => 'span._2fj { background-position:0 -4301px }', 
    '_2fk' => 'span._2fk { background-position:0 -4318px }', 
    '_2fl' => 'span._2fl { background-position:0 -4335px }', 
    '_4_r4' => 'span._4_r4 { background-position:0 -4352px }', 
    '_4_r5' => 'span._4_r5 { background-position:0 -4369px }', 
    '_2fm' => 'span._2fm { background-position:0 -4386px }', 
    '_2fn' => 'span._2fn { background-position:0 -4403px }', 
    '_4_r6' => 'span._4_r6 { background-position:0 -4420px }', 
    '_4_r7' => 'span._4_r7 { background-position:0 -4437px }', 
    '_4_r8' => 'span._4_r8 { background-position:0 -4454px }', 
    '_4_r9' => 'span._4_r9 { background-position:0 -4471px }', 
    '_4_ra' => 'span._4_ra { background-position:0 -4488px }', 
    '_4_rb' => 'span._4_rb { background-position:0 -4505px }', 
    '_4_rc' => 'span._4_rc { background-position:0 -4522px }', 
    '_4_rd' => 'span._4_rd { background-position:0 -4539px }', 
    '_4_re' => 'span._4_re { background-position:0 -4556px }', 
    '_4_rf' => 'span._4_rf { background-position:0 -4573px }', 
    '_2fo' => 'span._2fo { background-position:0 -4590px }', 
    '_2fp' => 'span._2fp { background-position:0 -4607px }', 
    '_4_rg' => 'span._4_rg { background-position:0 -4624px }', 
    '_4_rh' => 'span._4_rh { background-position:0 -4641px }', 
    '_4_ri' => 'span._4_ri { background-position:0 -4658px }', 
    '_4_rj' => 'span._4_rj { background-position:0 -4675px }', 
    '_2fq' => 'span._2fq { background-position:0 -4692px }', 
    '_4_rk' => 'span._4_rk { background-position:0 -4709px }', 
    '_4_rl' => 'span._4_rl { background-position:0 -4726px }', 
    '_4_rm' => 'span._4_rm { background-position:0 -4743px }', 
    '_4_rn' => 'span._4_rn { background-position:0 -4760px }', 
    '_4_ro' => 'span._4_ro { background-position:0 -4777px }', 
    '_4_rp' => 'span._4_rp { background-position:0 -4794px }', 
    '_4_rq' => 'span._4_rq { background-position:0 -4811px }', 
    '_4_rr' => 'span._4_rr { background-position:0 -4828px }', 
    '_4_rs' => 'span._4_rs { background-position:0 -4845px }', 
    '_4_rt' => 'span._4_rt { background-position:0 -4862px }', 
    '_2fr' => 'span._2fr { background-position:0 -4879px }', 
    '_4_ru' => 'span._4_ru { background-position:0 -4896px }', 
    '_492' => 'span._492 { background-position:0 -4913px }', 
    '_4_rv' => 'span._4_rv { background-position:0 -4930px }', 
    '_4_rw' => 'span._4_rw { background-position:0 -4947px }', 
    '_4_rx' => 'span._4_rx { background-position:0 -4964px }', 
    '_4_ry' => 'span._4_ry { background-position:0 -4981px }', 
    '_4_rz' => 'span._4_rz { background-position:0 -4998px }', 
    '_4_r-' => 'span._4_r- { background-position:0 -5015px }', 
    '_4_r_' => 'span._4_r_ { background-position:0 -5032px }', 
    '_4_s0' => 'span._4_s0 { background-position:0 -5049px }', 
    '_4_s1' => 'span._4_s1 { background-position:0 -5066px }', 
    '_4_s2' => 'span._4_s2 { background-position:0 -5083px }', 
    '_4_s3' => 'span._4_s3 { background-position:0 -5100px }', 
    '_4_s4' => 'span._4_s4 { background-position:0 -5117px }', 
    '_4_s5' => 'span._4_s5 { background-position:0 -5134px }', 
    '_4_s6' => 'span._4_s6 { background-position:0 -5151px }', 
    '_4_s7' => 'span._4_s7 { background-position:0 -5168px }', 
    '_2fs' => 'span._2fs { background-position:0 -5185px }', 
    '_2ft' => 'span._2ft { background-position:0 -5202px }', 
    '_2fu' => 'span._2fu { background-position:0 -5219px }', 
    '_2fv' => 'span._2fv { background-position:0 -5236px }', 
    '_2fw' => 'span._2fw { background-position:0 -5253px }', 
    '_2fx' => 'span._2fx { background-position:0 -5270px }', 
    '_1q3y' => 'span._1q3y { background-position:0 -5287px }', 
    '_2fz' => 'span._2fz { background-position:0 -5304px }', 
    '_2f-' => 'span._2f- { background-position:0 -5321px }', 
    '_2f_' => 'span._2f_ { background-position:0 -5338px }', 
    '_2g0' => 'span._2g0 { background-position:0 -5355px }', 
    '_2g1' => 'span._2g1 { background-position:0 -5372px }', 
    '_2g2' => 'span._2g2 { background-position:0 -5389px }', 
    '_2g3' => 'span._2g3 { background-position:0 -5406px }', 
    '_2g4' => 'span._2g4 { background-position:0 -5423px }', 
    '_2g5' => 'span._2g5 { background-position:0 -5440px }', 
    '_2g6' => 'span._2g6 { background-position:0 -5457px }', 
    '_2g7' => 'span._2g7 { background-position:0 -5474px }', 
    '_2g8' => 'span._2g8 { background-position:0 -5491px }', 
    '_2g9' => 'span._2g9 { background-position:0 -5508px }', 
    '_2ga' => 'span._2ga { background-position:0 -5525px }', 
    '_2gb' => 'span._2gb { background-position:0 -5542px }', 
    '_2gc' => 'span._2gc { background-position:0 -5559px }', 
    '_2gd' => 'span._2gd { background-position:0 -5576px }', 
    '_2ge' => 'span._2ge { background-position:0 -5593px }', 
    '_2gf' => 'span._2gf { background-position:0 -5610px }', 
    '_2gg' => 'span._2gg { background-position:0 -5627px }', 
    '_2gh' => 'span._2gh { background-position:0 -5644px }', 
    '_2gi' => 'span._2gi { background-position:0 -5661px }', 
    '_2gj' => 'span._2gj { background-position:0 -5678px }', 
    '_2gk' => 'span._2gk { background-position:0 -5695px }', 
    '_2gl' => 'span._2gl { background-position:0 -5712px }', 
    '_2gm' => 'span._2gm { background-position:0 -5729px }', 
    '_2gn' => 'span._2gn { background-position:0 -5746px }', 
    '_2go' => 'span._2go { background-position:0 -5763px }', 
    '_2gp' => 'span._2gp { background-position:0 -5780px }', 
    '_2gq' => 'span._2gq { background-position:0 -5797px }', 
    '_2gr' => 'span._2gr { background-position:0 -5814px }', 
    '_2gs' => 'span._2gs { background-position:0 -5831px }', 
    '_2gt' => 'span._2gt { background-position:0 -5848px }', 
    '_2gu' => 'span._2gu { background-position:0 -5865px }', 
    '_2gv' => 'span._2gv { background-position:0 -5882px }', 
    '_2gw' => 'span._2gw { background-position:0 -5899px }', 
    '_2gx' => 'span._2gx { background-position:0 -5916px }', 
    '_2gy' => 'span._2gy { background-position:0 -5933px }', 
    '_2gz' => 'span._2gz { background-position:0 -5950px }', 
    '_2g-' => 'span._2g- { background-position:0 -5967px }', 
    '_2g_' => 'span._2g_ { background-position:0 -5984px }', 
    '_4_s8' => 'span._4_s8 { background-position:0 -6001px }', 
    '_4_s9' => 'span._4_s9 { background-position:0 -6018px }', 
    '_4_sa' => 'span._4_sa { background-position:0 -6035px }', 
    '_4_sb' => 'span._4_sb { background-position:0 -6052px }', 
    '_4_sc' => 'span._4_sc { background-position:0 -6069px }', 
    '_4_sd' => 'span._4_sd { background-position:0 -6086px }', 
    '_4_se' => 'span._4_se { background-position:0 -6103px }', 
    '_4_sf' => 'span._4_sf { background-position:0 -6120px }', 
    '_4_sg' => 'span._4_sg { background-position:0 -6137px }', 
    '_4_sh' => 'span._4_sh { background-position:0 -6154px }', 
    '_4_si' => 'span._4_si { background-position:0 -6171px }', 
    '_4_sj' => 'span._4_sj { background-position:0 -6188px }', 
    '_4_sk' => 'span._4_sk { background-position:0 -6205px }', 
    '_4_sl' => 'span._4_sl { background-position:0 -6222px }', 
    '_4_sm' => 'span._4_sm { background-position:0 -6239px }', 
    '_4_sn' => 'span._4_sn { background-position:0 -6256px }', 
    '_4_so' => 'span._4_so { background-position:0 -6273px }', 
    '_4_sp' => 'span._4_sp { background-position:0 -6290px }', 
    '_4_sq' => 'span._4_sq { background-position:0 -6307px }', 
    '_4_sr' => 'span._4_sr { background-position:0 -6324px }', 
    '_4_ss' => 'span._4_ss { background-position:0 -6341px }', 
    '_4_st' => 'span._4_st { background-position:0 -6358px }', 
    '_4_su' => 'span._4_su { background-position:0 -6375px }', 
    '_4_sv' => 'span._4_sv { background-position:0 -6392px }', 
    '_4_sw' => 'span._4_sw { background-position:0 -6409px }', 
    '_4_sx' => 'span._4_sx { background-position:0 -6426px }', 
    '_4_sy' => 'span._4_sy { background-position:0 -6443px }', 
    '_4_sz' => 'span._4_sz { background-position:0 -6460px }', 
    '_4_s-' => 'span._4_s- { background-position:0 -6545px }', 
    '_4_s_' => 'span._4_s_ { background-position:0 -6562px }', 
    '_4_t0' => 'span._4_t0 { background-position:0 -6579px }', 
    '_4_t1' => 'span._4_t1 { background-position:0 -6596px }', 
    '_4_t2' => 'span._4_t2 { background-position:0 -6613px }', 
    '_4_t3' => 'span._4_t3 { background-position:0 -6630px }', 
    '_4_t4' => 'span._4_t4 { background-position:0 -6681px }', 
    '_2h0' => 'span._2h0 { background-position:0 -6732px }', 
    '_2h1' => 'span._2h1 { background-position:0 -6749px }', 
    '_4_t5' => 'span._4_t5 { background-position:0 -6851px }', 
    '_4_t6' => 'span._4_t6 { background-position:0 -6868px }', 
    '_2h2' => 'span._2h2 { background-position:0 -6885px }', 
    '_4_t7' => 'span._4_t7 { background-position:0 -6902px }', 
    '_4_t8' => 'span._4_t8 { background-position:0 -6919px }', 
    '_4_t9' => 'span._4_t9 { background-position:0 -6936px }', 
    '_4_ta' => 'span._4_ta { background-position:0 -6953px }', 
    '_2h3' => 'span._2h3 { background-position:0 -6970px }', 
    '_4_tb' => 'span._4_tb { background-position:0 -6987px }', 
    '_4_tc' => 'span._4_tc { background-position:0 -7004px }', 
    '_4_td' => 'span._4_td { background-position:0 -7021px }', 
    '_4_te' => 'span._4_te { background-position:0 -7038px }', 
    '_4_tf' => 'span._4_tf { background-position:0 -7055px }', 
    '_4_tg' => 'span._4_tg { background-position:0 -7072px }', 
    '_4_th' => 'span._4_th { background-position:0 -7089px }', 
    '_2h4' => 'span._2h4 { background-position:0 -7157px }', 
    '_2h5' => 'span._2h5 { background-position:0 -7174px }', 
    '_2h6' => 'span._2h6 { background-position:0 -7191px }', 
    '_4_ti' => 'span._4_ti { background-position:0 -7276px }', 
    '_4_tj' => 'span._4_tj { background-position:0 -7293px }', 
    '_4_tk' => 'span._4_tk { background-position:0 -7395px }', 
    '_4_tl' => 'span._4_tl { background-position:0 -7412px }', 
    '_4_tm' => 'span._4_tm { background-position:0 -7463px }', 
    '_4_tn' => 'span._4_tn { background-position:0 -7480px }', 
    '_4_to' => 'span._4_to { background-position:0 -7497px }', 
    '_4_tp' => 'span._4_tp { background-position:0 -7514px }', 
    '_4_tq' => 'span._4_tq { background-position:0 -7531px }', 
    '_4_tr' => 'span._4_tr { background-position:0 -7548px }', 
    '_4_ts' => 'span._4_ts { background-position:0 -7565px }', 
    '_4_tt' => 'span._4_tt { background-position:0 -7582px }', 
    '_4_tu' => 'span._4_tu { background-position:0 -6477px }', 
    '_4_tv' => 'span._4_tv { background-position:0 -6494px }', 
    '_4_tw' => 'span._4_tw { background-position:0 -6511px }', 
    '_4_tx' => 'span._4_tx { background-position:0 -6528px }', 
    '_2h7' => 'span._2h7 { background-position:0 -6647px }', 
    '_2h8' => 'span._2h8 { background-position:0 -6664px }', 
    '_2h9' => 'span._2h9 { background-position:0 -6698px }', 
    '_2ha' => 'span._2ha { background-position:0 -6715px }', 
    '_4_ty' => 'span._4_ty { background-position:0 -6766px }', 
    '_4_tz' => 'span._4_tz { background-position:0 -6783px }', 
    '_4_t-' => 'span._4_t- { background-position:0 -6800px }', 
    '_4_t_' => 'span._4_t_ { background-position:0 -6817px }', 
    '_4_u0' => 'span._4_u0 { background-position:0 -6834px }', 
    '_4_u1' => 'span._4_u1 { background-position:0 -7106px }', 
    '_4_u2' => 'span._4_u2 { background-position:0 -7123px }', 
    '_4_u3' => 'span._4_u3 { background-position:0 -7140px }', 
    '_4_u4' => 'span._4_u4 { background-position:0 -7208px }', 
    '_2hb' => 'span._2hb { background-position:0 -7225px }', 
    '_4_u5' => 'span._4_u5 { background-position:0 -7242px }', 
    '_4_u6' => 'span._4_u6 { background-position:0 -7259px }', 
    '_4_u7' => 'span._4_u7 { background-position:0 -7310px }', 
    '_4_u8' => 'span._4_u8 { background-position:0 -7327px }', 
    '_4_u9' => 'span._4_u9 { background-position:0 -7344px }', 
    '_4_ua' => 'span._4_ua { background-position:0 -7361px }', 
    '_2hc' => 'span._2hc { background-position:0 -7378px }', 
    '_4_ub' => 'span._4_ub { background-position:0 -7429px }', 
    '_4_uc' => 'span._4_uc { background-position:0 -7446px }', 
    '_4_ud' => 'span._4_ud { background-position:0 -7599px }', 
    '_4_ue' => 'span._4_ue { background-position:0 -7616px }',
  );

  
  # Return the code if exist
  if (exists($bdSprites{$sprite})) { return($bdSprites{$sprite}); }

}  #--- End cssSpriteBD

#--------------------------#
sub emoticon
#--------------------------#
{
  # Local variables
  my ($emoticonTag) = @_;
  my %bdImoticon = (
    'emoticon_smile' => 'span.emoticon_smile { background-position:0 -340px }', 
    'emoticon_frown' => 'span.emoticon_frown { background-position:0 -119px }', 
    'emoticon_poop' => 'span.emoticon_poop { background-position:0 -289px }', 
    'emoticon_putnam' => 'span.emoticon_putnam { background-position:0 -306px }', 
    'emoticon_tongue' => 'span.emoticon_tongue { background-position:0 -391px }', 
    'emoticon_grin' => 'span.emoticon_grin { background-position:0 -170px }', 
    'emoticon_gasp' => 'span.emoticon_gasp { background-position:0 -136px }', 
    'emoticon_wink' => 'span.emoticon_wink { background-position:0 -442px }', 
    'emoticon_glasses' => 'span.emoticon_glasses { background-position:0 -153px }', 
    'emoticon_sunglasses' => 'span.emoticon_sunglasses { background-position:0 -374px }', 
    'emoticon_grumpy' => 'span.emoticon_grumpy { background-position:0 -187px }', 
    'emoticon_unsure' => 'span.emoticon_unsure { background-position:0 -408px }', 
    'emoticon_cry' => 'span.emoticon_cry { background-position:0 -85px }', 
    'emoticon_devil' => 'span.emoticon_devil { background-position:0 -102px }', 
    'emoticon_angel' => 'span.emoticon_angel { background-position:0 -17px }', 
    'emoticon_kiss' => 'span.emoticon_kiss { background-position:0 -238px }', 
    'emoticon_heart' => 'span.emoticon_heart { background-position:0 -204px }', 
    'emoticon_kiki' => 'span.emoticon_kiki { background-position:0 -221px }', 
    'emoticon_squint' => 'span.emoticon_squint { background-position:0 -357px }', 
    'emoticon_confused' => 'span.emoticon_confused { background-position:0 -51px }', 
    'emoticon_confused_rev' => 'span.emoticon_confused_rev { background-position:0 -68px }', 
    'emoticon_upset' => 'span.emoticon_upset { background-position:0 -425px }', 
    'emoticon_pacman' => 'span.emoticon_pacman { background-position:0 -255px }', 
    'emoticon_robot' => 'span.emoticon_robot { background-position:0 -459px }', 
    'emoticon_colonthree' => 'span.emoticon_colonthree { background-position:0 -34px }', 
    'emoticon_penguin' => 'span.emoticon_penguin { background-position:0 -272px }', 
    'emoticon_shark' => 'span.emoticon_shark { background-position:0 -323px }', 
    'emoticon_like' => 'span.emoticon_like { background-position:0 0 }', 
  );

  
  # Return the code if exist
  if (exists($bdImoticon{$emoticonTag})) { return($bdImoticon{$emoticonTag}); }

}  #--- End emoticon