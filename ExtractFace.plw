#!/usr/bin/perl
# Perl - v: 5.16.3
#------------------------------------------------------------------------------#
# Tool name			: ExtractFace
# Description		: Dump Facebook stuff for analysis or reporting purposes
# WebSite				: http://le-tools.com/ExtractFace.html
# Documentation	: http://le-tools.com/ExtractFaceDoc.html
# SourceForge		: https://sourceforge.net/p/extractface
# GitHub				: https://github.com/arioux/ExtractFace
# Creation			: 2015-08-01
# Modified			: 2017-11-26
my $VERSION			= "6.2";
# Author				: Alain Rioux (admin@le-tools.com)
#
# Copyright (C) 2015-2017  Alain Rioux (le-tools.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#------------------------------------------------------------------------------#
# Modules
#------------------------------------------------------------------------------#
use strict;
use warnings;
use threads;
use threads::shared;
use utf8;
use arybase;
use Encode qw(encode decode);
use DBI;
use File::Path qw(remove_tree);
use Firefox::Application::API40;
use Firefox::Application;
use LWP::UserAgent;
use Module::Pluggable::Fast;
use MozRepl::Client;
use MozRepl::Log;
use MozRepl::RemoteObject;
use MozRepl;
use WWW::Mechanize::Firefox;
use Time::Local;
use Time::HiRes qw(usleep);
use DateTime;
use DateTime::Format::Strptime;
use DateTime::TimeZone;
use Win32::API();
use Win32::GUI;
use Win32::GUI qw( WS_POPUP WS_CAPTION WS_THICKFRAME WS_EX_TOPMOST );
use Win32::GUI::BitmapInline();
use Win32::GUI::Grid;
use Win32::Process;
require "ExtractFaceGraph.pl";
require "ExtractFaceLang.pl";
require "ExtractFaceFunctions.pl";

#------------------------------------------------------------------------------#
# Graphic elements
#------------------------------------------------------------------------------#
my ($winICO, $logoBmp, $albumBmp, $friendsBmp, $eventBmp, $contribBmp, $chatBmp,
    $configBmp, $browseBmp, $explorerBmp, $refresh16) = &loadGraph();
  
#------------------------------------------------------------------------------#
# Global variables
#------------------------------------------------------------------------------#
my $PROGDIR = $0;                                                              # Program path
while (chop($PROGDIR) ne "\\") { }                                             # Dir only
my $USERDIR;                                                                   # User path
if (-d "$ENV{'APPDATA'}\\ExtractFace") { $USERDIR = "$ENV{'APPDATA'}\\ExtractFace"; }
else                                   { $USERDIR = $PROGDIR;                       }
my $URL_DOC      = "http://le-tools.com/ExtractFaceDoc.html";                  # Online documentation
my $CONFIG_FILE  = "$USERDIR\\ExtractFace.ini";                                # Configuration file
my $LANG_FILE    = "$USERDIR\\Lang.ini";                                       # Langage file
my $DEBUG_FILE   = "$USERDIR\\debug.log";                                			 # Log for error
my %CONFIG;                                                                    # Configuration
my %STR;                                                                       # Strings for GUI
my $ARROW       :shared;                                                       # Arrow pointer
my $HOURGLASS   :shared;                                                       # Hourglass pointer
my $START       = 0;                                                           # Indicate when program is started
my $THR;                                                                       # Thread

#------------------------------------------------------------------------------#
# Strings
#------------------------------------------------------------------------------#
&loadDefaultStr(\%STR); 																											 # Load default language (en)
&loadStr(\%STR, $LANG_FILE) if -e $LANG_FILE and -T $LANG_FILE; 							 # If language file, load translated strings

#------------------------------------------------------------------------------#
# Splash window
#------------------------------------------------------------------------------#
my $splash = new Win32::GUI::Window ( -name       => 'Splash'                  ,
                                      -text       => 'Splash'                  ,
                                      -size       => [128,128]                 ,
                                      -pos        => [100,100]                 ,
                                      -addstyle   => WS_POPUP                  ,
                                      -popstyle   => WS_CAPTION | WS_THICKFRAME,
                                      -addexstyle => WS_EX_TOPMOST             , );
$splash->AddLabel(                    -name       => 'Bitmap'                  ,
                                      -size       => [128,128]                 ,
                                      -pos        => [  0,  0]                 ,
                                      -bitmap     => $logoBmp                  , );

#------------------------------------------------------------------------------#
# Main window
#------------------------------------------------------------------------------#
my $screen    = Win32::GUI::GetDesktopWindow(); # Screen resolution
my $scrnX     = Win32::GUI::Width($screen);     # Width
my $scrnY     = Win32::GUI::Height($screen);    # Height
my $winWidth  = 520;
my $winHeight = 195;
my $winPosX   = ($scrnX - $winWidth)  / 2;
my $winPosY   = ($scrnY - $winHeight) / 2;
my $win = Win32::GUI::Window->new(-name       => 'main'               ,
																	-title      => 'ExtractFace'        ,
																	-background => [255, 255, 255]      ,
																	-width      => $winWidth            ,
																	-height     => $winHeight           ,
																	-pos        => [$winPosX, $winPosY] ,
																	-resizable  => 0                    ,
																	-hasmaximize=> 0                    , );
$win->SetIcon($winICO);
# Fonts
sub LOGPIXELSX() {88}
sub getDPI { return(Win32::GUI::DC->new()->GetDeviceCaps(LOGPIXELSX)); }
my $DPI = &getDPI();
my $fontGB;
my $fontGB2;
my $font8;
my $font10;
my $font10t;
# Larger size (125% and 150%)
if ($DPI >= 120) {
  $fontGB  = new Win32::GUI::Font(-name => 'Arial', -size => 10, -bold => 1);
  $fontGB2 = new Win32::GUI::Font(-name => 'Arial', -size => 10, -bold => 1, -underline => 1);
  $font8   = new Win32::GUI::Font(-name => 'Arial', -size =>  6);
  $font10  = new Win32::GUI::Font(-name => 'Arial', -size =>  8);
  $font10t = new Win32::GUI::Font(-name => 'Arial', -size =>  8, -underline => 1);
# Normal size
} else {
  $fontGB  = new Win32::GUI::Font(-name => 'Arial', -size => 12, -bold => 1);
  $fontGB2 = new Win32::GUI::Font(-name => 'Arial', -size => 12, -bold => 1, -underline => 1);
  $font8   = new Win32::GUI::Font(-name => 'Arial', -size =>  8);
  $font10  = new Win32::GUI::Font(-name => 'Arial', -size => 10);
  $font10t = new Win32::GUI::Font(-name => 'Arial', -size => 10, -underline => 1);
}
# Load Pointers
my $loadImage = new Win32::API('user32', 'LoadImage', ['N','N','I','I','I','I'],'N');
$HOURGLASS    = $loadImage->Call(0, 32514, 2, 0, 0, 0x8040);
$ARROW        = $loadImage->Call(0, 32512, 2, 0, 0, 0x8040);
# Taskbar
$win->AddNotifyIcon(-name    => "Tray"           , 
                    -icon    => $winICO          ,
                    -tip     => 'ExtractFace'    ,
                    -balloon => 1                , );
# Main section
$win->AddLabel(   -name        => 'lblLogo'           ,
                  -size        => [128,128]           ,
                  -pos         => [  0,  5]           ,
                  -bitmap      => $logoBmp            ,
                  -background  => [255, 255, 255]     , );
$win->AddLabel(   -name        => 'lblText1'          ,
                  -size        => [ 90, 65]           ,
                  -pos         => [135, 10]           ,
                  -font        => $font10             ,
                  -foreground  => [0  , 0  , 102]     ,
                  -background  => [255, 255, 255]     ,
                  -text        => $STR{'update4'}.":\n".$STR{'website'}.":\n".$STR{'author'}.":\n".$STR{'translatedBy'}.':', );
$win->AddLabel(   -name        => 'lblText2'          ,
                  -size        => [270, 65]           ,
                  -pos         => [230, 10]           ,
                  -font        => $font10             ,
                  -foreground  => [185, 154,   0]     ,
                  -background  => [255, 255, 255]     ,
                  -text        =>  "$VERSION\nhttp://www.le-tools.com/\nAlain Rioux (admin\@le-tools.com)\n$STR{'translatorName'}", );
$win->AddLabel(   -name        => 'lblText3'          ,
                  -size        => [300, 20]           ,
                  -pos         => [135, 80]           ,
                  -font        => $font10             ,
                  -foreground  => [0  , 0  , 102]     ,
                  -background  => [255, 255, 255]     ,
                  -text        => '© Copyright 2015-2016 Alain Rioux', );
$win->AddLabel(   -name        => 'lblText4'          ,
                  -size        => [340, 22]           ,
                  -pos         => [180,110]           ,
                  -font        => $font10             ,
                  -foreground  => [255,   0,   0]     ,
                  -background  => [255, 255, 255]     ,
                  -text        => '>> '.$STR{'lblText4'}.' <<', );
$win->AddCheckbox(-name        => 'chStartMinimized'  ,
                  -size        => [300, 22]           ,
                  -pos         => [ 10,140]           ,
                  -text        => $STR{'chStartMinimized'},
                  -background  => [255, 255, 255]     ,
                  -font        => $font10             , );
# Load taskbar menu
my $trayMenu = Win32::GUI::Menu->new(
 	"SysTray"																	=> "SysTray",
  ">$STR{'ScrollExpand'}"										=> { -name => 'MenuScrollExpand'	},
  ">$STR{'Scroll'}"													=> { -name => 'MenuScroll'				},
  ">$STR{'Expand'}"													=> { -name => 'MenuExpand'				},
	">$STR{'Remove'}"													=> { -name => 'MenuRemove'			, -item => 1 },
  ">>$STR{'Top'}"														=> { -name => 'MenuRemTop'				},
  ">>$STR{'leftCol'}"												=> { -name => 'MenuRemLeftCol'		},
  ">>$STR{'rightCol'}"											=> { -name => 'MenuRemRightCol'		},
  ">>$STR{'Bottom'}"												=> { -name => 'MenuRemBottom'			},
	" >> -" => 0,
  ">>$STR{'All'}"														=> { -name => 'MenuRemAll'				},
  " > -" => 0,
  ">$STR{'currProfileID'}..."								=> { -name => 'MenuPID'						},
  ">$STR{'Dump'} $STR{'Albums'}..."					=> { -name => 'MenuAlbums'				},
  ">$STR{'Dump'} $STR{'friends'}..."				=> { -name => 'MenuFriends'				},
  ">$STR{'Dump'} $STR{'MutualFriends'}..."  => { -name => 'MenuMutualFriends' },
  ">$STR{'Dump'} $STR{'contributors'}..."		=> { -name => 'MenuContributors'	},
  ">$STR{'Dump'} $STR{'EventMembers'}..."		=> { -name => 'MenuEvents'				},
	">$STR{'Dump'} $STR{'groupMembers'}..."		=> { -name => 'MenuGroupMembers'	},
	">$STR{'Messenger'}"											=> { -name => 'MenuMessenger'			, -item => 1 },
		">>$STR{'Scroll'} $STR{'Contacts'}"				=> { -name => 'MenuScrollContacts'},
		">>$STR{'Dump'} $STR{'Contacts'}..."			=> { -name => 'MenuContacts'			},
		">> -" => 0,
		">>$STR{'Scroll'} $STR{'Chat'}"						=> { -name => 'MenuScrollChat'		},
		">>$STR{'loadOlderMsg'}"									=> { -name => 'MenuLoadOldMsg'		},
		">>$STR{'loadNewerMsg'}"									=> { -name => 'MenuLoadNewMsg'		},
		">>$STR{'Dump'} $STR{'Chat'}..."					=> { -name => 'MenuChat'					},
		">> -" => 0,
		">>$STR{'Open'} $STR{'CurrChat'} - $STR{'MobileFacebook'}"		=> { -name => 'MenuChatMobileFB'	},
		">>$STR{'Dump'} $STR{'vocalMsg'} - $STR{'MobileFacebook'}..."	=> { -name => 'MenuVocalMessages'	},
		
	" > -" => 0,
	">$STR{'ShowQueue'}..."										=> { -name => 'MenuShowQueue'	},
  " > -" => 0,
  ">$STR{'Settings'}..."										=> { -name => 'MenuConfig'	},
  " > -" => 0,
  ">$STR{'Help'}..."												=> { -name => 'MenuHelp'	},
  ">$STR{'about'}..."												=> { -name => 'MenuAbout'	},
  ">$STR{'Quit'}"														=> { -name => 'MenuQuit'	},
);

#------------------------------------------------------------------------------#
# Config window
#------------------------------------------------------------------------------#
my $winConfig = Win32::GUI::DialogBox->new( -name        => 'winConfig'           ,
                                            -parent      => $win                  ,
                                            -text        => $STR{'Settings'}			,
                                            -pos         => [$winPosX, $winPosY]	,
                                            -size        => [660,285]             ,
                                            -background  => [255, 255, 255]       ,
                                            -hasmaximize => 0                     ,
                                            -hasminimize => 0                     ,
                                            -helpbutton  => 0                     ,
                                            -resizable   => 0                     ,
                                            -topmost     => 1                     ,
                                            -dialogui    => 1                     , );
$winConfig->SetIcon($winICO);
$winConfig->AddLabel(     -name         => 'lblLogo'             ,
                          -size         => [128,128]             ,
                          -pos          => [  0,  5]             ,
                          -bitmap       => $configBmp            ,
                          -background   => [255, 255, 255]       , );
# Tabstrip
$winConfig->AddTabStrip(  -name         => 'configTab'           ,
													-size         => [516,258]             ,
													-pos          => [140,  0]             ,
													-font					=> $font10               ,
													-background   => [255, 255, 255]       ,
													-tabstop      => 1                     , );
$winConfig->configTab->InsertItem(-text => $STR{'lblGenOpt'});
$winConfig->configTab->InsertItem(-text => "$STR{'ScrollExpand'} - $STR{'Options'}");
$winConfig->configTab->InsertItem(-text => "$STR{'Dump'} - $STR{'Options'}");
# General options
# Tool Section
$winConfig->AddLabel(			-name        => 'lblToolShadowT'			,
													-size        => [100, 25]             ,
													-pos         => [151, 31]             ,
													-foreground  => [180, 180, 180]       ,
													-background  => [255, 255, 255]       ,
													-text        => $STR{'Tool'}.':'			,
													-font        => $fontGB2              , );
$winConfig->AddLabel(			-name        => 'lblToolT'						,
													-size        => [100, 25]             ,
													-pos         => [150, 30]             ,
													-addstyle    => 11                    , # Transparent
													-foreground  => [  0, 102, 204]       ,
													-text        => $STR{'Tool'}.':'			,
													-font        => $fontGB2              , );
$winConfig->AddButton(    -name        => 'btnExportLang'       ,
                          -size        => [150, 24]             ,
                          -pos         => [150, 58]             ,
                          -text        => $STR{'btnExportLang'} ,
                          -font        => $font10               ,
                          -tabstop     => 1                     , );
$winConfig->AddButton(    -name        => 'btnCheckUpdate'      ,
                          -size        => [150, 24]             ,
                          -pos         => [150, 88]             ,
                          -text        => $STR{'update2'}				,
                          -font        => $font10               ,
                          -tabstop     => 1                     , );
$winConfig->AddCheckbox(  -name        => 'chAutoUpdate'        ,
                          -size        => [250, 20]             ,
                          -pos         => [305, 90]             ,
                          -text        => $STR{'chAutoUpdate'}  ,
                          -background  => [255, 255, 255]       ,
                          -font        => $font10               ,
                          -tabstop     => 1                     ,
                          -checked     => 1                     , );
# Functions section
$winConfig->AddLabel(			-name        => 'lblFuncShadowT'			,
													-size        => [100, 25]             ,
													-pos         => [151,121]             ,
													-foreground  => [180, 180, 180]       ,
													-background  => [255, 255, 255]       ,
													-text        => $STR{'Functions'}.':'	,
													-font        => $fontGB2              , );
$winConfig->AddLabel(			-name        => 'lblFuncT'						,
													-size        => [100, 25]             ,
													-pos         => [150,120]             ,
													-addstyle    => 11                    , # Transparent
													-foreground  => [  0, 102, 204]       ,
													-text        => $STR{'Functions'}.':'	,
													-font        => $fontGB2              , );
$winConfig->AddCheckbox(  -name        => 'chOptDynamicMenu' 		,
													-size        => [235, 20]             ,
													-pos         => [150,145]             ,
													-text        => $STR{'DynamicMenu'}		,
													-background  => [255, 255, 255]       ,
													-font        => $font10               ,
													-checked     => 1                     ,
													-tabstop     => 1                     , );
$winConfig->AddLabel(     -name        => 'lblTimeToWait'       ,
                          -size        => [130, 22]             ,
                          -pos         => [390,146]             ,
                          -text        => $STR{'lblTimeToWait'}.':',
                          -font        => $font10               ,
                          -background  => [255, 255, 255]       , );
$winConfig->AddTextfield( -name        => 'tfTimeToWait'        ,
                          -size        => [ 40, 22]             ,
                          -pos         => [505,143]             ,
                          -tip         => $STR{'tfTimeToWaitTip'},
                          -tabstop     => 1                     , );
$winConfig->AddUpDown(    -name        => 'upTimeToWait'        ,
                          -tabstop     => 1                     , );
$winConfig->upTimeToWait->SetRange(1,10);
$winConfig->AddLabel(     -name        => 'lblTimeToWait2'      ,
                          -size        => [ 70, 22]             ,
                          -pos         => [550,146]             ,
                          -text        => $STR{'seconds'}				,
                          -font        => $font10               ,
                          -background  => [255, 255, 255]       , );
$winConfig->AddCheckbox(  -name        => 'chRememberPos'       ,
                          -size        => [235, 20]             ,
                          -pos         => [150,173]             ,
                          -text        => $STR{'chRememberPos'} ,
                          -background  => [255, 255, 255]       ,
                          -font        => $font10               ,
                          -tabstop     => 1                     , );
$winConfig->AddLabel(     -name        => 'lblCharset'          ,
                          -size        => [100, 22]             ,
                          -pos         => [390,175]             ,
                          -text        => $STR{'Charset'}.':'		,
                          -font        => $font10               ,
                          -background  => [255, 255, 255]       , );
$winConfig->AddCombobox(  -name        => 'cbCharset'           ,
                          -size        => [130,100]             ,
                          -pos         => [505,172]             ,
                          -font        => $font10               ,
                          -dropdown    => 1                     ,
                          -vscroll     => 1                     ,
                          -tabstop     => 1                     , );
$winConfig->cbCharset->Add('cp1252'     , 'iso-8859-1' , 'iso-8859-2' , 'iso-8859-3' ,
                           'iso-8859-4' , 'iso-8859-5' , 'iso-8859-6' , 'iso-8859-7' ,
                           'iso-8859-8' , 'iso-8859-9' , 'iso-8859-10', 'iso-8859-11', 
                           'iso-8859-13', 'iso-8859-14', 'iso-8859-15', 'iso-8859-16', );
$winConfig->AddLabel(			-name        => 'lblLoggingShadowT'		,
													-size        => [200, 25]             ,
													-pos         => [151,201]             ,
													-foreground  => [180, 180, 180]       ,
													-background  => [255, 255, 255]       ,
													-text        => "$STR{'Logging'}:"		,
													-font        => $fontGB2              ,
                          -visible     => 0                     , );
$winConfig->AddLabel(			-name        => 'lblLoggingT'					,
													-size        => [200, 25]             ,
													-pos         => [150,200]             ,
													-addstyle    => 11                    , # Transparent
													-foreground  => [  0, 102, 204]       ,
													-text        => "$STR{'Logging'}:"		,
													-font        => $fontGB2              ,
                          -visible     => 0                     , );
$winConfig->AddCheckbox(  -name        => 'chDebugLogging'      ,
													-size        => [135, 20]             ,
													-pos         => [150,227]             ,
													-text        => $STR{'Enable'}				,
													-background  => [255, 255, 255]       ,
													-font        => $font10               ,
													-tabstop     => 1                     ,
													-visible     => 0                     , );
$winConfig->AddButton(    -name				 => 'btnOpenLog'          ,
													-size        => [130, 24]             ,
													-pos         => [290,226]             ,
													-text        => $STR{'OpenLog'}.'...' ,
													-font        => $font10               ,
													-tabstop     => 1                     ,
													-visible     => 0                     , );
$winConfig->AddButton(    -name        => 'btnClearLog'         ,
													-size        => [130, 24]             ,
													-pos         => [425,226]             ,
													-text        => $STR{'ClearLog'}      ,
													-font        => $font10               ,
													-tabstop     => 1                     ,
													-visible     => 0                     , );
# Scroll and Expand options
$winConfig->AddLabel(				-name        => 'lblScrollShadowT'		,
														-size        => [170, 25]             ,
														-pos         => [151, 31]             ,
														-foreground  => [180, 180, 180]       ,
														-background  => [255, 255, 255]       ,
														-text        => "$STR{'Scroll'} - $STR{'Options'}:",
														-font        => $fontGB2              ,
                            -visible     => 0                     , );
$winConfig->AddLabel(				-name        => 'lblScrollT'					,
														-size        => [170, 25]             ,
														-pos         => [150, 30]             ,
														-addstyle    => 11                    , # Transparent
														-foreground  => [  0, 102, 204]       ,
														-text        => "$STR{'Scroll'} - $STR{'Options'}:",
														-font        => $fontGB2              ,
                            -visible     => 0                     , );
$winConfig->AddLabel(       -name        => 'lblMaxScrollChat'    ,
                            -size        => [150, 22]             ,
                            -pos         => [150, 58]             ,
                            -text        => $STR{'lblMaxLoading'}.':',
                            -font        => $font10               ,
                            -background  => [255, 255, 255]       ,
                            -visible     => 0                     , );
$winConfig->AddRadioButton( -name        => 'rbMaxScrollChatByPage',
                            -size        => [ 70, 22]             ,
                            -pos         => [305, 55]             ,
                            -background  => [255, 255, 255]       ,
                            -text        => $STR{'ByPage'}.':' 		,
                            -font        => $font10               ,
                            -checked     => 1                     ,
                            -group       => 1                     ,
														-tabstop     => 1                     ,
                            -visible     => 0                     , );
$winConfig->AddTextfield(   -name        => 'tfMaxScrollChat'     ,
                            -size        => [ 40, 22]             ,
                            -pos         => [380, 55]             ,
                            -tip         => $STR{'tfMaxScrollByPageTip'},
                            -number      => 1                     ,
                            -tabstop     => 1                     ,
                            -visible     => 0                     , );
$winConfig->AddUpDown(      -name        => 'upMaxScrollChat'     ,
                            -tabstop     => 1                     , );
$winConfig->upMaxScrollChat->SetRange(0,99);
$winConfig->AddRadioButton( -name        => 'rbMaxScrollChatByDate',
                            -size        => [ 70, 22]             ,
                            -pos         => [440, 55]             ,
                            -background  => [255, 255, 255]       ,
                            -text        => $STR{'ByDate'}.':' 		,
                            -font        => $font10               ,
														-tabstop     => 1                     ,
                            -visible     => 0                     , );
$winConfig->AddDateTime(    -name        => 'dtMaxScrollChatByDate',
                            -size        => [ 90, 22]             ,
                            -pos         => [515, 55]             ,
                            -font        => $font10               ,
                            -background  => [255, 255, 255]       ,
                            -format      => 'shortdate'           ,
                            -tip         => $STR{'tfMaxScrollByDateTip'},
														-tabstop     => 1                     ,
                            -visible     => 0                     , );
$winConfig->AddLabel(       -name        => 'lblMaxScroll'        ,
                            -size        => [150, 22]             ,
                            -pos         => [150, 88]             ,
                            -text        => $STR{'lblMaxScroll'}.':',
                            -font        => $font10               ,
                            -background  => [255, 255, 255]       ,
                            -visible     => 0                     , );
$winConfig->AddRadioButton( -name        => 'rbMaxScrollByPage'   ,
                            -size        => [ 70, 22]             ,
                            -pos         => [305, 85]             ,
                            -background  => [255, 255, 255]       ,
                            -text        => $STR{'ByPage'}.':' 		,
                            -font        => $font10               ,
                            -checked     => 1                     ,
                            -group       => 1                     ,
														-tabstop     => 1                     ,
                            -visible     => 0                     , );
$winConfig->AddTextfield(   -name        => 'tfMaxScroll'         ,
                            -size        => [ 40, 22]             ,
                            -pos         => [380, 85]             ,
                            -tip         => $STR{'tfMaxScrollByPageTip'},
                            -number      => 1                     ,
                            -tabstop     => 1                     ,
                            -visible     => 0                     , );
$winConfig->AddUpDown(      -name        => 'upMaxScroll'         ,
                            -tabstop     => 1                     , );
$winConfig->upMaxScroll->SetRange(0,99);
$winConfig->AddRadioButton( -name        => 'rbMaxScrollByDate'   ,
                            -size        => [ 70, 22]             ,
                            -pos         => [440, 85]             ,
                            -background  => [255, 255, 255]       ,
                            -text        => $STR{'ByDate'}.':' 		,
                            -font        => $font10               ,
														-tabstop     => 1                     ,
                            -visible     => 0                     , );
$winConfig->AddDateTime(    -name        => 'dtMaxScrollByDate'   ,
                            -size        => [ 90, 22]             ,
                            -pos         => [515, 85]             ,
                            -font        => $font10               ,
                            -background  => [255, 255, 255]       ,
                            -format      => 'shortdate'           ,
                            -tip         => $STR{'tfMaxScrollByDateTip'},
														-tabstop     => 1                     ,
                            -visible     => 0                     , );
$winConfig->AddLabel(				-name        => 'lblExpandShadowT'		,
														-size        => [170, 25]             ,
														-pos         => [151,116]             ,
														-foreground  => [180, 180, 180]       ,
														-background  => [255, 255, 255]       ,
														-text        => "$STR{'Expand'} - $STR{'Options'}:",
														-font        => $fontGB2              , );
$winConfig->AddLabel(				-name        => 'lblExpandT'					,
														-size        => [170, 25]             ,
														-pos         => [150,115]             ,
														-addstyle    => 11                    , # Transparent
														-foreground  => [  0, 102, 204]       ,
														-text        => "$STR{'Expand'} - $STR{'Options'}:",
														-font        => $fontGB2              , );
$winConfig->AddCheckbox(  	-name        => 'chOptSeemore'        ,
														-size        => [300, 20]             ,
														-pos         => [150,142]             ,
														-text        => $STR{'chOptSeemore'}  ,
														-background  => [255, 255, 255]       ,
														-font        => $font10               ,
														-checked     => 1                     ,
														-tabstop     => 1                     ,
														-visible     => 0                     , );
$winConfig->AddCheckbox(  	-name        => 'chOptPosts'          ,
														-size        => [200, 20]             ,
														-pos         => [150,164]             ,
														-text        => $STR{'chOptPosts'}    ,
														-background  => [255, 255, 255]       ,
														-font        => $font10               ,
														-checked     => 1                     ,
														-tabstop     => 1                     ,
														-visible     => 0                     , );
$winConfig->AddCheckbox(  	-name        => 'chOptTranslate'      ,
														-size        => [200, 20]             ,
														-pos         => [150,186]             ,
														-text        => $STR{'chOptTranslate'},
														-background  => [255, 255, 255]       ,
														-font        => $font10               ,
														-checked     => 1                     ,
														-tabstop     => 1                     ,
														-visible     => 0                     , );
# Dump options - When loading
$winConfig->AddLabel(				-name        => 'lblLoadingShadowT'		,
														-size        => [300, 25]             ,
														-pos         => [151, 31]             ,
														-foreground  => [180, 180, 180]       ,
														-background  => [255, 255, 255]       ,
														-text        => "$STR{'WhenLoading'}:",
														-font        => $fontGB2              ,
                            -visible     => 0                     , );
$winConfig->AddLabel(				-name        => 'lblLoadingT'					,
														-size        => [300, 25]             ,
														-pos         => [150, 30]             ,
														-addstyle    => 11                    , # Transparent
														-foreground  => [  0, 102, 204]       ,
														-text        => "$STR{'WhenLoading'}:",
														-font        => $fontGB2              ,
                            -visible     => 0                     , );
$winConfig->AddCheckbox(    -name        => 'chOptAutoLoadScroll' ,
                            -size        => [250, 20]             ,
                            -pos         => [150, 55]             ,
                            -text        => $STR{'AutoLoadScroll'},
                            -background  => [255, 255, 255]       ,
                            -font        => $font10               ,
                            -checked     => 1                     ,
                            -tabstop     => 1                     ,
														-visible     => 0                     , );
$winConfig->AddCheckbox(    -name        => 'chOptScrollTop'      ,
                            -size        => [230, 20]             ,
                            -pos         => [405, 55]             ,
                            -text        => $STR{'chOptScrollTop'},
                            -background  => [255, 255, 255]       ,
                            -font        => $font10               ,
                            -tabstop     => 1                     ,
                            -checked     => 1                     , );
$winConfig->AddCheckbox(    -name        => 'chRememberSaveDir'		,
                            -size        => [250, 20]             ,
                            -pos         => [150, 80]             ,
                            -text        => $STR{'RememberSaveDir'},
                            -background  => [255, 255, 255]       ,
                            -font        => $font10               ,
                            -checked     => 1                     ,
                            -tabstop     => 1                     ,
														-visible     => 0                     , );
# Dump options - When processing
$winConfig->AddLabel(				-name        => 'lblProcessingShadowT',
														-size        => [300, 25]             ,
														-pos         => [151,111]             ,
														-foreground  => [180, 180, 180]       ,
														-background  => [255, 255, 255]       ,
														-text        => "$STR{'WhenProcessing'}:",
														-font        => $fontGB2              ,
                            -visible     => 0                     , );
$winConfig->AddLabel(				-name        => 'lblProcessingT'			,
														-size        => [300, 25]             ,
														-pos         => [150,110]             ,
														-addstyle    => 11                    , # Transparent
														-foreground  => [  0, 102, 204]       ,
														-text        => "$STR{'WhenProcessing'}:",
														-font        => $fontGB2              ,
                            -visible     => 0                     , );
$winConfig->AddCheckbox(    -name        => 'chSilentProgress'		,
                            -size        => [350, 20]             ,
                            -pos         => [150,135]             ,
                            -text        => $STR{'SilentProgress'},
                            -background  => [255, 255, 255]       ,
                            -font        => $font10               ,
                            -checked     => 1                     ,
                            -tabstop     => 1                     ,
														-visible     => 0                     , );
# Dump options - When finished
$winConfig->AddLabel(				-name        => 'lblFinishingShadowT'	,
														-size        => [300, 25]             ,
														-pos         => [151,166]             ,
														-foreground  => [180, 180, 180]       ,
														-background  => [255, 255, 255]       ,
														-text        => "$STR{'WhenFinished'}:",
														-font        => $fontGB2              ,
                            -visible     => 0                     , );
$winConfig->AddLabel(				-name        => 'lblFinishingT'				,
														-size        => [300, 25]             ,
														-pos         => [150,165]             ,
														-addstyle    => 11                    , # Transparent
														-foreground  => [  0, 102, 204]       ,
														-text        => "$STR{'WhenFinished'}:",
														-font        => $fontGB2              ,
                            -visible     => 0                     , );
$winConfig->AddCheckbox(    -name        => 'chOptOpenReport' 		,
                            -size        => [150, 20]             ,
                            -pos         => [150,190]             ,
                            -text        => $STR{'OpenReport'}		,
                            -background  => [255, 255, 255]       ,
                            -font        => $font10               ,
                            -checked     => 1                     ,
                            -tabstop     => 1                     ,
														-visible     => 0                     , );
$winConfig->AddCheckbox(    -name        => 'chOptDontOpenReport'	,
                            -size        => [220, 20]             ,
                            -pos         => [355,190]             ,
                            -text        => $STR{'DontOpenReport'},
                            -background  => [255, 255, 255]       ,
                            -font        => $font10               ,
                            -checked     => 1                     ,
                            -tabstop     => 1                     ,
														-visible     => 0                     , );
$winConfig->AddCheckbox(  	-name        => 'chCloseUsedTabs'     ,
														-size        => [200, 20]             ,
														-pos         => [150,215]             ,
														-text        => $STR{'chCloseUsedTabs'},
														-background  => [255, 255, 255]       ,
														-font        => $font10               ,
														-checked     => 1                     ,
														-tabstop     => 1                     , );
$winConfig->AddCheckbox(  	-name        => 'chDelTempFiles'      ,
														-size        => [220, 20]             ,
														-pos         => [355,215]             ,
														-text        => $STR{'chDelTempFiles'},
														-background  => [255, 255, 255]       ,
														-font        => $font10               ,
														-checked     => 1                     ,
														-tabstop     => 1                     , );

#------------------------------------------------------------------------------#
# Progress window
#------------------------------------------------------------------------------#
my $winPb = Win32::GUI::DialogBox->new( -name        => 'winPb'                   ,
                                        -parent      => $win                      ,
                                        -text        => $STR{'Progress'}          ,
                                        -pos         => [$winPosX, $winPosY]			,
                                        -size        => [740, 180]                ,
                                        -background  => [255, 255, 255]           ,
                                        -hasmaximize => 0                         ,
                                        -hasminimize => 1                         ,
                                        -helpbutton  => 0                         ,
                                        -resizable   => 0                         ,
                                        -topmost     => 1                         ,
                                        -dialogui    => 1                         , );
$winPb->SetIcon($winICO);
$winPb->AddLabel(       -name        => 'lblLogo'        ,
                        -size        => [128,128]        ,
                        -pos         => [  0, 10]        ,
                        -bitmap      => $logoBmp         ,
                        -background  => [255, 255, 255]  , );
$winPb->AddLabel(       -name        => 'lblPbCurr1'     ,
                        -size        => [578, 22]        ,
                        -pos         => [140,  8]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb->AddProgressBar( -name        => 'pbWinPb1'       ,
                        -size        => [470, 22]        ,
                        -pos         => [140, 32]        ,
                        -smooth      => 1                , );
$winPb->AddLabel(       -name        => 'lblCount1'      ,
                        -size        => [100, 22]        ,
                        -pos         => [620, 33]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb->AddLabel(       -name        => 'lblPbCurr2'     ,
                        -size        => [578, 22]        ,
                        -pos         => [140, 60]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb->AddProgressBar( -name        => 'pbWinPb2'       ,
                        -size        => [470, 22]        ,
                        -pos         => [140, 84]        ,
                        -smooth      => 1                , );
$winPb->AddLabel(       -name        => 'lblCount2'      ,
                        -size        => [100, 22]        ,
                        -pos         => [620, 85]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb->AddButton(      -name        => 'btnCancel'      ,
                        -text        => $STR{'Cancel'}   ,
                        -font        => $font10          ,
                        -size        => [ 80, 30]        ,
                        -pos         => [330,115]        ,
                        -cancel      => 1                , );

#------------------------------------------------------------------------------#
# Simple Progress window
#------------------------------------------------------------------------------#
my $winPb2 = Win32::GUI::DialogBox->new(-name        => 'winPb2'                  ,
                                        -parent      => $win                      ,
                                        -text        => $STR{'Progress'}          ,
                                        -pos         => [$winPosX, $winPosY]			,
                                        -size        => [590,175]                 ,
                                        -background  => [255, 255, 255]           ,
                                        -hasmaximize => 0                         ,
                                        -hasminimize => 1                         ,
                                        -helpbutton  => 0                         ,
                                        -resizable   => 0                         ,
                                        -topmost     => 1                         ,
                                        -dialogui    => 1                         , );
$winPb2->SetIcon($winICO);
$winPb2->AddLabel(      -name        => 'lblLogo'        ,
                        -size        => [128,128]        ,
                        -pos         => [  0,  5]        ,
                        -bitmap      => $logoBmp         ,
                        -background  => [255, 255, 255]  , );
$winPb2->AddLabel(      -name        => 'lblPbCurr'      ,
                        -size        => [350, 40]        ,
                        -pos         => [140, 30]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb2->AddLabel(      -name        => 'lblCount'       ,
                        -size        => [ 80, 22]        ,
                        -pos         => [495, 30]        ,
                        -font        => $font10          ,
                        -truncate    => 1                ,
                        -background  => [255, 255, 255]  ,
                        -foreground  => [  0,   0, 102]  , );
$winPb2->AddButton(     -name        => 'btnCancel2'     ,
                        -text        => $STR{'Cancel'}   ,
                        -font        => $font10          ,
                        -size        => [ 80, 30]        ,
                        -pos         => [280, 80]        ,
                        -cancel      => 1                , );

#------------------------------------------------------------------------------#
# Starting program
#------------------------------------------------------------------------------#
# Center the splash and show it
$splash->Center();
$splash->Show();
Win32::GUI::DoEvents();
# Taskbar
$win->Tray->Change(-balloon_icon => 'info', -balloon_title => 'ExtractFace', -balloon_timeout => 5000);
# Windows
my $winPID;
my $winAlbums;
my $winFriends;
my $winMutualFriends;
my $winEvent;
my $winContrib;
my $winGroupMembers;
my $winChat;
my $winVocalMessages;
my $winContacts;
my $winQueue;
my $gridQueueMenu;
&loadConfig(\$winConfig, \%CONFIG, $CONFIG_FILE, \$win);
threads->create(\&checkUpdate, 0, $VERSION, \$win, \%STR) if $CONFIG{'AUTO_UPDATE'}; # Auto-Update
my $API = new Win32::API('user32','GetForegroundWindow','', 'N');
Win32::GUI::DoEvents();
usleep(500000);
$splash->Hide;
# Verify if there are pending jobs
&loadQueue(\$winQueue, $USERDIR, \$win, \%STR);
# Position the window
if ($winConfig->chRememberPos->Checked() and exists($CONFIG{'MAIN_LEFT'}) and exists($CONFIG{'MAIN_TOP'})) {
  $win->Left($CONFIG{'MAIN_LEFT'});
  $win->Top($CONFIG{'MAIN_TOP'});
}
$START = 1;
$win->Show() if !$CONFIG{'START_MINIMIZED'};
Win32::GUI::Dialog();

#--------------------------#
sub chStartMinimized_Click
#--------------------------#
{
  # Save the choice
  if ($win->chStartMinimized->Checked()) {
    $CONFIG{'START_MINIMIZED'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  } else {
    $CONFIG{'START_MINIMIZED'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chStartMinimized_Click

#--------------------------#
sub main_Terminate
#--------------------------#
{
  $win->Disable();  # Act as minimize, to quit, user must use the taskbar function
  $win->Hide();
  $win->Tray->ShowBalloon() if $THR and $THR->is_running();
  return(0);

}  #--- End main_Terminate

#--------------------------#
sub main_Minimize
#--------------------------#
{
  $win->Disable();
  $win->Hide();
  $win->Tray->ShowBalloon() if $THR and $THR->is_running();
  return(0);

}  #--- End main_Minimize

#--------------------------#
sub Tray_DblClick
#--------------------------#
{
  $win->Enable();
  $win->Show();  

}  #--- End Tray_DblClick

#--------------------------#
sub Tray_RightClick
#--------------------------#
{
	if ($CONFIG{'DYNAMIC_MENU'}) {
		# Dynamic menu
		my $mech;
		eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
		if ($mech) {
			if ($mech->uri() =~ /facebook.com/) {
				my ($pidCode, $pageType) = &getCurrPidCode(\$mech);
				# pageType: 0 = unknown, 1 = People, 2 = Groups, 3 = Pages (Business), 4 = Messenger, 5 = Event, 6 = Mutual Friends
				if ($pageType) {
					if ($pageType == 1) { # Normal profile (people)
						$trayMenu->{MenuPID}->Enabled(1);
						$trayMenu->{MenuAlbums}->Enabled(1);
						$trayMenu->{MenuFriends}->Enabled(1);
						$trayMenu->{MenuContributors}->Enabled(1);
						$trayMenu->{MenuFriends}->Enabled(1);
						$trayMenu->{MenuMutualFriends}->Enabled(0);
						$trayMenu->{MenuEvents}->Enabled(0);
						$trayMenu->{MenuGroupMembers}->Enabled(0);
						$trayMenu->{MenuMessenger}->Enabled(0);
					} elsif ($pageType == 2) { # Groups profile
						$trayMenu->{MenuPID}->Enabled(1);
						$trayMenu->{MenuAlbums}->Enabled(1);
						$trayMenu->{MenuFriends}->Enabled(0);
						$trayMenu->{MenuContributors}->Enabled(1);
						$trayMenu->{MenuFriends}->Enabled(0);
						$trayMenu->{MenuMutualFriends}->Enabled(0);
						$trayMenu->{MenuEvents}->Enabled(0);
						$trayMenu->{MenuGroupMembers}->Enabled(1);
						$trayMenu->{MenuMessenger}->Enabled(0);
					} elsif ($pageType == 3) { # Page profile (business)
						$trayMenu->{MenuPID}->Enabled(1);
						$trayMenu->{MenuAlbums}->Enabled(1);
						$trayMenu->{MenuFriends}->Enabled(0);
						$trayMenu->{MenuContributors}->Enabled(1);
						$trayMenu->{MenuFriends}->Enabled(0);
						$trayMenu->{MenuMutualFriends}->Enabled(0);
						$trayMenu->{MenuEvents}->Enabled(0);
						$trayMenu->{MenuGroupMembers}->Enabled(0);
						$trayMenu->{MenuMessenger}->Enabled(0);
					} elsif ($pageType == 4) { # In Messenger
						$trayMenu->{MenuPID}->Enabled(0);
						$trayMenu->{MenuAlbums}->Enabled(0);
						$trayMenu->{MenuFriends}->Enabled(0);
						$trayMenu->{MenuContributors}->Enabled(0);
						$trayMenu->{MenuFriends}->Enabled(0);
						$trayMenu->{MenuMutualFriends}->Enabled(0);
						$trayMenu->{MenuEvents}->Enabled(0);
						$trayMenu->{MenuGroupMembers}->Enabled(0);
						$trayMenu->{MenuMessenger}->Enabled(1);
					} elsif ($pageType == 5) { # Event
						$trayMenu->{MenuPID}->Enabled(0);
						$trayMenu->{MenuAlbums}->Enabled(0);
						$trayMenu->{MenuFriends}->Enabled(0);
						$trayMenu->{MenuContributors}->Enabled(1);
						$trayMenu->{MenuFriends}->Enabled(0);
						$trayMenu->{MenuMutualFriends}->Enabled(0);
						$trayMenu->{MenuEvents}->Enabled(1);
						$trayMenu->{MenuGroupMembers}->Enabled(0);
						$trayMenu->{MenuMessenger}->Enabled(0);
					} elsif ($pageType == 6) { # Mutual Friends
						$trayMenu->{MenuPID}->Enabled(0);
						$trayMenu->{MenuAlbums}->Enabled(0);
						$trayMenu->{MenuFriends}->Enabled(0);
						$trayMenu->{MenuContributors}->Enabled(0);
						$trayMenu->{MenuFriends}->Enabled(0);
						$trayMenu->{MenuMutualFriends}->Enabled(1);
						$trayMenu->{MenuEvents}->Enabled(0);
						$trayMenu->{MenuGroupMembers}->Enabled(0);
						$trayMenu->{MenuMessenger}->Enabled(0);
					} else { # Unknown: Enable all
						$trayMenu->{MenuAlbums}->Enabled(1);
						$trayMenu->{MenuFriends}->Enabled(1);
						$trayMenu->{MenuContributors}->Enabled(1);
						$trayMenu->{MenuFriends}->Enabled(1);
						$trayMenu->{MenuMutualFriends}->Enabled(1);
						$trayMenu->{MenuEvents}->Enabled(1);
						$trayMenu->{MenuGroupMembers}->Enabled(1);
						$trayMenu->{MenuMessenger}->Enabled(1);
					}
				}
			} else { Win32::GUI::MessageBox($win, $STR{'warn4'}, $STR{'Error'}, 0x40010); }
		} else { Win32::GUI::MessageBox($win, $STR{'errMozRepl'}, $STR{'Error'}, 0x40010); }
	}
  $win->TrackPopupMenu($trayMenu->{SysTray});
  return(1);

}  #--- End Tray_Click

#--------------------------#
sub MenuScroll_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win,$STR{'processRunning'},$STR{'Warning'},0x40010); }
	else { $THR = threads->create(\&handlePageThr, \$THR, 1, 0, 0, \$ARROW, \$HOURGLASS, $DEBUG_FILE, \%CONFIG, \$winConfig,
																\$winPb2, \$win, \%STR); }
	
}  #--- End MenuScroll_Click

#--------------------------#
sub MenuExpand_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else { # Start the thread
    if ($winConfig->chOptSeemore->Checked() or $winConfig->chOptPosts->Checked() or $winConfig->chOptTranslate->Checked()) {
      my $nbrRetries = 0;
      $THR = threads->create(\&handlePageThr, \$THR, 2, 0, 0, \$ARROW, \$HOURGLASS, $DEBUG_FILE, \%CONFIG, \$winConfig,
														 \$winPb2, \$win, \%STR);
    } else { Win32::GUI::MessageBox($win, $STR{'warn2'}, $STR{'Warning'}, 0x40010); }
  }
	
}  #--- End MenuExpand_Click

#--------------------------#
sub MenuScrollExpand_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
  else { $THR = threads->create(\&handlePageThr, \$THR, 3, 0, 0, \$ARROW, \$HOURGLASS, $DEBUG_FILE, \%CONFIG, \$winConfig,
																\$winPb2, \$win, \%STR); }
	
}  #--- End MenuScrollExpand_Click

#--------------------------#
sub MenuRemTop_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else { # Start the thread
    if ($winConfig->chOptSeemore->Checked() or $winConfig->chOptPosts->Checked() or $winConfig->chOptTranslate->Checked()) {
      my $nbrRetries = 0;
      $THR = threads->create(\&handlePageThr, \$THR, 8, 0, 0, \$ARROW, \$HOURGLASS, $DEBUG_FILE, \%CONFIG, \$winConfig,
														 \$winPb2, \$win, \%STR);
    } else { Win32::GUI::MessageBox($win, $STR{'warn2'}, $STR{'Warning'}, 0x40010); }
  }
	
}  #--- End MenuRemTop_Click

#--------------------------#
sub MenuRemLeftCol_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else { # Start the thread
    if ($winConfig->chOptSeemore->Checked() or $winConfig->chOptPosts->Checked() or $winConfig->chOptTranslate->Checked()) {
      my $nbrRetries = 0;
      $THR = threads->create(\&handlePageThr, \$THR, 9, 0, 0, \$ARROW, \$HOURGLASS, $DEBUG_FILE, \%CONFIG, \$winConfig,
														 \$winPb2, \$win, \%STR);
    } else { Win32::GUI::MessageBox($win, $STR{'warn2'}, $STR{'Warning'}, 0x40010); }
  }
	
}  #--- End MenuRemLeftCol_Click

#--------------------------#
sub MenuRemRightCol_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else { # Start the thread
    if ($winConfig->chOptSeemore->Checked() or $winConfig->chOptPosts->Checked() or $winConfig->chOptTranslate->Checked()) {
      my $nbrRetries = 0;
      $THR = threads->create(\&handlePageThr, \$THR, 10, 0, 0, \$ARROW, \$HOURGLASS, $DEBUG_FILE, \%CONFIG, \$winConfig,
														 \$winPb2, \$win, \%STR);
    } else { Win32::GUI::MessageBox($win, $STR{'warn2'}, $STR{'Warning'}, 0x40010); }
  }
	
}  #--- End MenuRemRightCol_Click

#--------------------------#
sub MenuRemBottom_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else { # Start the thread
    if ($winConfig->chOptSeemore->Checked() or $winConfig->chOptPosts->Checked() or $winConfig->chOptTranslate->Checked()) {
      my $nbrRetries = 0;
      $THR = threads->create(\&handlePageThr, \$THR, 11, 0, 0, \$ARROW, \$HOURGLASS, $DEBUG_FILE, \%CONFIG, \$winConfig,
														 \$winPb2, \$win, \%STR);
    } else { Win32::GUI::MessageBox($win, $STR{'warn2'}, $STR{'Warning'}, 0x40010); }
  }
	
}  #--- End MenuRemBottom_Click

#--------------------------#
sub MenuRemAll_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else { # Start the thread
    if ($winConfig->chOptSeemore->Checked() or $winConfig->chOptPosts->Checked() or $winConfig->chOptTranslate->Checked()) {
      my $nbrRetries = 0;
      $THR = threads->create(\&handlePageThr, \$THR, 12, 0, 0, \$ARROW, \$HOURGLASS, $DEBUG_FILE, \%CONFIG, \$winConfig,
														 \$winPb2, \$win, \%STR);
    } else { Win32::GUI::MessageBox($win, $STR{'warn2'}, $STR{'Warning'}, 0x40010); }
  }
	
}  #--- End MenuRemAll_Click

#--------------------------#
sub MenuPID_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else {
		&createWinPID() if !$winPID;
    $winPID->tfPIDTitle->Text('');
    # Start the thread
    $THR = threads->create(\&winPIDThr, \$THR, \$ARROW, \$HOURGLASS, \$winPID, $DEBUG_FILE, \%CONFIG, \$win, \%STR);
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINPID_LEFT'} and $CONFIG{'WINPID_TOP'}) {
      $winPID->Left($CONFIG{'WINPID_LEFT'});
      $winPID->Top($CONFIG{'WINPID_TOP'});
    } else { $winPID->Center(); }
    $winPID->Show();
  }

}  #--- End MenuPID_Click

#--------------------------#
sub MenuAlbums_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else {
		&createWinAlbums() if !$winAlbums;
    &winAlbums_Resize();
    $winAlbums->tfAlbumTitle->Text('');
		$winAlbums->tfAlbumCurrURL->Text('');
    $winAlbums->GridAlbums->DeleteNonFixedRows();
    # Start the thread
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winAlbums, 1, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINALBUMS_LEFT'} and $CONFIG{'WINALBUMS_TOP'}) {
      $winAlbums->Left($CONFIG{'WINALBUMS_LEFT'});
      $winAlbums->Top($CONFIG{'WINALBUMS_TOP'});
    } else { $winAlbums->Center(); }
    $winAlbums->Show();
  }
  
}  #--- End MenuAlbums_Click

#--------------------------#
sub MenuFriends_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
  else {
		&createWinFriends() if !$winFriends;
    $winFriends->GridFriends->DeleteNonFixedRows();
		$winFriends->GridFriends->AutoSize();
    $winFriends->tfFriendName->Text('');
		$winFriends->tfFriendCurrURL->Text('');
    # Start the thread
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winFriends, 2, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINFRIENDS_LEFT'} and $CONFIG{'WINFRIENDS_TOP'}) {
      $winFriends->Left($CONFIG{'WINFRIENDS_LEFT'});
      $winFriends->Top($CONFIG{'WINFRIENDS_TOP'});
    } else { $winFriends->Center(); }
    $winFriends->Show();
  }

}  #--- End MenuFriends_Click

#--------------------------#
sub MenuMutualFriends_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else {
		&createWinMutualFriends() if !$winMutualFriends;
		$winMutualFriends->tfMutualFriendsCurrURL->Text('');
    # Start the thread
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winMutualFriends, 3, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINMUTUALFRIENDS_LEFT'} and $CONFIG{'WINMUTUALFRIENDS_TOP'}) {
      $winMutualFriends->Left($CONFIG{'WINMUTUALFRIENDS_LEFT'});
      $winMutualFriends->Top($CONFIG{'WINMUTUALFRIENDS_TOP'});
    } else { $winMutualFriends->Center(); }
    $winMutualFriends->Show();
  }

}  #--- End MenuMutualFriends_Click

#--------------------------#
sub MenuContributors_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else {
		&createWinContrib if !$winContrib;
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winContrib, 5, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINCONTRIB_LEFT'} and $CONFIG{'WINCONTRIB_TOP'}) {
      $winContrib->Left($CONFIG{'WINCONTRIB_LEFT'});
      $winContrib->Top($CONFIG{'WINCONTRIB_TOP'});
    } else { $winContrib->Center(); }
    $winContrib->Show();
  }

}  #--- End MenuContributors_Click

#--------------------------#
sub MenuEvents_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else {
		&createWinEvent() if !$winEvent;
    # Reset window
    $winEvent->tfEventFilename->Text('');
		$winEvent->tfEventCurrURL->Text('');
    $winEvent->tfDataURL->Text('');
    $winEvent->chGoing->Text('Going');
    $winEvent->chMaybe->Text('Maybe');
    $winEvent->chInvited->Text('Invited');
    $winEvent->chDeclined->Text('Declined');
    $winEvent->chGoing->Checked(1);
    $winEvent->chMaybe->Checked(1);
    $winEvent->chInvited->Checked(1);
    $winEvent->chDeclined->Checked(1);
    # Start the thread
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winEvent, 4, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINEVENT_LEFT'} and $CONFIG{'WINEVENT_TOP'}) {
      $winEvent->Left($CONFIG{'WINEVENT_LEFT'});
      $winEvent->Top($CONFIG{'WINEVENT_TOP'});
    } else { $winEvent->Center(); }
    $winEvent->Show();
  }

}  #--- End MenuEvents_Click

#--------------------------#
sub MenuGroupMembers_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else {
		&createWinGroupMembers if !$winGroupMembers;
    $winGroupMembers->tfGroupMembersName->Text('');
		$winGroupMembers->tfGroupMembersType->Text('');
		$winGroupMembers->GridGroupMembers->DeleteNonFixedRows();
		$winGroupMembers->tfGroupMembersCurrURL->Text('');
    # Start the thread
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winGroupMembers, 6, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINGROUP_MEMBERS_LEFT'} and $CONFIG{'WINGROUP_MEMBERS_TOP'}) {
      $winGroupMembers->Left($CONFIG{'WINGROUP_MEMBERS_LEFT'});
      $winGroupMembers->Top($CONFIG{'WINGROUP_MEMBERS_TOP'});
    } else { $winGroupMembers->Center(); }
    $winGroupMembers->Show();
  }

}  #--- End MenuGroupMembers_Click

#--------------------------#
sub MenuScrollContacts_Click
#--------------------------#
{
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else { $THR = threads->create(\&handlePageThr, \$THR, 4, 0, 0, \$ARROW, \$HOURGLASS, $DEBUG_FILE, \%CONFIG, \$winConfig,
																\$winPb2, \$win, \%STR); }
	
}  #--- End MenuScrollContacts_Click

#--------------------------#
sub MenuContacts_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else {
		&createWinContacts() if !$winContacts;
		$winContacts->tfContactsCurrURL->Text('');
    # Start the thread
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winContacts, 9, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINCONTACTS_LEFT'} and $CONFIG{'WINCONTACTS_TOP'}) {
      $winContacts->Left($CONFIG{'WINCONTACTS_LEFT'});
      $winContacts->Top($CONFIG{'WINCONTACTS_TOP'});
    } else { $winContacts->Center(); }
    $winContacts->Show();
  }

}  #--- End MenuContacts_Click

#--------------------------#
sub MenuScrollChat_Click
#--------------------------#
{
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else { $THR = threads->create(\&handlePageThr, \$THR, 5, 0, 0, \$ARROW, \$HOURGLASS, $DEBUG_FILE, \%CONFIG, \$winConfig,
																\$winPb2, \$win, \%STR); }
	
}  #--- End MenuScrollChat_Click

#--------------------------#
sub MenuLoadNewMsg_Click
#--------------------------#
{
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else { $THR = threads->create(\&handlePageThr, \$THR, 6, 0, 0, \$ARROW, \$HOURGLASS, $DEBUG_FILE, \%CONFIG, \$winConfig,
																\$winPb2, \$win, \%STR); }
	
}  #--- End MenuLoadNewMsg_Click

#--------------------------#
sub MenuLoadOldMsg_Click
#--------------------------#
{
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else { $THR = threads->create(\&handlePageThr, \$THR, 7, 0, 0, \$ARROW, \$HOURGLASS, $DEBUG_FILE, \%CONFIG, \$winConfig,
																\$winPb2, \$win, \%STR); }
	
}  #--- End MenuLoadOldMsg_Click

#--------------------------#
sub MenuChat_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else {
		&createWinChat() if !$winChat;
		$winChat->tfChatCurrURL->Text('');
    # Start the thread
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winChat, 7, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINCHAT_LEFT'} and $CONFIG{'WINCHAT_TOP'}) {
      $winChat->Left($CONFIG{'WINCHAT_LEFT'});
      $winChat->Top($CONFIG{'WINCHAT_TOP'});
    } else { $winChat->Center(); }
    $winChat->Show();
  }

}  #--- End MenuChat_Click

#--------------------------#
sub MenuChatMobileFB_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win,$STR{'processRunning'},$STR{'Warning'},0x40010); }
	else { $THR = threads->create(\&handlePageThr, \$THR, 13, 0, 0, \$ARROW, \$HOURGLASS, $DEBUG_FILE, \%CONFIG, \$winConfig,
																\$winPb2, \$win, \%STR); }
	
}  #--- End MenuChatMobileFB_Click

#--------------------------#
sub MenuVocalMessages_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else {
		&createWinVocalMessages() if !$winVocalMessages;
		$winVocalMessages->tfVocalMessagesCurrURL->Text('');
    # Start the thread
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winVocalMessages, 8, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
    if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINVOCALMESSAGES_LEFT'} and $CONFIG{'WINVOCALMESSAGES_TOP'}) {
      $winVocalMessages->Left($CONFIG{'WINVOCALMESSAGES_LEFT'});
      $winVocalMessages->Top($CONFIG{'WINVOCALMESSAGES_TOP'});
    } else { $winVocalMessages->Center(); }
    $winVocalMessages->Show();
  }

}  #--- End MenuVocalMessages_Click

#--------------------------#
sub MenuShowQueue_Click
#--------------------------#
{
	&createWinQueue() if !$winQueue;
  if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINQUEUE_LEFT'} and $CONFIG{'WINQUEUE_TOP'}) {
    $winQueue->Left($CONFIG{'WINQUEUE_LEFT'});
    $winQueue->Top($CONFIG{'WINQUEUE_TOP'});
  } else { $winQueue->Center(); }
  $winQueue->Show();

}  #--- End MenuShowQueue_Click

#--------------------------#
sub MenuConfig_Click
#--------------------------#
{
  # Default tab is General options
  $winConfig->configTab->SetCurSel(0);
  &configTab_Change();
  if ($winConfig->chRememberPos->Checked() and $CONFIG{'WINCONFIG_LEFT'} and $CONFIG{'WINCONFIG_TOP'}) {
    $winConfig->Left($CONFIG{'WINCONFIG_LEFT'});
    $winConfig->Top($CONFIG{'WINCONFIG_TOP'});
  } else { $winConfig->Center(); }
  $winConfig->Show();

}  #--- End MenuConfig_Click

#--------------------------#
sub MenuHelp_Click
#--------------------------#
{
  # Open Firefox to ExtractFace page
  $win->ShellExecute('open', $URL_DOC,'','',1) or
	Win32::GUI::MessageBox($win, Win32::FormatMessage(Win32::GetLastError()), "$STR{'update3'} ExtractFace",0x40010);

}  #--- End MenuHelp_Click

#--------------------------#
sub MenuAbout_Click { &Tray_DblClick(); }
#--------------------------#

#--------------------------#
sub MenuQuit_Click
#--------------------------#
{
  $win->Tray->Remove();
	&rememberPosWin(\$win, 'MAIN', \$winConfig, \%CONFIG, $CONFIG_FILE) if $winConfig->chRememberPos->Checked();
  -1; # Exit signal

}  #--- End MenuQuit_Click

#--------------------------#
sub createWinPID
#--------------------------#
{
	# Get profile ID window
	$winPID = Win32::GUI::Window->new(-name        => 'winPID'           	,
																		-text        => $STR{'currProfileID'},
																		-pos         => [$winPosX, $winPosY],
																		-size        => [300,100]           ,
																		-background  => [255, 255, 255]     ,
																		-hasmaximize => 0                   ,
																		-hasminimize => 1                   ,
																		-helpbutton  => 0                   ,
																		-resizable   => 0                   ,
																		-dialogui    => 1                   , );
	$winPID->SetIcon($winICO);
	$winPID->AddLabel(			-name         => 'lblPIDTitle'				,
													-size         => [ 80, 22]						,
													-pos          => [  5, 13]						,
													-text         => $STR{'ProfileID'}.':'	,
													-background   => [255, 255, 255]			,
													-font         => $font10							, );
	$winPID->AddTextfield(	-name         => 'tfPIDTitle'					,
													-size         => [168, 22]						,
													-pos          => [ 90, 10]						, );
	$winPID->AddButton(			-name         => 'btnPIDRefresh'			,
													-size         => [ 22, 22]            ,
													-pos          => [260, 10]            ,
													-bitmap       => $refresh16           ,
													-tip          => $STR{'ReloadPage'}		,
													-tabstop      => 1                    , );
	$winPID->AddButton(			-name         => 'btnPIDOk'						,
													-size         => [ 50, 25]						,
													-pos          => [125, 40]						,
													-text         => $STR{'Ok'}						,
													-font         => $font10							,
													-ok           => 1										,
													-default      => 1										, );

}  #--- End createWinPID

#--------------------------#
sub btnPIDRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
  else {
    $winPID->tfPIDTitle->Text('');
    $THR = threads->create(\&winPIDThr, \$THR, \$ARROW, \$HOURGLASS, \$winPID, $DEBUG_FILE, \%CONFIG, \$win, \%STR);
  }
  
}  #--- End btnPIDRefresh_Click

#--------------------------#
sub btnPIDOk_Click { &winPID_Terminate(); }
#--------------------------#

#--------------------------#
sub winPID_Terminate
#--------------------------#
{
	&rememberPosWin(\$winPID, 'WINPID', \$winConfig, \%CONFIG, $CONFIG_FILE) if $winConfig->chRememberPos->Checked();
	$winPID->Hide();
  return(0);

}  #--- End winPID_Terminate

#--------------------------#
sub createWinAlbums
#--------------------------#
{
	# Dump albums window
	$winAlbums = Win32::GUI::Window->new( -name        => 'winAlbums'         ,
																				-text        => "$STR{'Dump'} $STR{'Albums'}",
																				-pos         => [$winPosX, $winPosY],
																				-size        => [800,350]           ,
																				-minsize		 => [800,350]           ,
																				-background  => [255, 255, 255]     ,
																				-hasmaximize => 1                   ,
																				-hasminimize => 1                   ,
																				-helpbutton  => 0                   ,
																				-resizable   => 1                   ,
																				-dialogui    => 1                   , );
	$winAlbums->SetIcon($winICO);
	$winAlbums->AddLabel(             -name         => 'lblLogo'                      ,
																		-size         => [128,128]                      ,
																		-pos          => [  5,  5]                      ,
																		-bitmap       => $albumBmp                      ,
																		-background   => [255, 255, 255]                , );
	$winAlbums->AddLabel(             -name         => 'lblAlbumTitle'                ,
																		-size         => [ 75, 22]                      ,
																		-pos          => [140, 18]                      ,
																		-text         => $STR{'Filename'}.':'           ,
																		-background   => [255, 255, 255]                ,
																		-font         => $font10                        , );
	$winAlbums->AddTextfield(         -name         => 'tfAlbumTitle'                 ,
																		-size         => [332, 22]                      ,
																		-pos          => [220, 15]                      ,
																		-tabstop			=> 1															, );
	$winAlbums->AddCombobox(					-name       	=> 'cbAlbumsFormat'              	,
																		-size       	=> [ 55, 22]                      ,
																		-pos        	=> [555, 15]                      ,
																		-dropdownlist => 1                            	,
																		-vscroll    	=> 1                              ,
																		-tabstop    	=> 1                              , );
	$winAlbums->cbAlbumsFormat->Add('XLSX', 'HTML', 'TXT');
	$winAlbums->AddTextfield(         -name         => 'tfPageType'                 	,
																		-size         => [440, 22]                      ,
																		-pos          => [220, 15]                      ,
																		-visible      => 0															, );
	$winAlbums->AddTextfield(         -name         => 'tfAlbumCurrURL'               ,
																		-size         => [440, 22]                      ,
																		-pos          => [220, 15]                      ,
																		-visible      => 0                              , );
	$winAlbums->AddLabel(             -name         => 'lblDirSaveAlbums'             ,
																		-size         => [ 75, 22]                      ,
																		-pos          => [140, 48]                      ,
																		-text         => $STR{'Directory'}.':'          ,
																		-background   => [255, 255, 255]                ,
																		-font         => $font10                        , );
	$winAlbums->AddTextfield(         -name         => 'tfDirSaveAlbums'              ,
																		-size         => [342, 22]                      ,
																		-pos          => [220, 45]                      ,
																		-tabstop			=> 1															, );
	$winAlbums->AddButton(            -name         => 'btnDirSaveAlbums'             ,
																		-size         => [ 22, 22]                      ,
																		-pos          => [564, 45]                      ,
																		-bitmap       => $browseBmp                     ,
																		-tip          => $STR{'SelectDir'}           		,
																		-tabstop			=> 1															, );
	$winAlbums->AddButton(            -name         => 'btnBrowseDirSaveAlbums'       ,
																		-size         => [ 22, 22]                      ,
																		-pos          => [588, 45]                      ,
																		-bitmap       => $explorerBmp                   ,
																		-tip          => $STR{'browseFolder'}           ,
																		-tabstop			=> 1															, );
	$winAlbums->AddLabel(							-name       	=> 'lblAlbumsOpt'                	,
																		-size       	=> [ 75, 22]                      ,
																		-pos        	=> [140, 75]                      ,
																		-text       	=> $STR{'Options'}.':'         		,
																		-font       	=> $font10                        ,
																		-background 	=> [255, 255, 255]                , );
	$winAlbums->AddCheckbox(          -name         => 'chAlbumsOpenDir'              ,
																		-size         => [210, 20]                      ,
																		-pos          => [220, 74]                      ,
																		-text         => $STR{'openAlbumDir'}           ,
																		-background   => [255, 255, 255]                ,
																		-font         => $font10                        ,
																		-tabstop			=> 1															, );
	$winAlbums->AddLabel(             -name         => 'lblInProgress'                ,
																		-size         => [200, 22]                      ,
																		-pos          => [556, 77]                      ,
																		-font         => $font10                        ,
																		-foreground   => [0, 153, 0]                    ,
																		-background   => [255, 255, 255]                ,
																		-visible      => 1                              , );
	$winAlbums->AddButton(            -name         => 'btnAlbumsRefresh'             ,
																		-size         => [ 22, 22]                      ,
																		-pos          => [758, 75]                      ,
																		-bitmap       => $refresh16                     ,
																		-tip          => $STR{'ReloadPage'}          		,
																		-tabstop      => 1                              , );
	$winAlbums->AddGrid (             -name         => 'GridAlbums'                   ,
																		-pos          => [140,100]                      ,
																		-size         => [630,145]                      ,
																		-fixedrows    => 1                              ,
																		-fixedcolumns => 0                              ,
																		-editable     => 0                              ,
																		-tabstop			=> 1															, );
	$winAlbums->GridAlbums->SetListMode(1);
	$winAlbums->GridAlbums->SetHeaderSort();
	$winAlbums->AddLabel(							-name       	=> 'lblAlbumsInc'                	,
																		-size       	=> [ 75, 22]                      ,
																		-pos        	=> [140,254]                      ,
																		-text       	=> $STR{'Include'}.':'         		,
																		-font       	=> $font10                        ,
																		-background 	=> [255, 255, 255]                , );
	$winAlbums->AddCheckbox(					-name         => 'chAlbumsIncSmall'             ,
																		-size       	=> [120, 20]                      ,
																		-pos        	=> [220,250]                      ,
																		-background 	=> [255, 255, 255]                ,
																		-text       	=> $STR{'SmallPic'}       				,
																		-font       	=> $font10                        ,
																		-checked    	=> 1                              ,
																		-tabstop    	=> 1                              , );
	$winAlbums->AddCheckbox(					-name         => 'chAlbumsIncLarge'             ,
																		-size       	=> [120, 20]                      ,
																		-pos        	=> [345,250]                      ,
																		-background 	=> [255, 255, 255]                ,
																		-text       	=> $STR{'LargePic'}       				,
																		-font       	=> $font10                        ,
																		-tabstop    	=> 1                              , );
	$winAlbums->AddCheckbox(					-name         => 'chAlbumsIncVideos'            ,
																		-size       	=> [ 90, 20]                      ,
																		-pos        	=> [470,250]                      ,
																		-background 	=> [255, 255, 255]                ,
																		-text       	=> $STR{'Videos'}									,
																		-font       	=> $font10                        ,
																		-disable      => 0                              , 
																		-tabstop    	=> 1                              , );
	$winAlbums->AddCheckbox(          -name         => 'chPublishDate'                ,
																		-size         => [210, 20]                      ,
																		-pos          => [565,250]                      ,
																		-text         => $STR{'chPublishDate'}          ,
																		-background   => [255, 255, 255]                ,
																		-font         => $font10                        ,
																		-tabstop			=> 1															, );
	$winAlbums->AddButton(						-name       	=> 'btnAlbumsDumpNow'          		,
																		-size       	=> [150, 30]                    	,
																		-pos        	=> [245,310]                    	,
																		-text       	=> $STR{'DumpNow'}              	,
																		-font       	=> $font10                      	,
																		-disabled   	=> 1                            	,
																		-ok         	=> 1                            	,
																		-default    	=> 1                            	,
																		-tabstop			=> 1															, );
	$winAlbums->AddButton(						-name         => 'btnAlbumsAddQueue'						,
																		-size         => [150, 30]                    	,
																		-pos          => [400,310]                    	,
																		-text         => $STR{'AddToQueue'}.' >>'				,
																		-font         => $font10                      	,
																		-disabled     => 1                            	,
																		-tabstop      => 1                            	, );
	# Header Dump albums grid
	$winAlbums->GridAlbums->SetRows(1);
	$winAlbums->GridAlbums->SetColumns(4); # 1: checkbox, 2: Album name, 3e: Album url, 4e: Album id (hidden)
	$winAlbums->GridAlbums->SetCellText(0, 0, ''        );
	$winAlbums->GridAlbums->SetCellType(0, 0, GVIT_CHECK);
	$winAlbums->GridAlbums->SetCellCheck(0, 0, 1);
	$winAlbums->GridAlbums->SetCellText(0, 1, $STR{'albumNames'});
	$winAlbums->GridAlbums->SetCellText(0, 3, $STR{'albumURLs'});
	$winAlbums->GridAlbums->SetColumnWidth(0, 25);
	$winAlbums->GridAlbums->SetColumnWidth(1, 80);
	$winAlbums->GridAlbums->SetColumnWidth(2, 0);
	$winAlbums->GridAlbums->ExpandLastColumn();
	# Load default values
	if (exists($CONFIG{'ALBUMS_REPORT_FORMAT'})) { $winAlbums->cbAlbumsFormat->SetCurSel($CONFIG{'ALBUMS_REPORT_FORMAT'}); }
	else 																				 { $winAlbums->cbAlbumsFormat->SetCurSel(1); 															 } # Default is HTML
  $winAlbums->tfDirSaveAlbums->Text($CONFIG{'DIR_SAVE_ALBUMS'})	if exists($CONFIG{'DIR_SAVE_ALBUMS'}) and -d $CONFIG{'DIR_SAVE_ALBUMS'};
  if (exists($CONFIG{'ALBUMS_OPEN_DIR'})) { $winAlbums->chAlbumsOpenDir->Checked($CONFIG{'ALBUMS_OPEN_DIR'});				 }
  else                                    { $winAlbums->chAlbumsOpenDir->Checked(0); $CONFIG{'ALBUMS_OPEN_DIR'} = 0; } # Default is not checked

}  #--- End createWinAlbums

#--------------------------#
sub winAlbums_Resize
#--------------------------#
{
	$winAlbums->tfAlbumTitle->Width($winAlbums->ScaleWidth()-283);
	$winAlbums->cbAlbumsFormat->Left($winAlbums->ScaleWidth()-60);
	$winAlbums->tfDirSaveAlbums->Width($winAlbums->ScaleWidth()-272);
	$winAlbums->btnDirSaveAlbums->Left($winAlbums->ScaleWidth()-50);
	$winAlbums->btnBrowseDirSaveAlbums->Left($winAlbums->ScaleWidth()-27);
	$winAlbums->lblInProgress->Left($winAlbums->ScaleWidth()-233);
	$winAlbums->btnAlbumsRefresh->Left($winAlbums->ScaleWidth()-27);
	$winAlbums->GridAlbums->Width($winAlbums->ScaleWidth()-144);
	$winAlbums->GridAlbums->Height($winAlbums->ScaleHeight()-170);
	$winAlbums->GridAlbums->AutoSize();
	$winAlbums->GridAlbums->ExpandLastColumn();
	$winAlbums->lblAlbumsInc->Top($winAlbums->ScaleHeight()-64);
	$winAlbums->chAlbumsIncSmall->Top($winAlbums->ScaleHeight()-64);
	$winAlbums->chAlbumsIncLarge->Top($winAlbums->ScaleHeight()-64);
	$winAlbums->chAlbumsIncVideos->Top($winAlbums->ScaleHeight()-64);
	$winAlbums->chPublishDate->Top($winAlbums->ScaleHeight()-64);
	$winAlbums->btnAlbumsDumpNow->Left(($winAlbums->ScaleWidth()/2)-155);
	$winAlbums->btnAlbumsDumpNow->Top($winAlbums->ScaleHeight()-35);
	$winAlbums->btnAlbumsAddQueue->Left(($winAlbums->ScaleWidth()/2)+5);
	$winAlbums->btnAlbumsAddQueue->Top($winAlbums->ScaleHeight()-35);	

}  #--- End winAlbums_Resize

#--------------------------#
sub cbAlbumsFormat_Change
#--------------------------#
{
  my $selFormat = $winAlbums->cbAlbumsFormat->GetCurSel();
	$CONFIG{'ALBUMS_REPORT_FORMAT'} = $selFormat;
	&saveConfig(\%CONFIG, $CONFIG_FILE);
	&isDumpAlbumsReady(\$winAlbums);
	return(1);

}  #--- End cbAlbumsFormat_Change

#--------------------------#
sub tfDirSaveAlbums_Change
#--------------------------#
{
  my $saveDir = $winAlbums->tfDirSaveAlbums->Text();
  # Remember
  if ($saveDir and -d $saveDir and $winConfig->chRememberSaveDir->Checked()) {
		$CONFIG{'DIR_SAVE_ALBUMS'} = $saveDir;
		&saveConfig(\%CONFIG, $CONFIG_FILE);
  }
  &isDumpAlbumsReady(\$winAlbums);
	return(1);

}  #--- End tfDirSaveAlbums_Change

#--------------------------#
sub tfAlbumTitle_Change			{ &isDumpAlbumsReady(\$winAlbums); }
sub chAlbumsIncSmall_Click	{ &isDumpAlbumsReady(\$winAlbums); }
sub chAlbumsIncLarge_Click	{ &isDumpAlbumsReady(\$winAlbums); }
sub chAlbumsIncVideos_Click	{ &isDumpAlbumsReady(\$winAlbums); }
#--------------------------#

#--------------------------#
sub btnDirSaveAlbums_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winAlbums->tfDirSaveAlbums->Text();
  my $dir;
  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) { while ($lastDir =~ /[^\\]$/) { chop($lastDir); } }
    $dir = Win32::GUI::BrowseForFolder(-owner => $winAlbums, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1, -directory => $lastDir);
  } else {
    $dir = Win32::GUI::BrowseForFolder(-owner => $winAlbums, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1);
  }
  # Selected folder
  if ($dir and -d $dir) {
    chop($dir) if $dir =~ /\\$/;
    $winAlbums->tfDirSaveAlbums->Text($dir);
  }
	return(1);
  
}  #--- End btnDirSaveAlbums_Click

#--------------------------#
sub btnBrowseDirSaveAlbums_Click { &exploreDir($winAlbums->tfDirSaveAlbums->Text()); }
#--------------------------#

#--------------------------#
sub btnAlbumsRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else {
    $winAlbums->tfAlbumTitle->Text('');
    $winAlbums->GridAlbums->DeleteNonFixedRows();
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winAlbums, 1, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
  }
  
}  #--- End btnAlbumsRefresh_Click

#--------------------------#
sub GridAlbums_Click
#--------------------------#
{
  # Local variables
  my ($row, $column) = @_;
  # Select
  if (!$column) {
    my $selStatus = $winAlbums->GridAlbums->GetCellCheck($row, $column);
    if (!$row) {
      if (!$selStatus) { # Check all
				for (my $i = 0; $i < $winAlbums->GridAlbums->GetRows(); $i++) { $winAlbums->GridAlbums->SetCellCheck($i, 0, 1); }
			} else { # Uncheck all
				for (my $i = 0; $i < $winAlbums->GridAlbums->GetRows(); $i++) { $winAlbums->GridAlbums->SetCellCheck($i, 0, 0); }
			}
    } else {
      if (!$selStatus) { $winAlbums->GridAlbums->SetCellCheck($row, $column, 1); } # Check
      else             { $winAlbums->GridAlbums->SetCellCheck($row, $column, 0); } # Uncheck
    }
  }
	&isDumpAlbumsReady(\$winAlbums);
  return(1);

}  #--- End GridAlbums_Click

#--------------------------#
sub chAlbumsOpenDir_Click
#--------------------------#
{
  # Save the choice
  if ($winAlbums->chAlbumsOpenDir->Checked()) {
    $CONFIG{'ALBUMS_OPEN_DIR'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  # Don't save
  } else {
    $CONFIG{'ALBUMS_OPEN_DIR'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }
	return(1);

}  #--- End chAlbumsOpenDir_Click

#--------------------------#
sub btnAlbumsDumpNow_Click
#--------------------------#
{
	&dumpAlbums(1, \$winAlbums, \$winQueue, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnAlbumsDumpNow_Click

#--------------------------#
sub btnAlbumsAddQueue_Click
#--------------------------#
{
	&dumpAlbums(0, \$winAlbums, \$winQueue, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnAlbumsAddQueue_Click
  
#--------------------------#
sub winPb_Terminate
#--------------------------#
{
  $winPb->Hide();
  $win->Enable();
  $win->SetForegroundWindow();
  return(0);

}  #--- End winPb_Terminate

#--------------------------#
sub winPb2_Terminate
#--------------------------#
{
  $winPb2->Hide();
  $win->Enable();
  $win->SetForegroundWindow();
  return(0);

}  #--- End winPb2_Terminate

#--------------------------#
sub winAlbums_Terminate
#--------------------------#
{
	&rememberPosWin(\$winAlbums, 'WINALBUMS', \$winConfig, \%CONFIG, $CONFIG_FILE) if $winConfig->chRememberPos->Checked();
	$winAlbums->Hide();
  return(0);

}  #--- End winAlbums_Terminate

#--------------------------#
sub createWinFriends
#--------------------------#
{
	# Dump Friends window
	$winFriends = Win32::GUI::Window->new(-name        => 'winFriends'          ,
																				-text        => "$STR{'Dump'} $STR{'friends'}",
																				-pos         => [$winPosX, $winPosY]	,
																				-size        => [800,315]             ,
																				-minsize		 => [800,315]             ,
																				-background  => [255, 255, 255]       ,
																				-hasmaximize => 1                     ,
																				-hasminimize => 1                     ,
																				-helpbutton  => 0                     ,
																				-resizable   => 1                     ,
																				-dialogui    => 1                     , );
	$winFriends->SetIcon($winICO);
	$winFriends->AddLabel(              -name       => 'lblLogo'                      ,
																			-size       => [128,128]                      ,
																			-pos        => [  0,  5]                      ,
																			-bitmap     => $friendsBmp                    ,
																			-background => [255, 255, 255]                , );
	$winFriends->AddTextfield(					-name       => 'tfFriendCurrURL'							,
																			-size       => [440, 22]                      ,
																			-pos        => [220, 15]                      ,
																			-visible    => 0                              , );
	$winFriends->AddLabel(              -name       => 'lblFriendName'                ,
																			-size       => [ 75, 22]                      ,
																			-pos        => [140, 18]                      ,
																			-text       => $STR{'Filename'}.':'           ,
																			-font       => $font10                        ,
																			-background => [255, 255, 255]                , );
	$winFriends->AddTextfield(          -name       => 'tfFriendName'                 ,
																			-size       => [332, 22]                      ,
																			-pos        => [220, 15]                      ,
																			-tabstop    => 1                              , );
	$winFriends->AddCombobox(           -name       => 'cbFriendsFormat'              ,
																			-size       => [ 55, 22]                      ,
																			-pos        => [555, 15]                      ,
																			-dropdownlist => 1                            ,
																			-vscroll    => 1                              ,
																			-tabstop    => 1                              , );
	$winFriends->cbFriendsFormat->Add('XLSX', 'HTML', 'TXT');
	$winFriends->AddLabel(              -name       => 'lblDirSaveFriends'            ,
																			-size       => [ 75, 22]                      ,
																			-pos        => [140, 48]                      ,
																			-text       => $STR{'Directory'}.':'          ,
																			-font       => $font10                        ,
																			-background => [255, 255, 255]                , );
	$winFriends->AddTextfield(          -name       => 'tfDirSaveFriends'             ,
																			-size       => [342, 22]                      ,
																			-pos        => [220, 45]                      ,
																			-tabstop    => 1                              , );
	$winFriends->AddButton(             -name       => 'btnDirSaveFriends'            ,
																			-size       => [ 22, 22]                      ,
																			-pos        => [564, 45]                      ,
																			-bitmap     => $browseBmp                     ,
																			-tip        => $STR{'SelectDir'}           		,
																			-tabstop    => 1                              , );
	$winFriends->AddButton(             -name       => 'btnBrowseDirSaveFriends'      ,
																			-size       => [ 22, 22]                      ,
																			-pos        => [588, 45]                      ,
																			-bitmap     => $explorerBmp                   ,
																			-tip        => $STR{'browseFolder'}           ,
																			-tabstop    => 1                              , );
	$winFriends->AddLabel(              -name       => 'lblFriendsOpt'                ,
																			-size       => [ 75, 22]                      ,
																			-pos        => [140, 76]                      ,
																			-text       => $STR{'Options'}.':'         		,
																			-font       => $font10                        ,
																			-background => [255, 255, 255]                , );
	$winFriends->AddCheckbox(           -name       => 'chFriendsProfileIcons'        ,
																			-size       => [170, 20]                      ,
																			-pos        => [220, 75]                      ,
																			-text       => "$STR{'Include'} $STR{'profileIcons'}",
																			-background => [255, 255, 255]                ,
																			-font       => $font10                        ,
																			-tabstop    => 1                              , );
	$winFriends->AddLabel(              -name       => 'lblInProgress'                ,
																			-size       => [200, 22]                      ,
																			-pos        => [556, 77]                      ,
																			-font       => $font10                        ,
																			-foreground => [0, 153, 0]                    ,
																			-background => [255, 255, 255]                ,
																			-visible    => 1                              , );
	$winFriends->AddButton(             -name       => 'btnFriendsRefresh'            ,
																			-size       => [ 22, 22]                      ,
																			-pos        => [758, 76]                      ,
																			-bitmap     => $refresh16                     ,
																			-tip        => $STR{'ReloadPage'}          		,
																			-tabstop    => 1                              , );
	$winFriends->AddGrid (              -name         => 'GridFriends'                ,
																			-pos          => [140,100]                    ,
																			-size         => [640,137]                    ,
																			-fixedrows    => 1                            ,
																			-fixedcolumns => 0                            ,
																			-editable     => 0                            , );
	$winFriends->GridFriends->SetListMode(1);
	$winFriends->GridFriends->SetHeaderSort();
	$winFriends->AddButton(             -name       	=> 'btnFriendsDumpNow'          ,
																			-size       	=> [150, 30]                    ,
																			-pos        	=> [245,242]                    ,
																			-text       	=> $STR{'DumpNow'}              ,
																			-font       	=> $font10                      ,
																			-disabled   	=> 1                            ,
																			-tabstop    	=> 1                            ,
																			-ok         	=> 1                            ,
																			-default    	=> 1                            , );
	$winFriends->AddButton(             -name         => 'btnFriendsAddQueue'					,
																			-size         => [150, 30]                    ,
																			-pos          => [400,242]                    ,
																			-text         => $STR{'AddToQueue'}.' >>'			,
																			-font         => $font10                      ,
																			-disabled     => 1                            ,
																			-tabstop      => 1                            , );
	# Header Dump friends grid
	$winFriends->GridFriends->SetRows(1);
	$winFriends->GridFriends->SetColumns(4); # 1: checkbox, 2: Category name, 3e: Category Id (hidden), 4e: Category url
	$winFriends->GridFriends->SetCellText(0, 0, ''        );
	$winFriends->GridFriends->SetCellType(0, 0, GVIT_CHECK);
	$winFriends->GridFriends->SetCellCheck(0, 0, 1);
	$winFriends->GridFriends->SetCellText(0, 1, $STR{'Category'});
	$winFriends->GridFriends->SetCellText(0, 3, $STR{'url'});
	$winFriends->GridFriends->SetColumnWidth(0, 25);
	$winFriends->GridFriends->SetColumnWidth(1, 80);
	$winFriends->GridFriends->SetColumnWidth(2, 0);
	$winFriends->GridFriends->ExpandLastColumn();
	# Load default values
	$winFriends->tfDirSaveFriends->Text($CONFIG{'DIR_SAVE_FRIENDS'}) if exists($CONFIG{'DIR_SAVE_FRIENDS'}) and -d $CONFIG{'DIR_SAVE_FRIENDS'};
	if (exists($CONFIG{'FRIENDS_REPORT_FORMAT'})) { $winFriends->cbFriendsFormat->SetCurSel($CONFIG{'FRIENDS_REPORT_FORMAT'}); }
	else 																				 	{ $winFriends->cbFriendsFormat->SetCurSel(0); 															 } # Default is XLSX
  if (exists($CONFIG{'FRIENDS_INCLUDE_ICONS'})) { $winFriends->chFriendsProfileIcons->Checked($CONFIG{'FRIENDS_INCLUDE_ICONS'});				}
  else                                          { $winFriends->chFriendsProfileIcons->Checked(1); $CONFIG{'FRIENDS_INCLUDE_ICONS'} = 1;	} # Default is checked
	&saveConfig(\%CONFIG, $CONFIG_FILE);

}  #--- End createWinFriends

#--------------------------#
sub winFriends_Resize
#--------------------------#
{
	$winFriends->tfFriendName->Width($winFriends->ScaleWidth()-283);
	$winFriends->cbFriendsFormat->Left($winFriends->ScaleWidth()-60);
	$winFriends->tfDirSaveFriends->Width($winFriends->ScaleWidth()-272);
	$winFriends->btnDirSaveFriends->Left($winFriends->ScaleWidth()-50);
	$winFriends->btnBrowseDirSaveFriends->Left($winFriends->ScaleWidth()-27);
	$winFriends->lblInProgress->Left($winFriends->ScaleWidth()-233);
	$winFriends->btnFriendsRefresh->Left($winFriends->ScaleWidth()-27);
	$winFriends->GridFriends->Width($winFriends->ScaleWidth()-146);
	$winFriends->GridFriends->Height($winFriends->ScaleHeight()-140);
	$winFriends->GridFriends->AutoSize();
	$winFriends->GridFriends->ExpandLastColumn();
	$winFriends->btnFriendsDumpNow->Left(($winFriends->ScaleWidth()/2)-155);
	$winFriends->btnFriendsDumpNow->Top($winFriends->ScaleHeight()-35);
	$winFriends->btnFriendsAddQueue->Left(($winFriends->ScaleWidth()/2)+5);
	$winFriends->btnFriendsAddQueue->Top($winFriends->ScaleHeight()-35);

}  #--- End winFriends_Resize

#--------------------------#
sub cbFriendsFormat_Change
#--------------------------#
{
  my $selFormat = $winFriends->cbFriendsFormat->GetCurSel();
	$CONFIG{'FRIENDS_REPORT_FORMAT'} = $selFormat;
	&saveConfig(\%CONFIG, $CONFIG_FILE);
	return(1);

}  #--- End cbFriendsFormat_Change

#--------------------------#
sub btnFriendsRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else {
    $winFriends->GridFriends->DeleteNonFixedRows();
    $winFriends->tfFriendName->Text('');
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winFriends, 2, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
  }
  
}  #--- End btnFriendsRefresh_Click

#--------------------------#
sub tfFriendName_Change { &isDumpFriendsReady(\$winFriends); }
#--------------------------#

#--------------------------#
sub tfDirSaveFriends_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winFriends->tfDirSaveFriends->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winConfig->chRememberSaveDir->Checked()) {
    $CONFIG{'DIR_SAVE_FRIENDS'} = $saveDir;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }
  &isDumpFriendsReady(\$winFriends);

}  #--- End tfDirSaveFriends_Change

#--------------------------#
sub btnDirSaveFriends_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winFriends->tfDirSaveFriends->Text();
  my $dir;# Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) { while ($lastDir =~ /[^\\]$/) { chop($lastDir); } }
    $dir = Win32::GUI::BrowseForFolder(-owner => $winFriends, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1, -directory => $lastDir);
  } else {
    $dir = Win32::GUI::BrowseForFolder(-owner => $winFriends, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1);
  }
  # Selected folder
  if ($dir and -d $dir) {
    chop($dir) if $dir =~ /\\$/;
    $winFriends->tfDirSaveFriends->Text($dir);
  }
	return(1);
  
}  #--- End btnDirSaveFriends_Click

#--------------------------#
sub btnBrowseDirSaveFriends_Click { &exploreDir($winFriends->tfDirSaveFriends->Text()); }
#--------------------------#

#--------------------------#
sub chFriendsProfileIcons_Click
#--------------------------#
{
  # Save the choice
  if ($winFriends->chFriendsProfileIcons->Checked()) {
    $CONFIG{'FRIENDS_INCLUDE_ICONS'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  # Don't save
  } else {
    $CONFIG{'FRIENDS_INCLUDE_ICONS'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chFriendsProfileIcons_Click

#--------------------------#
sub GridFriends_Click
#--------------------------#
{
  # Local variables
  my ($row, $column) = @_;
  # Select
  if (!$column) {
    my $selStatus = $winFriends->GridFriends->GetCellCheck($row, $column);
    if (!$row) {
      # Check all
      if (!$selStatus) {
				for (my $i = 0; $i < $winFriends->GridFriends->GetRows(); $i++) { $winFriends->GridFriends->SetCellCheck($i, 0, 1); }
      # Uncheck all
			} else {
				for (my $i = 0; $i < $winFriends->GridFriends->GetRows(); $i++) { $winFriends->GridFriends->SetCellCheck($i, 0, 0); }
			}
    } else {
      if (!$selStatus) { $winFriends->GridFriends->SetCellCheck($row, $column, 1); } # Check
      else             { $winFriends->GridFriends->SetCellCheck($row, $column, 0); } # Uncheck
    }
  }
	&isDumpFriendsReady(\$winFriends);
  return(1);

}  #--- End GridFriends_Click

#--------------------------#
sub btnFriendsDumpNow_Click
#--------------------------#
{
	&dumpFriends(1, \$winFriends, \$winQueue, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnFriendsDumpNow_Click

#--------------------------#
sub btnFriendsAddQueue_Click
#--------------------------#
{
	&dumpFriends(0, \$winFriends, \$winQueue, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnFriendsAddQueue_Click

#--------------------------#
sub winFriends_Terminate
#--------------------------#
{
	&rememberPosWin(\$winFriends, 'WINFRIENDS', \$winConfig, \%CONFIG, $CONFIG_FILE) if $winConfig->chRememberPos->Checked();
	$winFriends->Hide();
  return(0);

}  #--- End winFriends_Terminate

#--------------------------#
sub createWinMutualFriends
#--------------------------#
{
	# Dump Mutual Friends window
	$winMutualFriends = Win32::GUI::Window->new(-name        => 'winMutualFriends'	,
																							-text        => "$STR{'Dump'} $STR{'MutualFriends'}",
																							-pos         => [$winPosX, $winPosY],
																							-size        => [800,175]           ,
																							-background  => [255, 255, 255]     ,
																							-hasmaximize => 0                   ,
																							-hasminimize => 1                   ,
																							-helpbutton  => 0                   ,
																							-resizable   => 0                   ,
																							-dialogui    => 1                   , );
	$winMutualFriends->SetIcon($winICO);
	$winMutualFriends->AddLabel(          -name       	=> 'lblLogo'              ,
																				-size       	=> [128,128]              ,
																				-pos        	=> [  0,  5]              ,
																				-bitmap     	=> $chatBmp            		,
																				-background 	=> [255, 255, 255]        , );
	$winMutualFriends->AddLabel(          -name       	=> 'lblMutualFriendsName'			,
																				-size       	=> [ 70, 22]              ,
																				-pos        	=> [140, 18]              ,
																				-text       	=> $STR{'Filename'}.':'   ,
																				-font       	=> $font10                ,
																				-background 	=> [255, 255, 255]        , );
	$winMutualFriends->AddTextfield(      -name       	=> 'tfMutualFriendsName'	,
																				-size       	=> [512, 22]              ,
																				-pos        	=> [220, 15]              ,
																				-tabstop    	=> 1                      , );
	$winMutualFriends->AddTextfield(      -name         => 'tfMutualFriendsCurrURL',
																				-size         => [440, 22]							,
																				-pos          => [220, 15]							,
																				-visible      => 0											, );
	$winMutualFriends->AddCombobox(				-name       	=> 'cbMutualFriendsFormat',
																				-size       	=> [ 55, 22]              ,
																				-pos        	=> [735, 15]              ,
																				-dropdownlist => 1                      ,
																				-vscroll    	=> 1                      ,
																				-tabstop    	=> 1                      , );
	$winMutualFriends->cbMutualFriendsFormat->Add('XLSX', 'HTML', 'TXT');
	$winMutualFriends->AddLabel(          -name       	=> 'lblDirSaveMutualFriends',
																				-size       	=> [ 70, 22]              ,
																				-pos        	=> [140, 48]              ,
																				-text       	=> $STR{'Directory'}.':'  ,
																				-font       	=> $font10                ,
																				-background 	=> [255, 255, 255]        , );
	$winMutualFriends->AddTextfield(      -name       	=> 'tfDirSaveMutualFriends',
																				-size       	=> [522, 22]              ,
																				-pos        	=> [220, 45]              ,
																				-tabstop    	=> 1                      , );
	$winMutualFriends->AddButton(         -name       	=> 'btnDirSaveMutualFriends',
																				-size       	=> [ 22, 22]              ,
																				-pos        	=> [744, 45]              ,
																				-bitmap     	=> $browseBmp             ,
																				-tip          => $STR{'SelectDir'}			,
																				-tabstop    	=> 1                      , );
	$winMutualFriends->AddButton(         -name       	=> 'btnBrowseDirSaveMutualFriends',
																				-size       	=> [ 22, 22]              ,
																				-pos        	=> [768, 45]              ,
																				-bitmap     	=> $explorerBmp           ,
																				-tip        	=> $STR{'browseFolder'}   ,
																				-tabstop    	=> 1                      , );
	$winMutualFriends->AddLabel(					-name       	=> 'lblMutualFriendsOpt'  ,
																				-size       	=> [ 75, 22]              ,
																				-pos        	=> [140, 75]              ,
																				-text       	=> $STR{'Options'}.':' 		,
																				-font       	=> $font10                ,
																				-background 	=> [255, 255, 255]        , );
	$winMutualFriends->AddCheckbox(       -name       	=> 'chMutualFriendsProfileIcons',
																				-size       	=> [170, 20]              ,
																				-pos        	=> [220, 75]              ,
																				-text       	=> "$STR{'Include'} $STR{'profileIcons'}",
																				-background 	=> [255, 255, 255]        ,
																				-font       	=> $font10                ,
																				-tabstop    	=> 1                      , );
	$winMutualFriends->AddCheckbox(       -name       	=> 'chMutualFriendsAutoScroll' ,
																				-size       	=> [220, 22]              ,
																				-pos        	=> [395, 74]              ,
																				-text       	=> $STR{'AutoScroll'}			,
																				-background 	=> [255, 255, 255]        ,
																				-font       	=> $font10                ,
																				-checked    	=> 0                      , );
	$winMutualFriends->AddLabel(					-name       	=> 'lblInProgress'        ,
																				-size       	=> [200, 22]              ,
																				-pos        	=> [556, 77]              ,
																				-font       	=> $font10                ,
																				-foreground 	=> [0, 153, 0]            ,
																				-background 	=> [255, 255, 255]        ,
																				-visible    	=> 1                      , );
	$winMutualFriends->AddButton(         -name       	=> 'btnMutualFriendsRefresh',
																				-size       	=> [ 22, 22]              ,
																				-pos        	=> [768, 75]              ,
																				-bitmap     	=> $refresh16             ,
																				-tip        	=> $STR{'ReloadPage'}  		,
																				-tabstop    	=> 1                      , );
	$winMutualFriends->AddButton(					-name       	=> 'btnMutualFriendsDumpNow',
																				-size       	=> [150, 30]              ,
																				-pos        	=> [245,105]              ,
																				-text       	=> $STR{'DumpNow'}        ,
																				-font       	=> $font10                ,
																				-disabled   	=> 1                      ,
																				-ok         	=> 1                      ,
																				-default    	=> 1                      ,
																				-tabstop			=> 1											, );
	$winMutualFriends->AddButton(					-name         => 'btnMutualFriendsAddQueue'	,
																				-size         => [150, 30]              ,
																				-pos          => [400,105]              ,
																				-text         => $STR{'AddToQueue'}.' >>',
																				-font         => $font10                ,
																				-disabled     => 1                      ,
																				-tabstop      => 1                      , );
	# Load default values
	if (exists($CONFIG{'MUTUALFRIENDS_REPORT_FORMAT'})) {
		$winMutualFriends->cbMutualFriendsFormat->SetCurSel($CONFIG{'MUTUALFRIENDS_REPORT_FORMAT'});
	}	else { $winMutualFriends->cbMutualFriendsFormat->SetCurSel(0); } # Default is XLSX
	$winMutualFriends->tfDirSaveMutualFriends->Text($CONFIG{'DIR_SAVE_MUTUALFRIENDS'})
	if exists($CONFIG{'DIR_SAVE_MUTUALFRIENDS'}) and -d $CONFIG{'DIR_SAVE_MUTUALFRIENDS'};
  if (exists($CONFIG{'MUTUALFRIENDS_PROFILE_ICONS'})) {
		$winMutualFriends->chMutualFriendsProfileIcons->Checked($CONFIG{'MUTUALFRIENDS_PROFILE_ICONS'});
	} else {
		$winMutualFriends->chMutualFriendsProfileIcons->Checked(0); # Default is not checked
		$CONFIG{'MUTUALFRIENDS_PROFILE_ICONS'} = 0;
	}
  if (exists($CONFIG{'MUTUALFRIENDS_AUTOSCROLL'})) {
		$winMutualFriends->chMutualFriendsAutoScroll->Checked($CONFIG{'MUTUALFRIENDS_AUTOSCROLL'});
	} else {
		$winMutualFriends->chMutualFriendsAutoScroll->Checked(0); # Default is not checked
		$CONFIG{'MUTUALFRIENDS_AUTOSCROLL'} = 0;
	}

}  #--- End createWinMutualFriends

#--------------------------#
sub cbMutualFriendsFormat_Change
#--------------------------#
{
  my $selFormat = $winMutualFriends->cbMutualFriendsFormat->GetCurSel();
	$CONFIG{'MUTUALFRIENDS_REPORT_FORMAT'} = $selFormat;
	&saveConfig(\%CONFIG, $CONFIG_FILE);
	return(1);

}  #--- End cbMutualFriendsFormat_Change

#--------------------------#
sub btnMutualFriendsRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else { # Start the thread
    $winMutualFriends->tfMutualFriendsName->Text('');
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winMutualFriends, 3, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
  }
  
}  #--- End btnMutualFriendsRefresh_Click

#--------------------------#
sub tfMutualFriendsName_Change { &isDumpMutualFriendsReady(\$winMutualFriends); }
#--------------------------#

#--------------------------#
sub tfDirSaveMutualFriends_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winMutualFriends->tfDirSaveMutualFriends->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winConfig->chRememberSaveDir->Checked()) {
    $CONFIG{'DIR_SAVE_MUTUALFRIENDS'} = $saveDir;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }
  &isDumpMutualFriendsReady(\$winMutualFriends);

}  #--- End tfDirSaveMutualFriends_Change

#--------------------------#
sub btnDirSaveMutualFriends_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winMutualFriends->tfDirSaveMutualFriends->Text();
  my $dir;
  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) { while ($lastDir =~ /[^\\]$/) { chop($lastDir); } }
    $dir = Win32::GUI::BrowseForFolder(-owner => $winMutualFriends, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1, -directory => $lastDir);
  } else {
    $dir = Win32::GUI::BrowseForFolder(-owner => $winMutualFriends, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1);
  }
  # Selected folder
  if ($dir and -d $dir) {
    chop($dir) if $dir =~ /\\$/;
    $winMutualFriends->tfDirSaveMutualFriends->Text($dir);
  }
	return(1);
  
}  #--- End btnDirSaveMutualFriends_Click

#--------------------------#
sub btnBrowseDirSaveMutualFriends_Click { &exploreDir($winMutualFriends->tfDirSaveMutualFriends->Text()); }
#--------------------------#

#--------------------------#
sub chMutualFriendsProfileIcons_Click
#--------------------------#
{
  # Save the choice
  if ($winMutualFriends->chMutualFriendsProfileIcons->Checked()) {
    $CONFIG{'MUTUALFRIENDS_PROFILE_ICONS'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  # Don't save
  } else {
    $CONFIG{'MUTUALFRIENDS_PROFILE_ICONS'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chMutualFriendsProfileIcons_Click

#--------------------------#
sub chMutualFriendsAutoScroll_Click
#--------------------------#
{
  # Save the choice
  if ($winMutualFriends->chMutualFriendsAutoScroll->Checked()) {
    $CONFIG{'MUTUALFRIENDS_AUTOSCROLL'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  # Don't save
  } else {
    $CONFIG{'MUTUALFRIENDS_AUTOSCROLL'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chMutualFriendsAutoScroll_Click

#--------------------------#
sub btnMutualFriendsDumpNow_Click
#--------------------------#
{
	&dumpMutualFriends(1, \$winMutualFriends, \$winQueue, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnMutualFriendsDumpNow_Click

#--------------------------#
sub btnMutualFriendsAddQueue_Click
#--------------------------#
{
	&dumpMutualFriends(0, \$winMutualFriends, \$winQueue, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnMutualFriendsAddQueue_Click

#--------------------------#
sub winMutualFriends_Terminate
#--------------------------#
{
	&rememberPosWin(\$winMutualFriends, 'WINMUTUALFRIENDS', \$winConfig, \%CONFIG, $CONFIG_FILE) if $winConfig->chRememberPos->Checked();
	$winMutualFriends->Hide();
  return(0);

}  #--- Fin winMutualFriends_Terminate

#--------------------------#
sub createWinEvent
#--------------------------#
{
	# Dump Event members window
	$winEvent = Win32::GUI::Window->new(-name        => 'winEvent'          ,
																			-text        => "$STR{'Dump'} $STR{'EventMembers'}",
																			-pos         => [$winPosX, $winPosY],
																			-size        => [800,225]           ,
																			-background  => [255, 255, 255]     ,
																			-hasmaximize => 0                   ,
																			-hasminimize => 1                   ,
																			-helpbutton  => 0                   ,
																			-resizable   => 0                   ,
																			-dialogui    => 1                   , );
	$winEvent->SetIcon($winICO);
	$winEvent->AddLabel(              -name         => 'lblLogo'                      ,
																		-size         => [128,128]                      ,
																		-pos          => [  0,  5]                      ,
																		-bitmap       => $eventBmp                      ,
																		-background   => [255, 255, 255]                , );
	$winEvent->AddLabel(              -name         => 'lblEventFilename'             ,
																		-size         => [ 75, 22]                      ,
																		-pos          => [140, 18]                      ,
																		-text         => $STR{'Filename'}.':'           ,
																		-font         => $font10                        ,
																		-background   => [255, 255, 255]                , );
	$winEvent->AddTextfield(          -name         => 'tfEventFilename'              ,
																		-size         => [512, 22]                      ,
																		-pos          => [220, 15]                      ,
																		-tabstop      => 1                              , );
	$winEvent->AddTextfield(					-name         => 'tfEventCurrURL'               ,
																		-size         => [260, 22]                      ,
																		-pos          => [220, 15]                      ,
																		-visible      => 0                              , );
	$winEvent->AddCombobox(           -name       	=> 'cbEventFormat'              	,
																		-size       	=> [ 55, 22]                      ,
																		-pos        	=> [735, 15]                      ,
																		-dropdownlist => 1                            	,
																		-vscroll    	=> 1                              ,
																		-tabstop    	=> 1                              , );
	$winEvent->cbEventFormat->Add(  'XLSX', 'HTML', 'TXT');
	$winEvent->AddLabel(              -name         => 'lblDirSaveEvent'              ,
																		-size         => [ 75, 22]                      ,
																		-pos          => [140, 48]                      ,
																		-text         => $STR{'Directory'}.':'          ,
																		-font         => $font10                        , 
																		-background   => [255, 255, 255]                , );
	$winEvent->AddTextfield(          -name         => 'tfDirSaveEvent'               ,
																		-size         => [522, 22]                      ,
																		-pos          => [220, 45]                      ,
																		-tabstop      => 1                              , );
	$winEvent->AddButton(             -name         => 'btnDirSaveEvent'              ,
																		-size         => [ 22, 22]                      ,
																		-pos          => [744, 45]                      ,
																		-bitmap       => $browseBmp                     ,
																		-tip          => $STR{'SelectDir'}							,
																		-tabstop      => 1                              , );
	$winEvent->AddButton(             -name         => 'btnBrowseDirSaveEvent'        ,
																		-size         => [ 22, 22]                      ,
																		-pos          => [768, 45]                      ,
																		-bitmap       => $explorerBmp                   ,
																		-tip          => $STR{'browseFolder'}           ,
																		-tabstop      => 1                              , );
	$winEvent->AddLabel(              -name         => 'lblEventsOpt'                 ,
																		-size         => [ 75, 22]                      ,
																		-pos          => [140, 75]                      ,
																		-text         => $STR{'Options'}.':'         		,
																		-font         => $font10                        ,
																		-background   => [255, 255, 255]                , );
	$winEvent->AddCheckbox(           -name         => 'chEventProfileIcons'          ,
																		-size         => [170, 22]                      ,
																		-pos          => [220, 74]                      ,
																		-text         => "$STR{'Include'} $STR{'profileIcons'}",
																		-background   => [255, 255, 255]                ,
																		-font         => $font10                        ,
																		-tabstop      => 1                              ,
																		-checked      => 0                              , );
	$winEvent->AddLabel(              -name         => 'lblInProgress'                ,
																		-size         => [216, 22]                      ,
																		-pos          => [540, 77]                      ,
																		-font         => $font10                        ,
																		-foreground   => [0, 153, 0]                    ,
																		-background   => [255, 255, 255]                , );
	$winEvent->AddButton(             -name         => 'btnEventRefresh'              ,
																		-size         => [ 22, 22]                      ,
																		-pos          => [768, 73]                      ,
																		-bitmap       => $refresh16                     ,
																		-tip          => $STR{'ReloadPage'}          		,
																		-tabstop      => 1                              , );
	$winEvent->AddTextfield(          -name         => 'tfDataURL'                    ,
																		-size         => [530, 22]                      ,
																		-pos          => [260,100]                      ,
																		-visible      => 0                              , );
	$winEvent->AddLabel(              -name         => 'lblGuestLists'                ,
																		-size         => [ 75, 22]                      ,
																		-pos          => [140,100]                      ,
																		-text         => $STR{'Lists'}.':'      				,
																		-font         => $font10                        ,
																		-background   => [255, 255, 255]                , );
	$winEvent->AddCheckbox(           -name         => 'chGoing'                      ,
																		-size         => [160, 20]                      ,
																		-pos          => [220,100]                      ,
																		-text         => 'Going'                        ,
																		-background   => [255, 255, 255]                ,
																		-font         => $font10                        ,
																		-tabstop      => 1                              ,
																		-checked      => 0                              , );
	$winEvent->AddCheckbox(           -name         => 'chMaybe'                      ,
																		-size         => [160, 20]                      ,
																		-pos          => [385,100]                      ,
																		-text         => 'Maybe'                        ,
																		-background   => [255, 255, 255]                ,
																		-font         => $font10                        ,
																		-tabstop      => 1                              ,
																		-checked      => 0                              , );
	$winEvent->AddCheckbox(           -name         => 'chInvited'                    ,
																		-size         => [160, 20]                      ,
																		-pos          => [220,125]                      ,
																		-text         => 'Invited'                      ,
																		-background   => [255, 255, 255]                ,
																		-font         => $font10                        ,
																		-tabstop      => 1                              ,
																		-checked      => 0                              , );
	$winEvent->AddCheckbox(           -name         => 'chDeclined'                   ,
																		-size         => [160, 20]                      ,
																		-pos          => [385,125]                      ,
																		-text         => 'Declined'                     ,
																		-background   => [255, 255, 255]                ,
																		-font         => $font10                        ,
																		-tabstop      => 1                              ,
																		-checked      => 0                              , );
	$winEvent->AddButton(             -name         => 'btnEventDumpNow'							,
																		-size         => [150, 30]                      ,
																		-pos          => [245,155]                      ,
																		-text         => $STR{'DumpNow'}                ,
																		-font         => $font10                        ,
																		-disabled     => 1                              ,
																		-tabstop      => 1                              ,
																		-ok           => 1                              ,
																		-default      => 1                              , );
	$winEvent->AddButton(             -name         => 'btnEventAddQueue'							,
																		-size         => [150, 30]                      ,
																		-pos          => [400,155]                      ,
																		-text         => $STR{'AddToQueue'}.' >>'				,
																		-font         => $font10                        ,
																		-disabled     => 1                              ,
																		-tabstop      => 1                              , );
	# Load default values
	if (exists($CONFIG{'EVENT_REPORT_FORMAT'})) { $winEvent->cbEventFormat->SetCurSel($CONFIG{'EVENT_REPORT_FORMAT'}); }
	else 																				{ $winEvent->cbEventFormat->SetCurSel(0); 														 } # Default is XLSX
	$winEvent->tfDirSaveEvent->Text($CONFIG{'DIR_SAVE_EVENT'})
	if exists($CONFIG{'DIR_SAVE_EVENT'}) and -d $CONFIG{'DIR_SAVE_EVENT'};
  if (exists($CONFIG{'EVENT_PROFILE_ICONS'})) { $winEvent->chEventProfileIcons->Checked($CONFIG{'EVENT_PROFILE_ICONS'});				}
  else                                        { $winEvent->chEventProfileIcons->Checked(1); $CONFIG{'EVENT_PROFILE_ICONS'} = 1; } # Default is checked

}  #--- End createWinEvent

#--------------------------#
sub cbEventFormat_Change
#--------------------------#
{
  my $selFormat = $winEvent->cbEventFormat->GetCurSel();
	$CONFIG{'EVENT_REPORT_FORMAT'} = $selFormat;
	&saveConfig(\%CONFIG, $CONFIG_FILE);
	return(1);

}  #--- End cbEventFormat_Change

#--------------------------#
sub tfDirSaveEvent_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winEvent->tfDirSaveEvent->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winConfig->chRememberSaveDir->Checked()) {
    $CONFIG{'DIR_SAVE_EVENT'} = $saveDir;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }
  &isDumpEventMembersReady(\$winEvent);

}  #--- End tfDirSaveEvent_Change

#--------------------------#
sub btnDirSaveEvent_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winEvent->tfDirSaveEvent->Text();
  my $dir;
  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) { while ($lastDir =~ /[^\\]$/) { chop($lastDir); } }
    $dir = Win32::GUI::BrowseForFolder(-owner => $winEvent, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1, -directory => $lastDir);
  } else {
    $dir = Win32::GUI::BrowseForFolder(-owner => $winEvent, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1);
  }
  # Selected folder
  if ($dir and -d $dir) {
    chop($dir) if $dir =~ /\\$/;
    $winEvent->tfDirSaveEvent->Text($dir);
  }
	return(1);
  
}  #--- End btnDirSaveEvent_Click

#--------------------------#
sub btnBrowseDirSaveEvent_Click { &exploreDir($winEvent->tfDirSaveEvent->Text()); }
#--------------------------#

#--------------------------#
sub btnEventRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else {
    # Reset window
    $winEvent->tfEventFilename->Text('');
    $winEvent->tfDataURL->Text('');
    $winEvent->chGoing->Text('Going');
    $winEvent->chMaybe->Text('Maybe');
    $winEvent->chInvited->Text('Invited');
    $winEvent->chDeclined->Text('Declined');
    $winEvent->chGoing->Checked(1);
    $winEvent->chMaybe->Checked(1);
    $winEvent->chInvited->Checked(1);
    $winEvent->chDeclined->Checked(1);
    # Start the thread
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winEvent, 4, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
  }
  
}  #--- End btnEventRefresh_Click

#--------------------------#
sub tfEventFilename_Change	{ &isDumpEventMembersReady(\$winEvent); }
sub chGoing_Click 					{ &isDumpEventMembersReady(\$winEvent); }
sub chMaybe_Click 					{ &isDumpEventMembersReady(\$winEvent); }
sub chInvited_Click 				{ &isDumpEventMembersReady(\$winEvent); }
sub chDeclined_Click 				{ &isDumpEventMembersReady(\$winEvent); }
#--------------------------#

#--------------------------#
sub chEventProfileIcons_Click
#--------------------------#
{
  # Save the choice
  if ($winEvent->chEventProfileIcons->Checked()) {
    $CONFIG{'EVENT_PROFILE_ICONS'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  # Don't save
  } else {
    $CONFIG{'EVENT_PROFILE_ICONS'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chEventProfileIcons_Click

#--------------------------#
sub btnEventDumpNow_Click
#--------------------------#
{
	&dumpEventMembers(1, \$winEvent, \$winQueue, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnEventDumpNow_Click

#--------------------------#
sub btnEventAddQueue_Click
#--------------------------#
{
	&dumpEventMembers(0, \$winEvent, \$winQueue, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnEventAddQueue_Click

#--------------------------#
sub winEvent_Terminate
#--------------------------#
{
	&rememberPosWin(\$winEvent, 'WINEVENT', \$winConfig, \%CONFIG, $CONFIG_FILE) if $winConfig->chRememberPos->Checked();
	$winEvent->Hide();
  return(0);

}  #--- End winEvent_Terminate

#--------------------------#
sub createWinContrib
#--------------------------#
{
	# Dump Contributors window
	$winContrib = Win32::GUI::Window->new(-name        => 'winContrib'        ,
																				-text        => "$STR{'Dump'} $STR{'contributors'}",
																				-pos         => [$winPosX, $winPosY],
																				-size        => [800,380]           ,
																				-minsize		 => [800,380]           ,
																				-background  => [255, 255, 255]     ,
																				-hasmaximize => 1                   ,
																				-hasminimize => 1                   ,
																				-helpbutton  => 0                   ,
																				-resizable   => 1                   ,
																				-dialogui    => 1                   , );
	$winContrib->SetIcon($winICO);
	$winContrib->AddLabel(            -name       	=> 'lblLogo'                      ,
																		-size       	=> [128,128]                      ,
																		-pos        	=> [  0,  5]                      ,
																		-bitmap     	=> $contribBmp                    ,
																		-background 	=> [255, 255, 255]                , );
	$winContrib->AddLabel(            -name       	=> 'lblContribName'               ,
																		-size       	=> [ 70, 22]                      ,
																		-pos        	=> [140, 18]                      ,
																		-text       	=> $STR{'Filename'}.':'           ,
																		-font       	=> $font10                        ,
																		-background 	=> [255, 255, 255]                , );
	$winContrib->AddTextfield(        -name       	=> 'tfContribName'                ,
																		-size       	=> [512, 22]                      ,
																		-pos        	=> [220, 15]                      ,
																		-tabstop    	=> 1                              , );
	$winContrib->AddCombobox(         -name       	=> 'cbContribFormat'              ,
																		-size       	=> [ 55, 22]                      ,
																		-pos        	=> [735, 15]                      ,
																		-dropdownlist => 1                            	,
																		-vscroll    	=> 1                              ,
																		-tabstop    	=> 1                              , );
	$winContrib->cbContribFormat->Add('XLSX', 'HTML', 'TXT');
	$winContrib->AddLabel(            -name       	=> 'lblDirSaveContrib'            ,
																		-size       	=> [ 70, 22]                      ,
																		-pos        	=> [140, 48]                      ,
																		-text       	=> $STR{'Directory'}.':'          ,
																		-font       	=> $font10                        ,
																		-background 	=> [255, 255, 255]                , );
	$winContrib->AddTextfield(        -name       	=> 'tfDirSaveContrib'             ,
																		-size       	=> [522, 22]                      ,
																		-pos        	=> [220, 45]                      ,
																		-tabstop    	=> 1                              , );
	$winContrib->AddButton(           -name       	=> 'btnDirSaveContrib'            ,
																		-size       	=> [ 22, 22]                      ,
																		-pos        	=> [744, 45]                      ,
																		-bitmap     	=> $browseBmp                     ,
																		-tip          => $STR{'SelectDir'}							,
																		-tabstop    	=> 1                              , );
	$winContrib->AddButton(           -name       	=> 'btnBrowseDirSaveContrib'      ,
																		-size       	=> [ 22, 22]                      ,
																		-pos        	=> [768, 45]                      ,
																		-bitmap     	=> $explorerBmp                   ,
																		-tip        	=> $STR{'browseFolder'}           ,
																		-tabstop    	=> 1                              , );
	$winContrib->AddLabel(            -name         => 'lblContribOpt'                ,
																		-size         => [ 75, 22]                      ,
																		-pos          => [140, 75]                      ,
																		-text         => $STR{'Options'}.':'         		,
																		-font         => $font10                        ,
																		-background   => [255, 255, 255]                , );
	$winContrib->AddCheckbox(         -name       	=> 'chContribProfileIcons'        ,
																		-size       	=> [170, 22]                      ,
																		-pos        	=> [220, 74]                      ,
																		-text       	=> "$STR{'Include'} $STR{'profileIcons'}",
																		-background 	=> [255, 255, 255]                ,
																		-font       	=> $font10                        ,
																		-checked    	=> 0                              , );
	$winContrib->AddCheckbox(         -name       	=> 'chContribAutoScroll'    			,
																		-size       	=> [200, 22]                      ,
																		-pos        	=> [395, 74]                      ,
																		-text       	=> $STR{'ScrollExpand'}       		,
																		-background 	=> [255, 255, 255]                ,
																		-font       	=> $font10                        ,
																		-checked    	=> 0                              , );
	$winContrib->AddLabel(						-name       	=> 'lblInProgress'        				,
																		-size       	=> [180, 22]              				,
																		-pos        	=> [676, 76]              				,
																		-font       	=> $font10                				,
																		-foreground 	=> [0, 153, 0]            				,
																		-background 	=> [255, 255, 255]        				,
																		-align				=> 'right'												,
																		-visible    	=> 1                      				, );
	$winContrib->AddButton(           -name         => 'btnContribRefresh'            ,
																		-size         => [ 22, 22]                      ,
																		-pos          => [768, 73]                      ,
																		-bitmap       => $refresh16                     ,
																		-tip          => $STR{'ReloadPage'}          		,
																		-tabstop      => 1                              , );
	$winContrib->AddLabel(            -name         => 'lblContribCat'                ,
																		-size         => [ 75, 22]                      ,
																		-pos          => [140,102]                      ,
																		-text         => $STR{'Types'}.':'    					,
																		-font         => $font10                        ,
																		-background   => [255, 255, 255]                , );
	$winContrib->AddCheckbox(         -name       	=> 'chContribComments'            ,
																		-size       	=> [105, 20]                      ,
																		-pos        	=> [220,101]                      ,
																		-text       	=> $STR{'Comments'}      					,
																		-background 	=> [255, 255, 255]                ,
																		-font       	=> $font10                        ,
																		-tabstop    	=> 1                              ,
																		-checked    	=> 0                              , );
	$winContrib->AddCheckbox(         -name       	=> 'chContribLikes'               ,
																		-size       	=> [ 80, 20]                      ,
																		-pos        	=> [330,101]                      ,
																		-text       	=> $STR{'Likes'}         					,
																		-background 	=> [255, 255, 255]                ,
																		-font       	=> $font10                        ,
																		-tabstop    	=> 1                              ,
																		-checked    	=> 0                              , );
	$winContrib->AddCheckbox(         -name       	=> 'chContribVPosts'              ,
																		-size       	=> [140, 20]                      ,
																		-pos        	=> [425,101]                      ,
																		-text       	=> $STR{'VPosts'}        					,
																		-background 	=> [255, 255, 255]                ,
																		-font       	=> $font10                        ,
																		-tabstop    	=> 1                              ,
																		-checked    	=> 0                              , );
	$winContrib->AddCheckbox(         -name       	=> 'chContribEventPosts'          ,
																		-size       	=> [140, 20]                      ,
																		-pos        	=> [570,101]                      ,
																		-text       	=> $STR{'EventPosts'}        			,
																		-background 	=> [255, 255, 255]                ,
																		-font       	=> $font10                        ,
																		-tabstop    	=> 1                              ,
																		-checked    	=> 0                              , );
	$winContrib->AddLabel(            -name         => 'lblContribPages'							,
																		-size         => [ 75, 22]                      ,
																		-pos          => [140,129]                      ,
																		-text         => $STR{'Pages'}.':'    					,
																		-font         => $font10                        ,
																		-background   => [255, 255, 255]                , );
	$winContrib->AddCheckbox(         -name       	=> 'chContribPageCurr'            ,
																		-size       	=> [120, 20]                      ,
																		-pos        	=> [220,127]                      ,
																		-text       	=> $STR{'CurrPage'}      					,
																		-background 	=> [255, 255, 255]                ,
																		-font       	=> $font10                        ,
																		-tabstop    	=> 1                              ,
																		-checked    	=> 1                              , );
	$winContrib->AddTextfield(        -name       	=> 'tfStartURL'										,
																		-size       	=> [527, 22]                      ,
																		-pos        	=> [220,127]                      ,
																		-font         => $font10                        ,
																		-visible    	=> 0                              , );
	$winContrib->AddTextfield(        -name       	=> 'tfContribID'                	,
																		-size       	=> [332, 22]                      ,
																		-pos        	=> [220,127]                      ,
																		-visible    	=> 0                              , );
	$winContrib->AddCheckbox(         -name       	=> 'chContribAlbums'          		,
																		-size       	=> [300, 20]                      ,
																		-pos        	=> [345,127]                      ,
																		-text       	=> $STR{'PicPages'}								,
																		-background 	=> [255, 255, 255]                ,
																		-font       	=> $font10                        ,
																		-disabled			=> 1															,
																		-tabstop    	=> 1                              ,
																		-checked    	=> 0                              , );
	$winContrib->AddButton(           -name         => 'btnContribAlbumsRefresh'			,
																		-size         => [ 22, 22]                      ,
																		-pos          => [768,124]                      ,
																		-bitmap       => $refresh16                     ,
																		-tip          => $STR{'ReloadPage'}          		,
																		-disabled			=> 1															,
																		-tabstop      => 1                              , );
	$winContrib->AddGrid (            -name         => 'GridContribAlbums'						,
																		-pos          => [140,155]                      ,
																		-size         => [650,145]                      ,
																		-fixedrows    => 1                              ,
																		-fixedcolumns => 0                              ,
																		-editable     => 0                              ,
																		-disabled			=> 1															,
																		-tabstop			=> 1															, );
	$winContrib->GridContribAlbums->SetListMode(1);
	$winContrib->GridContribAlbums->SetHeaderSort();
	$winContrib->AddButton(           -name       	=> 'btnContribDumpNow'            ,
																		-size       	=> [150, 30]                      ,
																		-pos        	=> [245,310]                      ,
																		-text       	=> $STR{'DumpNow'}                ,
																		-font       	=> $font10                        ,
																		-disabled   	=> 1                              ,
																		-tabstop    	=> 1                              ,
																		-ok         	=> 1                              ,
																		-default    	=> 1                              , );
	$winContrib->AddButton(           -name         => 'btnContribAddQueue'						,
																		-size         => [150, 30]                      ,
																		-pos          => [400,310]                      ,
																		-text         => $STR{'AddToQueue'}.' >>'				,
																		-font         => $font10                        ,
																		-disabled     => 1                              ,
																		-tabstop      => 1                              , );
	# Header Dump albums grid
	$winContrib->GridContribAlbums->SetRows(1);
	$winContrib->GridContribAlbums->SetColumns(4); # 1: checkbox, 2: Album name, 3e: Album url, 4e: Album id (hidden)
	$winContrib->GridContribAlbums->SetCellText(0, 0, ''        );
	$winContrib->GridContribAlbums->SetCellType(0, 0, GVIT_CHECK);
	$winContrib->GridContribAlbums->SetCellCheck(0, 0, 1);
	$winContrib->GridContribAlbums->SetCellText(0, 1, $STR{'albumNames'});
	$winContrib->GridContribAlbums->SetCellText(0, 3, $STR{'albumURLs'});
	$winContrib->GridContribAlbums->SetColumnWidth(0, 25);
	$winContrib->GridContribAlbums->SetColumnWidth(1, 80);
	$winContrib->GridContribAlbums->SetColumnWidth(2, 0);
	$winContrib->GridContribAlbums->ExpandLastColumn();
	# Load default values
	if (exists($CONFIG{'CONTRIB_REPORT_FORMAT'})) { $winContrib->cbContribFormat->SetCurSel($CONFIG{'CONTRIB_REPORT_FORMAT'}); }
	else 																				 	{ $winContrib->cbContribFormat->SetCurSel(0); 															 } # Default is XLSX
	$winContrib->tfDirSaveContrib->Text($CONFIG{'DIR_SAVE_CONTRIB'})
	if exists($CONFIG{'DIR_SAVE_CONTRIB'}) and -d $CONFIG{'DIR_SAVE_CONTRIB'};
  if (exists($CONFIG{'CONTRIB_PROFILE_ICONS'})) {
		$winContrib->chContribProfileIcons->Checked($CONFIG{'CONTRIB_PROFILE_ICONS'});
	} else { $winContrib->chContribProfileIcons->Checked(1); $CONFIG{'CONTRIB_PROFILE_ICONS'} = 1; } # Default is checked

}  #--- End createWinContrib

#--------------------------#
sub winContrib_Resize
#--------------------------#
{
	$winContrib->tfContribName->Width($winContrib->ScaleWidth()-283);
	$winContrib->cbContribFormat->Left($winContrib->ScaleWidth()-60);
	$winContrib->tfDirSaveContrib->Width($winContrib->ScaleWidth()-272);
	$winContrib->btnDirSaveContrib->Left($winContrib->ScaleWidth()-50);
	$winContrib->btnBrowseDirSaveContrib->Left($winContrib->ScaleWidth()-27);
	$winContrib->lblInProgress->Left($winContrib->ScaleWidth()-213);
	$winContrib->btnContribRefresh->Left($winContrib->ScaleWidth()-27);
	$winContrib->btnContribAlbumsRefresh->Left($winContrib->ScaleWidth()-27);
	$winContrib->GridContribAlbums->Width($winContrib->ScaleWidth()-144);
	$winContrib->GridContribAlbums->Height($winContrib->ScaleHeight()-195);
	$winContrib->GridContribAlbums->AutoSize();
	$winContrib->GridContribAlbums->ExpandLastColumn();
	$winContrib->btnContribDumpNow->Left(($winContrib->ScaleWidth()/2)-155);
	$winContrib->btnContribDumpNow->Top($winContrib->ScaleHeight()-35);
	$winContrib->btnContribAddQueue->Left(($winContrib->ScaleWidth()/2)+5);
	$winContrib->btnContribAddQueue->Top($winContrib->ScaleHeight()-35);	

}  #--- End winContrib_Resize

#--------------------------#
sub cbContribFormat_Change
#--------------------------#
{
  my $selFormat = $winContrib->cbContribFormat->GetCurSel();
	$CONFIG{'CONTRIB_REPORT_FORMAT'} = $selFormat;
	&saveConfig(\%CONFIG, $CONFIG_FILE);
	return(1);

}  #--- End cbContribFormat_Change

#--------------------------#
sub btnContribRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else {
    # Reset window
    $winContrib->tfContribName->Text('');
    $winContrib->tfContribID->Text('');
    $winContrib->tfStartURL->Text('');
    # Start the thread
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winContrib, 5, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
  }
  
}  #--- End btnContribRefresh_Click

#--------------------------#
sub tfContribName_Change { &isDumpContribReady(\$winContrib); }
#--------------------------#

#--------------------------#
sub tfDirSaveContrib_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winContrib->tfDirSaveContrib->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winConfig->chRememberSaveDir->Checked()) {
    $CONFIG{'DIR_SAVE_CONTRIB'} = $saveDir;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }
  &isDumpContribReady(\$winContrib);

}  #--- End tfDirSaveContrib_Change

#--------------------------#
sub btnDirSaveContrib_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winContrib->tfDirSaveContrib->Text();
  my $dir;
  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) { while ($lastDir =~ /[^\\]$/) { chop($lastDir); } }
    $dir = Win32::GUI::BrowseForFolder(-owner => $winContrib, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1, -directory => $lastDir);
  } else {
    $dir = Win32::GUI::BrowseForFolder(-owner => $winContrib, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1);
  }
  # Selected folder
  if ($dir and -d $dir) {
    chop($dir) if $dir =~ /\\$/;
    $winContrib->tfDirSaveContrib->Text($dir);
  }
	return(1);
  
}  #--- End btnDirSaveContrib_Click

#--------------------------#
sub btnBrowseDirSaveContrib_Click { &exploreDir($winContrib->tfDirSaveContrib->Text()); }
#--------------------------#

#--------------------------#
sub chContribProfileIcons_Click
#--------------------------#
{
  # Save the choice
  if ($winContrib->chContribProfileIcons->Checked()) {
    $CONFIG{'CONTRIB_PROFILE_ICONS'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  # Don't save
  } else {
    $CONFIG{'CONTRIB_PROFILE_ICONS'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chContribProfileIcons_Click

#--------------------------#
sub chContribComments_Click 	{ &isDumpContribReady(\$winContrib); }
sub chContribLikes_Click    	{ &isDumpContribReady(\$winContrib); }
sub chContribVPosts_Click			{ &isDumpContribReady(\$winContrib); }
sub chContribEventPosts_Click	{ &isDumpContribReady(\$winContrib); }
sub chContribPageCurr_Click		{ &isDumpContribReady(\$winContrib); }
#--------------------------#

#--------------------------#
sub chContribAlbums_Click
#--------------------------#
{
  if ($winContrib->chContribAlbums->Checked()) {
		$winContrib->GridContribAlbums->Enable();
		$winContrib->btnContribAlbumsRefresh->Enable();
		&btnContribAlbumsRefresh_Click();
		$winContrib->chContribAutoScroll->Checked(1);
	} else {
		$winContrib->GridContribAlbums->Disable();
		$winContrib->btnContribAlbumsRefresh->Disable();
	}
	&isDumpContribReady(\$winContrib);

}  #--- End chContribAlbums_Click

#--------------------------#
sub btnContribAlbumsRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else {
    $winContrib->GridContribAlbums->DeleteNonFixedRows();
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winContrib, 10, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
  }
  
}  #--- End btnContribAlbumsRefresh_Click

#--------------------------#
sub GridContribAlbums_Click
#--------------------------#
{
  # Local variables
  my ($row, $column) = @_;
  # Select
  if (!$column) {
    my $selStatus = $winContrib->GridContribAlbums->GetCellCheck($row, $column);
    if (!$row) {
      if (!$selStatus) { # Check all
				for (my $i = 0; $i < $winContrib->GridContribAlbums->GetRows(); $i++) { $winContrib->GridContribAlbums->SetCellCheck($i, 0, 1); }
			} else { # Uncheck all
				for (my $i = 0; $i < $winContrib->GridContribAlbums->GetRows(); $i++) { $winContrib->GridContribAlbums->SetCellCheck($i, 0, 0); }
			}
    } else {
      if (!$selStatus) { $winContrib->GridContribAlbums->SetCellCheck($row, $column, 1); } # Check
      else             { $winContrib->GridContribAlbums->SetCellCheck($row, $column, 0); } # Uncheck
    }
  }
	&isDumpContribReady(\$winContrib);
  return(1);

}  #--- End GridContribAlbums_Click

#--------------------------#
sub btnContribDumpNow_Click
#--------------------------#
{
	&dumpContrib(1, \$winContrib, \$winQueue, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnContribDumpNow_Click

#--------------------------#
sub btnContribAddQueue_Click
#--------------------------#
{
	&dumpContrib(0, \$winContrib, \$winQueue, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnContribAddQueue_Click

#--------------------------#
sub winContrib_Terminate
#--------------------------#
{
	&rememberPosWin(\$winContrib, 'WINCONTRIB', \$winConfig, \%CONFIG, $CONFIG_FILE) if $winConfig->chRememberPos->Checked();
	$winContrib->Hide();
  return(0);

}  #--- End winContrib_Terminate

#--------------------------#
sub createWinGroupMembers
#--------------------------#
{
	# Dump Group Members window
	$winGroupMembers = Win32::GUI::Window->new( -name        => 'winGroupMembers'       ,
																							-text        => "$STR{'Dump'} $STR{'groupMembers'}",
																							-pos         => [$winPosX, $winPosY]		,
																							-size        => [800,265]               ,
																							-background  => [255, 255, 255]         ,
																							-hasmaximize => 0                       ,
																							-hasminimize => 1                       ,
																							-helpbutton  => 0                       ,
																							-resizable   => 0                       ,
																							-dialogui    => 1                       , );
	$winGroupMembers->SetIcon($winICO);
	$winGroupMembers->AddLabel(         -name       => 'lblLogo'                      ,
																			-size       => [128,128]                      ,
																			-pos        => [  0,  5]                      ,
																			-bitmap     => $eventBmp               				,
																			-background => [255, 255, 255]                , );
	$winGroupMembers->AddLabel(         -name       => 'lblGroupMembersName'          ,
																			-size       => [ 75, 22]                      ,
																			-pos        => [140, 18]                      ,
																			-text       => $STR{'Filename'}.':'           ,
																			-font       => $font10                        ,
																			-background => [255, 255, 255]                , );
	$winGroupMembers->AddTextfield(			-name       => 'tfGroupMembersCurrURL'				,
																			-size       => [440, 22]                      ,
																			-pos        => [220, 15]                      ,
																			-visible    => 0                              , );
	$winGroupMembers->AddTextfield(     -name       => 'tfGroupMembersName'           ,
																			-size       => [512, 22]                      ,
																			-pos        => [220, 15]                      ,
																			-tabstop    => 1                              , );
	$winGroupMembers->AddTextfield(     -name       => 'tfGroupMembersType'           ,
																			-size       => [332, 22]                      ,
																			-pos        => [220, 15]                      ,
																			-visible    => 0                              , );
	$winGroupMembers->AddCombobox(      -name       => 'cbGroupMembersFormat'         ,
																			-size       => [ 55, 22]                      ,
																			-pos        => [735, 15]                      ,
																			-dropdownlist => 1                            ,
																			-vscroll    => 1                              ,
																			-tabstop    => 1                              , );
	$winGroupMembers->cbGroupMembersFormat->Add('XLSX', 'HTML', 'TXT', );
	$winGroupMembers->AddLabel(         -name       => 'lblDirSaveGroupMembers'       ,
																			-size       => [ 75, 22]                      ,
																			-pos        => [140, 48]                      ,
																			-text       => $STR{'Directory'}.':'          ,
																			-font       => $font10                        ,
																			-background => [255, 255, 255]                , );
	$winGroupMembers->AddTextfield(     -name       => 'tfDirSaveGroupMembers'        ,
																			-size       => [522, 22]                      ,
																			-pos        => [220, 45]                      ,
																			-tabstop    => 1                              , );
	$winGroupMembers->AddButton(        -name       => 'btnDirSaveGroupMembers'       ,
																			-size       => [ 22, 22]                      ,
																			-pos        => [744, 45]                      ,
																			-bitmap     => $browseBmp                     ,
																			-tip        => $STR{'SelectDir'}							,
																			-tabstop    => 1                              , );
	$winGroupMembers->AddButton(        -name       => 'btnBrowseDirSaveGroupMembers' ,
																			-size       => [ 22, 22]                      ,
																			-pos        => [768, 45]                      ,
																			-bitmap     => $explorerBmp                   ,
																			-tip        => $STR{'browseFolder'}           ,
																			-tabstop    => 1                              , );
	$winGroupMembers->AddLabel(         -name       => 'lblGroupMembersOpt'           ,
																			-size       => [ 75, 22]                      ,
																			-pos        => [140, 76]                      ,
																			-text       => $STR{'Options'}.':'         		,
																			-font       => $font10                        ,
																			-background => [255, 255, 255]                , );
	$winGroupMembers->AddCheckbox(      -name       => 'chGroupMembersProfileIcons'   ,
																			-size       => [170, 20]                      ,
																			-pos        => [220, 75]                      ,
																			-text       => "$STR{'Include'} $STR{'profileIcons'}",
																			-background => [255, 255, 255]                ,
																			-font       => $font10                        ,
																			-tabstop    => 1                              , );
	$winGroupMembers->AddLabel(         -name       => 'lblInProgress'                ,
																			-size       => [200, 22]                      ,
																			-pos        => [556, 77]                      ,
																			-font       => $font10                        ,
																			-foreground => [0, 153, 0]                    ,
																			-background => [255, 255, 255]                ,
																			-visible    => 1                              , );
	$winGroupMembers->AddButton(        -name       => 'btnGroupMembersRefresh'       ,
																			-size       => [ 22, 22]                      ,
																			-pos        => [768, 73]                      ,
																			-bitmap     => $refresh16                     ,
																			-tip        => $STR{'ReloadPage'}          		,
																			-tabstop    => 1                              , );
	$winGroupMembers->AddGrid (         -name         => 'GridGroupMembers'           ,
																			-pos          => [140,100]                    ,
																			-size         => [650, 95]                    ,
																			-fixedrows    => 1                            ,
																			-fixedcolumns => 0                            ,
																			-editable     => 0                            , );
	$winGroupMembers->GridGroupMembers->SetListMode(1);
	$winGroupMembers->GridGroupMembers->SetHeaderSort();
	$winGroupMembers->AddButton(				-name       	=> 'btnGroupMembersDumpNow'     ,
																			-size       	=> [150, 30]                    ,
																			-pos        	=> [245,200]                    ,
																			-text       	=> $STR{'DumpNow'}              ,
																			-font       	=> $font10                      ,
																			-disabled   	=> 1                            ,
																			-tabstop    	=> 1                            ,
																			-ok         	=> 1                            ,
																			-default    	=> 1                            , );
	$winGroupMembers->AddButton(				-name         => 'btnGroupMembersAddQueue'		,
																			-size         => [150, 30]                    ,
																			-pos          => [400,200]                    ,
																			-text         => $STR{'AddToQueue'}.' >>'			,
																			-font         => $font10                      ,
																			-disabled     => 1                            ,
																			-tabstop      => 1                            , );
	# Header Dump Group Members grid
	$winGroupMembers->GridGroupMembers->SetRows(1);
	$winGroupMembers->GridGroupMembers->SetColumns(3); # 1: checkbox, 2: Category name, 3e: Category url
	$winGroupMembers->GridGroupMembers->SetCellText(0, 0, ''        );
	$winGroupMembers->GridGroupMembers->SetCellType(0, 0, GVIT_CHECK);
	$winGroupMembers->GridGroupMembers->SetCellCheck(0, 0, 1);
	$winGroupMembers->GridGroupMembers->SetCellText(0, 1, $STR{'Category'});
	$winGroupMembers->GridGroupMembers->SetCellText(0, 2, $STR{'url'});
	$winGroupMembers->GridGroupMembers->SetColumnWidth(0, 25);
	$winGroupMembers->GridGroupMembers->SetColumnWidth(1, 80);
	$winGroupMembers->GridGroupMembers->ExpandLastColumn();
	# Load default values
	if (exists($CONFIG{'GROUP_MEMBERS_REPORT_FORMAT'})) {
		$winGroupMembers->cbGroupMembersFormat->SetCurSel($CONFIG{'GROUP_MEMBERS_REPORT_FORMAT'});
	}	else { $winGroupMembers->cbGroupMembersFormat->SetCurSel(0); } # Default is XLSX
  $winGroupMembers->tfDirSaveGroupMembers->Text($CONFIG{'DIR_SAVE_GROUP_MEMBERS'})
	if exists($CONFIG{'DIR_SAVE_GROUP_MEMBERS'}) and -d $CONFIG{'DIR_SAVE_GROUP_MEMBERS'};
  # Dump Group Members
	if (exists($CONFIG{'GROUP_MEMBERS_INCLUDE_ICONS'})) {
		$winGroupMembers->chGroupMembersProfileIcons->Checked($CONFIG{'GROUP_MEMBERS_INCLUDE_ICONS'});
	} else { $winGroupMembers->chGroupMembersProfileIcons->Checked(1); $CONFIG{'GROUP_MEMBERS_INCLUDE_ICONS'} = 1; } # Default is checked

}  #--- End createWinGroupMembers

#--------------------------#
sub cbGroupMembersFormat_Change
#--------------------------#
{
  my $selFormat = $winGroupMembers->cbGroupMembersFormat->GetCurSel();
	$CONFIG{'GROUP_MEMBERS_REPORT_FORMAT'} = $selFormat;
	&saveConfig(\%CONFIG, $CONFIG_FILE);
	return(1);

}  #--- End cbGroupMembersFormat_Change

#--------------------------#
sub btnGroupMembersRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else {
    $winGroupMembers->tfGroupMembersName->Text('');
		$winGroupMembers->GridGroupMembers->DeleteNonFixedRows();
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winGroupMembers, 6, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
  }
  
}  #--- End btnGroupMembersRefresh_Click

#--------------------------#
sub tfGroupMembersName_Change { &isDumpGroupMembersReady(\$winGroupMembers); }
#--------------------------#

#--------------------------#
sub tfDirSaveGroupMembers_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winGroupMembers->tfDirSaveGroupMembers->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winConfig->chRememberSaveDir->Checked()) {
    $CONFIG{'DIR_SAVE_GROUP_MEMBERS'} = $saveDir;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }
  &isDumpGroupMembersReady(\$winGroupMembers);

}  #--- End tfDirSaveGroupMembers_Change

#--------------------------#
sub btnDirSaveGroupMembers_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winGroupMembers->tfDirSaveGroupMembers->Text();
  my $dir;
  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) { while ($lastDir =~ /[^\\]$/) { chop($lastDir); } }
    $dir = Win32::GUI::BrowseForFolder(-owner => $winGroupMembers, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1, -directory => $lastDir);
  } else {
    $dir = Win32::GUI::BrowseForFolder(-owner => $winGroupMembers, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1);
  }
  # Selected folder
  if ($dir and -d $dir) {
    chop($dir) if $dir =~ /\\$/;
    $winGroupMembers->tfDirSaveGroupMembers->Text($dir);
  }
	return(1);
  
}  #--- End btnDirSaveGroupMembers_Click

#--------------------------#
sub btnBrowseDirSaveGroupMembers_Click { &exploreDir($winGroupMembers->tfDirSaveGroupMembers->Text()); }
#--------------------------#

#--------------------------#
sub chGroupMembersProfileIcons_Click
#--------------------------#
{
  # Save the choice
  if ($winGroupMembers->chGroupMembersProfileIcons->Checked()) {
    $CONFIG{'GROUP_MEMBERS_INCLUDE_ICONS'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  # Don't save
  } else {
    $CONFIG{'GROUP_MEMBERS_INCLUDE_ICONS'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chGroupMembersProfileIcons_Click

#--------------------------#
sub GridGroupMembers_Click
#--------------------------#
{
  # Local variables
  my ($row, $column) = @_;
  # Select
  if (!$column) {
    my $selStatus = $winGroupMembers->GridGroupMembers->GetCellCheck($row, $column);
    if (!$row) {
      # Check all
      if (!$selStatus) {
				for (my $i = 0; $i < $winGroupMembers->GridGroupMembers->GetRows(); $i++) { $winGroupMembers->GridGroupMembers->SetCellCheck($i, 0, 1); }
      # Uncheck all
			} else {
				for (my $i = 0; $i < $winGroupMembers->GridGroupMembers->GetRows(); $i++) { $winGroupMembers->GridGroupMembers->SetCellCheck($i, 0, 0); }
			}
    } else {
      # Check
      if (!$selStatus) { $winGroupMembers->GridGroupMembers->SetCellCheck($row, $column, 1); }
      # Uncheck
      else {
				$winGroupMembers->GridGroupMembers->SetCellCheck($row, $column, 0);
				$winGroupMembers->GridGroupMembers->SetCellCheck(0   , $column, 0);
			}
    }
  }
  return(1);

}  #--- End GridGroupMembers_Click

#--------------------------#
sub btnGroupMembersDumpNow_Click
#--------------------------#
{
	&dumpGroupMembers(1, \$winGroupMembers, \$winQueue, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnGroupMembersDumpNow_Click

#--------------------------#
sub btnGroupMembersAddQueue_Click
#--------------------------#
{
	&dumpGroupMembers(0, \$winGroupMembers, \$winQueue, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnGroupMembersAddQueue_Click

#--------------------------#
sub winGroupMembers_Terminate
#--------------------------#
{
	&rememberPosWin(\$winGroupMembers, 'WINGROUP_MEMBERS', \$winConfig, \%CONFIG, $CONFIG_FILE) if $winConfig->chRememberPos->Checked();
	$winGroupMembers->Hide();
  return(0);

}  #--- End winGroupMembers_Terminate

#--------------------------#
sub createWinChat
#--------------------------#
{
	# Dump Chat window
	$winChat = Win32::GUI::Window->new( -name        => 'winChat'           ,
																			-text        => "$STR{'Dump'} $STR{'Chat'}",
																			-pos         => [$winPosX, $winPosY],
																			-size        => [800,400]           ,
																			-minsize		 => [800,400]           ,
																			-background  => [255, 255, 255]     ,
																			-hasmaximize => 1                   ,
																			-hasminimize => 1                   ,
																			-helpbutton  => 0                   ,
																			-resizable   => 1                   ,
																			-dialogui    => 1                   , );
	$winChat->SetIcon($winICO);
	$winChat->AddLabel(               -name       	=> 'lblLogo'              ,
																		-size       	=> [128,128]              ,
																		-pos        	=> [  0,  5]              ,
																		-bitmap     	=> $chatBmp               ,
																		-background 	=> [255, 255, 255]        , );
	$winChat->AddLabel(               -name       	=> 'lblChatName'          ,
																		-size       	=> [ 70, 22]              ,
																		-pos        	=> [140, 18]              ,
																		-text       	=> $STR{'Filename'}.':'   ,
																		-font       	=> $font10                ,
																		-background 	=> [255, 255, 255]        , );
	$winChat->AddTextfield(           -name       	=> 'tfChatName'           ,
																		-size       	=> [332, 22]              ,
																		-pos        	=> [220, 15]              ,
																		-tabstop    	=> 1                      , );
	$winChat->AddTextfield(         	-name         => 'tfChatCurrURL'				,
																		-size         => [440, 22]							,
																		-pos          => [220, 15]							,
																		-visible      => 0											, );
	$winChat->AddCombobox(						-name       	=> 'cbChatFormat'         ,
																		-size       	=> [ 55, 22]              ,
																		-pos        	=> [555, 15]              ,
																		-dropdownlist => 1                      ,
																		-vscroll    	=> 1                      ,
																		-tabstop    	=> 1                      , );
	$winChat->cbChatFormat->Add('XLSX', 'HTML', 'TXT');
	$winChat->cbChatFormat->SetCurSel(1);
	$winChat->AddLabel(               -name       	=> 'lblDirSaveChat'       ,
																		-size       	=> [ 70, 22]              ,
																		-pos        	=> [140, 48]              ,
																		-text       	=> $STR{'Directory'}.':'  ,
																		-font       	=> $font10                ,
																		-background 	=> [255, 255, 255]        , );
	$winChat->AddTextfield(           -name       	=> 'tfDirSaveChat'        ,
																		-size       	=> [342, 22]              ,
																		-pos        	=> [220, 45]              ,
																		-tabstop    	=> 1                      , );
	$winChat->AddButton(              -name       	=> 'btnDirSaveChat'       ,
																		-size       	=> [ 22, 22]              ,
																		-pos        	=> [564, 45]              ,
																		-bitmap     	=> $browseBmp             ,
																		-tip          => $STR{'SelectDir'}			,
																		-tabstop    	=> 1                      , );
	$winChat->AddButton(              -name       	=> 'btnBrowseDirSaveChat' ,
																		-size       	=> [ 22, 22]              ,
																		-pos        	=> [588, 45]              ,
																		-bitmap     	=> $explorerBmp           ,
																		-tip        	=> $STR{'browseFolder'}   ,
																		-tabstop    	=> 1                      , );
	$winChat->AddLabel(								-name       	=> 'lblChatOpt'       		,
																		-size       	=> [ 75, 22]              ,
																		-pos        	=> [140, 72]              ,
																		-text       	=> $STR{'Options'}.':' 		,
																		-font       	=> $font10                ,
																		-background 	=> [255, 255, 255]        , );
	$winChat->AddCheckbox(        		-name       	=> 'chChatAutoScroll' 		,
																		-size       	=> [220, 22]              ,
																		-pos        	=> [220, 70]              ,
																		-text       	=> $STR{'AutoScroll'}			,
																		-background 	=> [255, 255, 255]        ,
																		-font       	=> $font10                ,
																		-checked    	=> 1                      , );
	$winChat->AddLabel(								-name       	=> 'lblChatInc'           ,
																		-size       	=> [ 75, 22]              ,
																		-pos        	=> [140, 96]              ,
																		-text       	=> $STR{'Include'}.':' 		,
																		-font       	=> $font10                ,
																		-background 	=> [255, 255, 255]        , );
	$winChat->AddCheckbox(            -name       	=> 'chDownloadImg'        ,
																		-size       	=> [ 95, 20]              ,
																		-pos        	=> [220, 95]              ,
																		-text       	=> $STR{'Images'}  				,
																		-background 	=> [255, 255, 255]        ,
																		-font       	=> $font10                ,
																		-tabstop    	=> 1                      ,
																		-checked    	=> 0                      , );
	$winChat->AddCheckbox(            -name       	=> 'chDownloadPics'       ,
																		-size       	=> [120, 20]              ,
																		-pos        	=> [320, 95]              ,
																		-text       	=> $STR{'Pictures'} 			,
																		-background 	=> [255, 255, 255]        ,
																		-font       	=> $font10                ,
																		-tabstop    	=> 1                      , );
	$winChat->AddCheckbox(            -name       	=> 'chDownloadAD'         ,
																		-size       	=> [170, 20]              ,
																		-pos        	=> [445, 95]              ,
																		-text       	=> $STR{'AttachedDoc'}   	,
																		-background 	=> [255, 255, 255]        ,
																		-font       	=> $font10                ,
																		-tabstop    	=> 1                      , );
	$winChat->AddCheckbox(            -name       	=> 'chDownloadVid'        ,
																		-size       	=> [ 95, 20]              ,
																		-pos        	=> [220,120]              ,
																		-text       	=> $STR{'Videos'}					,
																		-background 	=> [255, 255, 255]        ,
																		-font       	=> $font10                ,
																		-tabstop    	=> 1                      , );
	$winChat->AddCheckbox(            -name       	=> 'chDownloadVM'       	,
																		-size       	=> [150, 20]              ,
																		-pos        	=> [320,120]              ,
																		-text       	=> $STR{'vocalMsg'}  			,
																		-background 	=> [255, 255, 255]        ,
																		-font       	=> $font10                ,
																		-tabstop    	=> 1                      , );
	$winChat->AddLabel(               -name       	=> 'lblChatDates'         ,
																		-size       	=> [ 75, 22]              ,
																		-pos        	=> [140,148]              ,
																		-text       	=> $STR{'Dates'}.':'      ,
																		-font       	=> $font10                ,
																		-background 	=> [255, 255, 255]        , );
	$winChat->AddRadioButton(         -name       	=> 'rbChatDatesAll'       ,
																		-size       	=> [ 95, 22]              ,
																		-pos        	=> [220,145]              ,
																		-background 	=> [255, 255, 255]        ,
																		-text       	=> $STR{'All'} 						,
																		-font       	=> $font10                ,
																		-tabstop    	=> 1                      ,
																		-checked    	=> 1                      ,
																		-group      	=> 1                      , );
	$winChat->AddRadioButton(         -name       	=> 'rbChatDatesRange'     ,
																		-size       	=> [ 60, 22]              ,
																		-pos        	=> [320,145]              ,
																		-background 	=> [255, 255, 255]        ,
																		-text       	=> $STR{'Range'}.':'			,
																		-font       	=> $font10                ,
																		-tabstop    	=> 1                      , );
	$winChat->AddLabel(               -name       	=> 'lblChatDatesRangeS'		,
																		-size       	=> [ 50, 22]              ,
																		-pos        	=> [405,148]              ,
																		-text       	=> $STR{'Start'}.':'      ,
																		-align      	=> 'right'                ,
																		-font       	=> $font10                ,
																		-background 	=> [255, 255, 255]        , );
	$winChat->AddDateTime(            -name       	=> 'dtChatDatesRangeS'		,
																		-size       	=> [ 90, 22]              ,
																		-pos        	=> [460,145]              ,
																		-font       	=> $font10                ,
																		-background 	=> [255, 255, 255]        ,
																		-format     	=> 'shortdate'            ,
																		-tabstop    	=> 1                      ,
																		-disabled			=> 1											, );
	$winChat->AddLabel(               -name       	=> 'lblChatDatesRangeE'   ,
																		-size       	=> [ 50, 22]              ,
																		-pos        	=> [555,148]              ,
																		-text       	=> $STR{'End'}.':'        ,
																		-align      	=> 'right'                ,
																		-font       	=> $font10                ,
																		-background 	=> [255, 255, 255]        , );
	$winChat->AddDateTime(            -name       	=> 'dtChatDatesRangeE'		,
																		-size       	=> [ 90, 22]              ,
																		-pos        	=> [610,145]              ,
																		-font       	=> $font10                ,
																		-background 	=> [255, 255, 255]        ,
																		-format     	=> 'shortdate'            ,
																		-tabstop    	=> 1                      ,
																		-disabled			=> 1											, );
	$winChat->AddLabel(               -name       	=> 'lblChatDump'         	,
																		-size       	=> [ 75, 22]              ,
																		-pos        	=> [140,173]              ,
																		-text       	=> $STR{'Dump'}.':'      	,
																		-font       	=> $font10                ,
																		-background 	=> [255, 255, 255]        , );
	$winChat->AddRadioButton(         -name       	=> 'rbChatCurrent'       	,
																		-size       	=> [150, 22]             	,
																		-pos        	=> [220,170]              ,
																		-background 	=> [255, 255, 255]        ,
																		-text       	=> $STR{'CurrChat'}				,
																		-font       	=> $font10                ,
																		-tabstop    	=> 1                      ,
																		-checked    	=> 1                      ,
																		-group      	=> 1                      , );
	$winChat->AddRadioButton(         -name       	=> 'rbChatList'     			,
																		-size       	=> [120, 22]              ,
																		-pos        	=> [375,170]              ,
																		-background 	=> [255, 255, 255]        ,
																		-text       	=> $STR{'SelectChat'}.':'	,
																		-font       	=> $font10                ,
																		-tabstop    	=> 1                      , );
	$winChat->AddLabel(             	-name         => 'lblInProgress'        ,
																		-size         => [180, 22]              ,
																		-pos          => [556,173]              ,
																		-font         => $font10                ,
																		-align        => 'right'								,
																		-foreground   => [0, 153, 0]            ,
																		-background   => [255, 255, 255]        ,
																		-visible      => 1                      , );
	$winChat->AddButton(              -name       	=> 'btnChatRefresh'       ,
																		-size       	=> [ 22, 22]              ,
																		-pos        	=> [758,170]              ,
																		-bitmap     	=> $refresh16             ,
																		-tip        	=> $STR{'ReloadPage'}  		,
																		-tabstop    	=> 1                      , );
	$winChat->AddGrid (             	-name         => 'GridChats'						,
																		-pos          => [140,195]              ,
																		-size         => [630,180]              ,
																		-fixedrows    => 1                      ,
																		-fixedcolumns => 0                      ,
																		-editable     => 0                      ,
																		-disabled			=> 1											,
																		-tabstop			=> 1											, );
	$winChat->GridChats->SetListMode(1);
	$winChat->GridChats->SetHeaderSort();
	$winChat->AddButton(							-name       	=> 'btnChatDumpNow'				,
																		-size       	=> [150, 30]              ,
																		-pos        	=> [245,165]              ,
																		-text       	=> $STR{'DumpNow'}        ,
																		-font       	=> $font10                ,
																		-disabled   	=> 1                      ,
																		-ok         	=> 1                      ,
																		-default    	=> 1                      ,
																		-tabstop			=> 1											, );
	$winChat->AddButton(							-name         => 'btnChatAddQueue'			,
																		-size         => [150, 30]              ,
																		-pos          => [400,165]              ,
																		-text         => $STR{'AddToQueue'}.' >>',
																		-font         => $font10                ,
																		-disabled     => 1                      ,
																		-tabstop      => 1                      , );
	# Header Select Chats grid
	$winChat->GridChats->SetRows(1);
	$winChat->GridChats->SetColumns(4); # 1: checkbox, 2: Name, 3: filename, 4: chat URL
	$winChat->GridChats->SetCellText(0, 0, ''        );
	$winChat->GridChats->SetCellType(0, 0, GVIT_CHECK);
	$winChat->GridChats->SetCellCheck(0, 0, 1);
	$winChat->GridChats->SetCellText(0, 1, $STR{'Name'});
	$winChat->GridChats->SetCellText(0, 2, $STR{'Filename'});
	$winChat->GridChats->SetCellText(0, 3, $STR{'url'});
	$winChat->GridChats->SetColumnWidth(0, 25);
	$winChat->GridChats->SetColumnWidth(1, 80);
	$winChat->GridChats->SetColumnWidth(2,120);
	$winChat->GridChats->ExpandLastColumn();
	# Load default values
	if (exists($CONFIG{'CHAT_REPORT_FORMAT'})) { $winChat->cbChatFormat->SetCurSel($CONFIG{'CHAT_REPORT_FORMAT'}); }
	else 																			 { $winChat->cbChatFormat->SetCurSel(1); 														 } # Default is HTML
	$winChat->tfDirSaveChat->Text($CONFIG{'DIR_SAVE_CHAT'})
	if exists($CONFIG{'DIR_SAVE_CHAT'}) and -d $CONFIG{'DIR_SAVE_CHAT'};

}  #--- End createWinChat

#--------------------------#
sub winChat_Resize
#--------------------------#
{
	$winChat->tfChatName->Width($winChat->ScaleWidth()-283);
	$winChat->cbChatFormat->Left($winChat->ScaleWidth()-60);
	$winChat->tfDirSaveChat->Width($winChat->ScaleWidth()-272);
	$winChat->btnDirSaveChat->Left($winChat->ScaleWidth()-50);
	$winChat->btnBrowseDirSaveChat->Left($winChat->ScaleWidth()-27);
	$winChat->lblInProgress->Left($winChat->ScaleWidth()-233);
	$winChat->btnChatRefresh->Left($winChat->ScaleWidth()-27);
	$winChat->GridChats->Width($winChat->ScaleWidth()-144);
	$winChat->GridChats->Height($winChat->ScaleHeight()-235);
	$winChat->GridChats->AutoSize();
	$winChat->GridChats->ExpandLastColumn();
	$winChat->btnChatDumpNow->Left(($winChat->ScaleWidth()/2)-155);
	$winChat->btnChatDumpNow->Top($winChat->ScaleHeight()-35);
	$winChat->btnChatAddQueue->Left(($winChat->ScaleWidth()/2)+5);
	$winChat->btnChatAddQueue->Top($winChat->ScaleHeight()-35);	

}  #--- End winChat_Resize

#--------------------------#
sub cbChatFormat_Change
#--------------------------#
{
  my $selFormat = $winChat->cbChatFormat->GetCurSel();
	$CONFIG{'CHAT_REPORT_FORMAT'} = $selFormat;
	&saveConfig(\%CONFIG, $CONFIG_FILE);
	return(1);

}  #--- End cbChatFormat_Change
	
#--------------------------#
sub btnChatRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else { # Start the thread
		if ($winChat->rbChatCurrent->Checked()) {
			$winChat->tfChatName->Text('');
			$THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winChat, 7, $USERDIR, $DEBUG_FILE,
														 \%CONFIG, \$win, \%STR);
		} else {
			$winChat->GridChats->DeleteNonFixedRows();
			$THR = threads->create(\&getListChats, \$THR, \$ARROW, \$HOURGLASS, \$winChat, \$winConfig, \%CONFIG,
														 $CONFIG_FILE, $PROGDIR, $USERDIR, $DEBUG_FILE, \$win, \%STR);
		}
  }
  
}  #--- End btnChatRefresh_Click

#--------------------------#
sub tfChatName_Change { &isDumpChatReady(\$winChat); }
#--------------------------#

#--------------------------#
sub tfDirSaveChat_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winChat->tfDirSaveChat->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winConfig->chRememberSaveDir->Checked()) {
    $CONFIG{'DIR_SAVE_CHAT'} = $saveDir;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }
  &isDumpChatReady(\$winChat);

}  #--- End tfDirSaveChat_Change

#--------------------------#
sub btnDirSaveChat_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winChat->tfDirSaveChat->Text();
  my $dir;
  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) { while ($lastDir =~ /[^\\]$/) { chop($lastDir); } }
    $dir = Win32::GUI::BrowseForFolder(-owner => $winChat, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1, -directory => $lastDir);
  } else {
    $dir = Win32::GUI::BrowseForFolder(-owner => $winChat, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1);
  }
  # Selected folder
  if ($dir and -d $dir) {
    chop($dir) if $dir =~ /\\$/;
    $winChat->tfDirSaveChat->Text($dir);
  }
	return(1);
  
}  #--- End btnDirSaveChat_Click

#--------------------------#
sub btnBrowseDirSaveChat_Click { &exploreDir($winChat->tfDirSaveChat->Text()); }
#--------------------------#

#--------------------------#
sub rbChatDatesAll_Click
#--------------------------#
{
  $winChat->dtChatDatesRangeS->Disable();
  $winChat->dtChatDatesRangeE->Disable();

}  #--- End rbChatDatesAll_Click

#--------------------------#
sub rbChatDatesRange_Click
#--------------------------#
{
  $winChat->dtChatDatesRangeS->Enable();
  $winChat->dtChatDatesRangeE->Enable();

}  #--- End rbChatDatesRange_Click

#--------------------------#
sub dtChatDatesRangeS_Change
#--------------------------#
{
  $winChat->rbChatDatesAll->Checked(0);
  $winChat->rbChatDatesRange->Checked(1);

}  #--- End dtChatDatesRangeS_Change

#--------------------------#
sub dtChatDatesRangeE_Change
#--------------------------#
{
  $winChat->rbChatDatesAll->Checked(0);
  $winChat->rbChatDatesRange->Checked(1);

}  #--- End dtChatDatesRangeE_Change

#--------------------------#
sub rbChatCurrent_Click
#--------------------------#
{
	$winChat->tfChatName->Enable();
	$winChat->btnChatDumpNow->Enable();
	&btnChatRefresh_Click();
	
}  #--- End rbChatCurrent_Click

#--------------------------#
sub rbChatList_Click
#--------------------------#
{
	$winChat->tfChatName->Disable();
	$winChat->btnChatDumpNow->Disable();
	if ($winChat->GridChats->GetRows() < 2) {
		# Avoid new thread
		if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
		else {
			$THR = threads->create(\&getListChats, \$THR, \$ARROW, \$HOURGLASS, \$winChat, \$winConfig, \%CONFIG,
														 $CONFIG_FILE, $PROGDIR, $USERDIR, $DEBUG_FILE, \$win, \%STR);
		}
	}
	
}  #--- End rbChatList_Click

#--------------------------#
sub GridChats_Click
#--------------------------#
{
  # Local variables
  my ($row, $column) = @_;
  # Select
  if (!$column) {
    my $selStatus = $winChat->GridChats->GetCellCheck($row, $column);
    if (!$row) {
      if (!$selStatus) { # Check all
				for (my $i = 0; $i < $winChat->GridChats->GetRows(); $i++) { $winChat->GridChats->SetCellCheck($i, 0, 1); }
			} else { # Uncheck all
				for (my $i = 0; $i < $winChat->GridChats->GetRows(); $i++) { $winChat->GridChats->SetCellCheck($i, 0, 0); }
			}
    } else {
      if (!$selStatus) { $winChat->GridChats->SetCellCheck($row, $column, 1); } # Check
      else             { $winChat->GridChats->SetCellCheck($row, $column, 0); } # Uncheck
    }
  }
	&isDumpChatReady(\$winChat);
  return(1);

}  #--- End GridChats_Click

#--------------------------#
sub btnChatDumpNow_Click
#--------------------------#
{
	&dumpChat(1, \$THR, \$winChat, \$winQueue, \$winPb2, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnChatDumpNow_Click

#--------------------------#
sub btnChatAddQueue_Click
#--------------------------#
{
	&dumpChat(0, \$THR, \$winChat, \$winQueue, \$winPb2, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnChatAddQueue_Click

#--------------------------#
sub winChat_Terminate
#--------------------------#
{
	&rememberPosWin(\$winChat, 'WINCHAT', \$winConfig, \%CONFIG, $CONFIG_FILE)
	if $winConfig->chRememberPos->Checked();
	$winChat->Hide();
  return(0);

}  #--- Fin winChat_Terminate


#--------------------------#
sub createWinVocalMessages
#--------------------------#
{
	# Dump Vocal Messages window (from Mobile Facebook)
	$winVocalMessages = Win32::GUI::Window->new(-name        => 'winVocalMessages'	,
																							-text        => "$STR{'Dump'} $STR{'vocalMsg'}",
																							-pos         => [$winPosX, $winPosY],
																							-size        => [800,175]           ,
																							-background  => [255, 255, 255]     ,
																							-hasmaximize => 0                   ,
																							-hasminimize => 1                   ,
																							-helpbutton  => 0                   ,
																							-resizable   => 0                   ,
																							-dialogui    => 1                   , );
	$winVocalMessages->SetIcon($winICO);
	$winVocalMessages->AddLabel(          -name       	=> 'lblLogo'              ,
																				-size       	=> [128,128]              ,
																				-pos        	=> [  0,  5]              ,
																				-bitmap     	=> $chatBmp            		,
																				-background 	=> [255, 255, 255]        , );
	$winVocalMessages->AddLabel(          -name       	=> 'lblVocalMessagesName'			,
																				-size       	=> [ 70, 22]              ,
																				-pos        	=> [140, 18]              ,
																				-text       	=> $STR{'Filename'}.':'   ,
																				-font       	=> $font10                ,
																				-background 	=> [255, 255, 255]        , );
	$winVocalMessages->AddTextfield(      -name       	=> 'tfVocalMessagesName'	,
																				-size       	=> [512, 22]              ,
																				-pos        	=> [220, 15]              ,
																				-tabstop    	=> 1                      , );
	$winVocalMessages->AddTextfield(      -name         => 'tfVocalMessagesCurrURL',
																				-size         => [440, 22]							,
																				-pos          => [220, 15]							,
																				-visible      => 0											, );
	$winVocalMessages->AddCombobox(				-name       	=> 'cbVocalMessagesFormat',
																				-size       	=> [ 55, 22]              ,
																				-pos        	=> [735, 15]              ,
																				-dropdownlist => 1                      ,
																				-vscroll    	=> 1                      ,
																				-tabstop    	=> 1                      , );
	$winVocalMessages->cbVocalMessagesFormat->Add('XLSX', 'HTML', 'TXT');
	$winVocalMessages->AddLabel(          -name       	=> 'lblDirSaveVocalMessages',
																				-size       	=> [ 70, 22]              ,
																				-pos        	=> [140, 48]              ,
																				-text       	=> $STR{'Directory'}.':'  ,
																				-font       	=> $font10                ,
																				-background 	=> [255, 255, 255]        , );
	$winVocalMessages->AddTextfield(      -name       	=> 'tfDirSaveVocalMessages',
																				-size       	=> [522, 22]              ,
																				-pos        	=> [220, 45]              ,
																				-tabstop    	=> 1                      , );
	$winVocalMessages->AddButton(         -name       	=> 'btnDirSaveVocalMessages',
																				-size       	=> [ 22, 22]              ,
																				-pos        	=> [744, 45]              ,
																				-bitmap     	=> $browseBmp             ,
																				-tip          => $STR{'SelectDir'}			,
																				-tabstop    	=> 1                      , );
	$winVocalMessages->AddButton(         -name       	=> 'btnBrowseDirSaveVocalMessages',
																				-size       	=> [ 22, 22]              ,
																				-pos        	=> [768, 45]              ,
																				-bitmap     	=> $explorerBmp           ,
																				-tip        	=> $STR{'browseFolder'}   ,
																				-tabstop    	=> 1                      , );
	$winVocalMessages->AddLabel(					-name       	=> 'lblInProgress'        ,
																				-size       	=> [200, 22]              ,
																				-pos        	=> [556, 77]              ,
																				-font       	=> $font10                ,
																				-foreground 	=> [0, 153, 0]            ,
																				-background 	=> [255, 255, 255]        ,
																				-visible    	=> 1                      , );
	$winVocalMessages->AddButton(         -name       	=> 'btnVocalMessagesRefresh',
																				-size       	=> [ 22, 22]              ,
																				-pos        	=> [768, 75]              ,
																				-bitmap     	=> $refresh16             ,
																				-tip        	=> $STR{'ReloadPage'}  		,
																				-tabstop    	=> 1                      , );
	$winVocalMessages->AddButton(					-name       	=> 'btnVocalMessagesDumpNow',
																				-size       	=> [150, 30]              ,
																				-pos        	=> [245,105]              ,
																				-text       	=> $STR{'DumpNow'}        ,
																				-font       	=> $font10                ,
																				-disabled   	=> 1                      ,
																				-ok         	=> 1                      ,
																				-default    	=> 1                      ,
																				-tabstop			=> 1											, );
	$winVocalMessages->AddButton(					-name         => 'btnVocalMessagesAddQueue'	,
																				-size         => [150, 30]              ,
																				-pos          => [400,105]              ,
																				-text         => $STR{'AddToQueue'}.' >>',
																				-font         => $font10                ,
																				-disabled     => 1                      ,
																				-tabstop      => 1                      , );
	# Load default values
	if (exists($CONFIG{'VOCALMESSAGES_REPORT_FORMAT'})) {
		$winVocalMessages->cbVocalMessagesFormat->SetCurSel($CONFIG{'VOCALMESSAGES_REPORT_FORMAT'});
	}	else { $winVocalMessages->cbVocalMessagesFormat->SetCurSel(0); } # Default is XLSX
	$winVocalMessages->tfDirSaveVocalMessages->Text($CONFIG{'DIR_SAVE_VOCALMESSAGES'})
	if exists($CONFIG{'DIR_SAVE_VOCALMESSAGES'}) and -d $CONFIG{'DIR_SAVE_VOCALMESSAGES'};

}  #--- End createWinVocalMessages

#--------------------------#
sub cbVocalMessagesFormat_Change
#--------------------------#
{
  my $selFormat = $winVocalMessages->cbVocalMessagesFormat->GetCurSel();
	$CONFIG{'VOCALMESSAGES_REPORT_FORMAT'} = $selFormat;
	&saveConfig(\%CONFIG, $CONFIG_FILE);
	return(1);

}  #--- End cbVocalMessagesFormat_Change

#--------------------------#
sub btnVocalMessagesRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'},$STR{'Warning'},0x40010); }
	else { # Start the thread
    $winVocalMessages->tfVocalMessagesName->Text('');
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winVocalMessages, 3, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
  }
  
}  #--- End btnVocalMessagesRefresh_Click

#--------------------------#
sub tfVocalMessagesName_Change { &isDumpVocalMessagesReady(\$winVocalMessages); }
#--------------------------#

#--------------------------#
sub tfDirSaveVocalMessages_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winVocalMessages->tfDirSaveVocalMessages->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winConfig->chRememberSaveDir->Checked()) {
    $CONFIG{'DIR_SAVE_VOCALMESSAGES'} = $saveDir;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }
  &isDumpVocalMessagesReady(\$winVocalMessages);

}  #--- End tfDirSaveVocalMessages_Change

#--------------------------#
sub btnDirSaveVocalMessages_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winVocalMessages->tfDirSaveVocalMessages->Text();
  my $dir;
  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) { while ($lastDir =~ /[^\\]$/) { chop($lastDir); } }
    $dir = Win32::GUI::BrowseForFolder(-owner => $winVocalMessages, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1, -directory => $lastDir);
  } else {
    $dir = Win32::GUI::BrowseForFolder(-owner => $winVocalMessages, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1);
  }
  # Selected folder
  if ($dir and -d $dir) {
    chop($dir) if $dir =~ /\\$/;
    $winVocalMessages->tfDirSaveVocalMessages->Text($dir);
  }
	return(1);
  
}  #--- End btnDirSaveVocalMessages_Click

#--------------------------#
sub btnBrowseDirSaveVocalMessages_Click { &exploreDir($winVocalMessages->tfDirSaveVocalMessages->Text()); }
#--------------------------#

#--------------------------#
sub btnVocalMessagesDumpNow_Click
#--------------------------#
{
	&dumpVocalMessages(1, \$winVocalMessages, \$winQueue, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnVocalMessagesDumpNow_Click

#--------------------------#
sub btnVocalMessagesAddQueue_Click
#--------------------------#
{
	&dumpVocalMessages(0, \$winVocalMessages, \$winQueue, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnVocalMessagesAddQueue_Click

#--------------------------#
sub winVocalMessages_Terminate
#--------------------------#
{
	&rememberPosWin(\$winVocalMessages, 'WINVOCALMESSAGES', \$winConfig, \%CONFIG, $CONFIG_FILE)
	if $winConfig->chRememberPos->Checked();
	$winVocalMessages->Hide();
  return(0);

}  #--- Fin winVocalMessages_Terminate

#--------------------------#
sub createWinContacts
#--------------------------#
{
	# Dump Contacts window
	$winContacts = Win32::GUI::Window->new( -name        => 'winContacts'				,
																					-text        => "$STR{'Dump'} $STR{'Contacts'}",
																					-pos         => [$winPosX, $winPosY],
																					-size        => [800,175]           ,
																					-background  => [255, 255, 255]     ,
																					-hasmaximize => 0                   ,
																					-hasminimize => 1                   ,
																					-helpbutton  => 0                   ,
																					-resizable   => 0                   ,
																					-dialogui    => 1                   , );
	$winContacts->SetIcon($winICO);
	$winContacts->AddLabel(           -name       	=> 'lblLogo'              ,
																		-size       	=> [128,128]              ,
																		-pos        	=> [  0,  5]              ,
																		-bitmap     	=> $chatBmp            		,
																		-background 	=> [255, 255, 255]        , );
	$winContacts->AddLabel(           -name       	=> 'lblContactsName'			,
																		-size       	=> [ 70, 22]              ,
																		-pos        	=> [140, 18]              ,
																		-text       	=> $STR{'Filename'}.':'   ,
																		-font       	=> $font10                ,
																		-background 	=> [255, 255, 255]        , );
	$winContacts->AddTextfield(       -name       	=> 'tfContactsName'				,
																		-size       	=> [512, 22]              ,
																		-pos        	=> [220, 15]              ,
																		-tabstop    	=> 1                      , );
	$winContacts->AddTextfield(       -name         => 'tfContactsCurrURL'		,
																		-size         => [440, 22]							,
																		-pos          => [220, 15]							,
																		-visible      => 0											, );
	$winContacts->AddCombobox(				-name       	=> 'cbContactsFormat'     ,
																		-size       	=> [ 55, 22]              ,
																		-pos        	=> [735, 15]              ,
																		-dropdownlist => 1                      ,
																		-vscroll    	=> 1                      ,
																		-tabstop    	=> 1                      , );
	$winContacts->cbContactsFormat->Add('XLSX', 'HTML', 'TXT');
	$winContacts->cbContactsFormat->SetCurSel(0);
	$winContacts->AddLabel(           -name       	=> 'lblDirSaveContacts'   ,
																		-size       	=> [ 70, 22]              ,
																		-pos        	=> [140, 48]              ,
																		-text       	=> $STR{'Directory'}.':'  ,
																		-font       	=> $font10                ,
																		-background 	=> [255, 255, 255]        , );
	$winContacts->AddTextfield(       -name       	=> 'tfDirSaveContacts'    ,
																		-size       	=> [522, 22]              ,
																		-pos        	=> [220, 45]              ,
																		-tabstop    	=> 1                      , );
	$winContacts->AddButton(          -name       	=> 'btnDirSaveContacts'   ,
																		-size       	=> [ 22, 22]              ,
																		-pos        	=> [744, 45]              ,
																		-bitmap     	=> $browseBmp             ,
																		-tip          => $STR{'SelectDir'}			,
																		-tabstop    	=> 1                      , );
	$winContacts->AddButton(          -name       	=> 'btnBrowseDirSaveContacts',
																		-size       	=> [ 22, 22]              ,
																		-pos        	=> [768, 45]              ,
																		-bitmap     	=> $explorerBmp           ,
																		-tip        	=> $STR{'browseFolder'}   ,
																		-tabstop    	=> 1                      , );
	$winContacts->AddLabel(						-name       	=> 'lblContactsOpt'       ,
																		-size       	=> [ 75, 22]              ,
																		-pos        	=> [140, 75]              ,
																		-text       	=> $STR{'Options'}.':' 		,
																		-font       	=> $font10                ,
																		-background 	=> [255, 255, 255]        , );
	$winContacts->AddCheckbox(        -name       	=> 'chContactsProfileIcons',
																		-size       	=> [170, 20]              ,
																		-pos        	=> [220, 75]              ,
																		-text       	=> "$STR{'Include'} $STR{'profileIcons'}",
																		-background 	=> [255, 255, 255]        ,
																		-font       	=> $font10                ,
																		-tabstop    	=> 1                      , );
	$winContacts->AddCheckbox(        -name       	=> 'chContactsAutoScroll' ,
																		-size       	=> [220, 22]              ,
																		-pos        	=> [395, 74]              ,
																		-text       	=> $STR{'AutoScroll'}			,
																		-background 	=> [255, 255, 255]        ,
																		-font       	=> $font10                ,
																		-checked    	=> 0                      , );
	$winContacts->AddLabel(						-name       	=> 'lblInProgress'        ,
																		-size       	=> [100, 22]							,
																		-pos        	=> [656, 77]              ,
																		-font       	=> $font10                ,
																		-foreground 	=> [0, 153, 0]            ,
																		-background 	=> [255, 255, 255]        ,
																		-visible    	=> 1                      , );
	$winContacts->AddButton(          -name       	=> 'btnContactsRefresh'   ,
																		-size       	=> [ 22, 22]              ,
																		-pos        	=> [768, 75]              ,
																		-bitmap     	=> $refresh16             ,
																		-tip        	=> $STR{'ReloadPage'}  		,
																		-tabstop    	=> 1                      , );
	$winContacts->AddButton(					-name       	=> 'btnContactsDumpNow'		,
																		-size       	=> [150, 30]              ,
																		-pos        	=> [245,105]              ,
																		-text       	=> $STR{'DumpNow'}        ,
																		-font       	=> $font10                ,
																		-disabled   	=> 1                      ,
																		-ok         	=> 1                      ,
																		-default    	=> 1                      ,
																		-tabstop			=> 1											, );
	$winContacts->AddButton(					-name         => 'btnContactsAddQueue'	,
																		-size         => [150, 30]              ,
																		-pos          => [400,105]              ,
																		-text         => $STR{'AddToQueue'}.' >>',
																		-font         => $font10                ,
																		-disabled     => 1                      ,
																		-tabstop      => 1                      , );
	# Load default values
	if (exists($CONFIG{'CONTACTS_REPORT_FORMAT'})) { $winContacts->cbContactsFormat->SetCurSel($CONFIG{'CONTACTS_REPORT_FORMAT'}); }
	else 																				 	 { $winContacts->cbContactsFormat->SetCurSel(0); 															 	 } # Default is XLSX
	$winContacts->tfDirSaveContacts->Text($CONFIG{'DIR_SAVE_CONTACTS'})
	if exists($CONFIG{'DIR_SAVE_CONTACTS'}) and -d $CONFIG{'DIR_SAVE_CONTACTS'};
  if (exists($CONFIG{'CONTACTS_PROFILE_ICONS'})) {
		$winContacts->chContactsProfileIcons->Checked($CONFIG{'CONTACTS_PROFILE_ICONS'});
	} else {
		$winContacts->chContactsProfileIcons->Checked(0); # Default is not checked
		$CONFIG{'CONTACTS_PROFILE_ICONS'} = 0;
	}
  if (exists($CONFIG{'CONTACTS_AUTOSCROLL'})) {
		$winContacts->chContactsAutoScroll->Checked($CONFIG{'CONTACTS_AUTOSCROLL'});
	} else {
		$winContacts->chContactsAutoScroll->Checked(0); # Default is not checked
		$CONFIG{'CONTACTS_AUTOSCROLL'} = 0;
	}

}  #--- End createWinContacts

#--------------------------#
sub cbContactsFormat_Change
#--------------------------#
{
  my $selFormat = $winContacts->cbContactsFormat->GetCurSel();
	$CONFIG{'CONTACTS_REPORT_FORMAT'} = $selFormat;
	&saveConfig(\%CONFIG, $CONFIG_FILE);
	return(1);

}  #--- End cbContactsFormat_Change

#--------------------------#
sub btnContactsRefresh_Click
#--------------------------#
{
  # Avoid new thread
  if ($THR and $THR->is_running()) { Win32::GUI::MessageBox($win, $STR{'processRunning'}, $STR{'Warning'}, 0x40010); }
	else { # Start the thread
    $winContacts->tfContactsName->Text('');
    $THR = threads->create(\&loadDumpPageThr, \$THR, \$ARROW, \$HOURGLASS, \$winContacts, 8, $USERDIR, $DEBUG_FILE,
													 \%CONFIG, \$win, \%STR);
  }
  
}  #--- End btnContactsRefresh_Click

#--------------------------#
sub tfContactsName_Change { &isDumpContactsReady(\$winContacts); }
#--------------------------#

#--------------------------#
sub tfDirSaveContacts_Change
#--------------------------#
{
  # Local variables
  my $saveDir = $winContacts->tfDirSaveContacts->Text();
  # Remember the save dir
  if ($saveDir and -d $saveDir and $winConfig->chRememberSaveDir->Checked()) {
    $CONFIG{'DIR_SAVE_CONTACTS'} = $saveDir;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }
  &isDumpContactsReady(\$winContacts);

}  #--- End tfDirSaveContacts_Change

#--------------------------#
sub btnDirSaveContacts_Click
#--------------------------#
{
  # Local variables
  my $lastDir = $winContacts->tfDirSaveContacts->Text();
  my $dir;
  # Show dialog window
  if ($lastDir) {
    my(@parts) = split(/\\/, $lastDir);
    if (pop(@parts) =~ /\./) { while ($lastDir =~ /[^\\]$/) { chop($lastDir); } }
    $dir = Win32::GUI::BrowseForFolder(-owner => $winContacts, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1, -directory => $lastDir);
  } else {
    $dir = Win32::GUI::BrowseForFolder(-owner => $winContacts, -title => $STR{'SelectDir'}, -folderonly => 1, -newui => 1);
  }
  # Selected folder
  if ($dir and -d $dir) {
    chop($dir) if $dir =~ /\\$/;
    $winContacts->tfDirSaveContacts->Text($dir);
  }
	return(1);
  
}  #--- End btnDirSaveContacts_Click

#--------------------------#
sub btnBrowseDirSaveContacts_Click { &exploreDir($winContacts->tfDirSaveContacts->Text()); }
#--------------------------#

#--------------------------#
sub chContactsProfileIcons_Click
#--------------------------#
{
  # Save the choice
  if ($winContacts->chContactsProfileIcons->Checked()) {
    $CONFIG{'CONTACTS_PROFILE_ICONS'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  # Don't save
  } else {
    $CONFIG{'CONTACTS_PROFILE_ICONS'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chContactsProfileIcons_Click

#--------------------------#
sub chContactsAutoScroll_Click
#--------------------------#
{
  # Save the choice
  if ($winContacts->chContactsAutoScroll->Checked()) {
    $CONFIG{'CONTACTS_AUTOSCROLL'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  # Don't save
  } else {
    $CONFIG{'CONTACTS_AUTOSCROLL'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chContactsAutoScroll_Click

#--------------------------#
sub btnContactsDumpNow_Click
#--------------------------#
{
	&dumpContacts(1, \$winContacts, \$winQueue, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnContactsDumpNow_Click

#--------------------------#
sub btnContactsAddQueue_Click
#--------------------------#
{
	&dumpContacts(0, \$winContacts, \$winQueue, \$winConfig, \%CONFIG, $CONFIG_FILE, $PROGDIR, $USERDIR, \$win, \%STR);
	
}  #--- End btnContactsAddQueue_Click

#--------------------------#
sub winContacts_Terminate
#--------------------------#
{
	&rememberPosWin(\$winContacts, 'WINCONTACTS', \$winConfig, \%CONFIG, $CONFIG_FILE)
	if $winConfig->chRememberPos->Checked();
	$winContacts->Hide();
  return(0);

}  #--- Fin winContacts_Terminate

#--------------------------#
sub createWinQueue
#--------------------------#
{
  $winQueue = Win32::GUI::Window->new(-name        => 'winQueue'    			,
																			-background  => [255, 255, 255]     ,
																			-text        => $STR{'Queue'} 			,
																			-pos         => [$winPosX, $winPosY],
																			-size        => [800, 300]          ,
																			-minsize		 => [800, 300]          ,
																			-hasmaximize => 1                   ,
																			-hasminimize => 1                   ,
																			-resizable   => 1                   ,
																			-dialogui    => 1                   , );
  $winQueue->SetIcon($winICO);
  $winQueue->AddGrid( 	-name         => 'gridQueue'  		,
												-pos          => [  5,  5]      	,
												-size         => [780,260]      	,
												-background   => [255, 255, 255]	,
												-columns      => 3              	,
												-fixedrows    => 1              	,
												-fixedcolumns => 0              	,
												-editable     => 0              	, );
  $winQueue->gridQueue->SetListMode(1);
	$winQueue->gridQueue->SetHeaderSort();
	$winQueue->AddButton(	-name       	=> 'btnQueueProcess',
												-size       	=> [150, 30]				,
												-pos        	=> [340,270]				,
												-text       	=> "$STR{'Process'} $STR{'Queue'}",
												-font       	=> $font10					,
												-disabled   	=> 1								,
												-ok         	=> 1								,
												-default    	=> 1								,
												-tabstop			=> 1								, );
  # Popup menu for Queue grid
  $gridQueueMenu = new Win32::GUI::Menu(
    'gridQueueMenu'				=> 'gridQueueMenu',
    "> $STR{'MoveUp'}"		=> 'moveUp'				,
    "> $STR{'MoveDown'}"	=> 'moveDown'			,
		" > -" => 0,
    "> $STR{'GoToPage'}"	=> 'queueGoTo'		,
    "> $STR{'Delete'}"		=> 'queueDelete'	,
  );
  # Queue grid header
  $winQueue->gridQueue->SetCellText(0, 0, $STR{'Process'});
  $winQueue->gridQueue->SetCellText(0, 1, $STR{'Name'}	 );
  $winQueue->gridQueue->SetCellText(0, 2, $STR{'url'}		 );
  $winQueue->gridQueue->SetCellFormat(0, 0, 1);
  $winQueue->gridQueue->SetCellFormat(0, 1, 1);
  $winQueue->gridQueue->SetCellFormat(0, 2, 1);
  $winQueue->gridQueue->AutoSize();
  $winQueue->gridQueue->ExpandLastColumn();
  
}  #--- End createWinQueue

#--------------------------#
sub winQueue_Resize
#--------------------------#
{
  $winQueue->gridQueue->Width($winQueue->ScaleWidth()-10);
  $winQueue->gridQueue->Height($winQueue->ScaleHeight()-45);
  $winQueue->gridQueue->AutoSize();
  $winQueue->gridQueue->ExpandLastColumn();
	$winQueue->btnQueueProcess->Top($winQueue->ScaleHeight()-35);
	$winQueue->btnQueueProcess->Left(($winQueue->ScaleWidth()-150)/2);
  return(0);

}  #--- End winQueue_Resize

#--------------------------#
sub gridQueue_RClick
#--------------------------#
{
  # Show popup menu
  my ($row, $column) = @_;
  my (@coord) = $winQueue->gridQueue->GetSelectedCellRange();
  # Select the right entry if not selected or select has change
  $winQueue->gridQueue->SetSelectedCellRange($row, 0, $row, 2)
  if (($coord[0] and ($row < $coord[0])) or ($coord[2] and ($row > $coord[2])) or !$coord[0]);
  my ($X, $Y) = Win32::GUI::GetCursorPos();
	my $nbrRows = $winQueue->gridQueue->GetRows() - 1;
	if ($nbrRows > 1) {
    # Up button enabled if not the first one
    if ($row != 1) { $gridQueueMenu->{moveUp}->Enabled(1); }
    else           { $gridQueueMenu->{moveUp}->Enabled(0); }
    # Down button enabled if not the last one
    if ($row != $nbrRows) { $gridQueueMenu->{moveDown}->Enabled(1); }
    else                  { $gridQueueMenu->{moveDown}->Enabled(0); }
  }
  $winQueue->TrackPopupMenu($gridQueueMenu->{gridQueueMenu},$X,$Y);
	return(1);

}  #--- End gridQueue_RClick

#--------------------------#
sub moveUp_Click
#--------------------------#
{
  # Local variables
  my $upRow   = ($winQueue->gridQueue->GetSelectedCellRange())[0];
  my $downRow = $upRow - 1;
  # Get selected row values
  if ($downRow > 0) { # Not the first line
    # Values to move up
    my $upDatabase = $winQueue->gridQueue->GetCellText($upRow, 0);
    my $upFilename = $winQueue->gridQueue->GetCellText($upRow, 1);
    my $upURL			 = $winQueue->gridQueue->GetCellText($upRow, 2);
    # Values to move down
    my $downDatabase = $winQueue->gridQueue->GetCellText($downRow, 0);
    my $downFilename = $winQueue->gridQueue->GetCellText($downRow, 1);
    my $downURL			 = $winQueue->gridQueue->GetCellText($downRow, 2);
    # Move values up
    $winQueue->gridQueue->SetCellText($downRow, 0, $upDatabase);
    $winQueue->gridQueue->SetCellText($downRow, 1, $upFilename);
    $winQueue->gridQueue->SetCellText($downRow, 2, $upURL);
    # Move values down
    $winQueue->gridQueue->SetCellText($upRow, 0, $downDatabase);
    $winQueue->gridQueue->SetCellText($upRow, 1, $downFilename);
    $winQueue->gridQueue->SetCellText($upRow, 2, $downURL);
    $winQueue->gridQueue->SetSelectedCellRange($downRow, 0, $downRow, 2);
    $winQueue->gridQueue->Refresh();
  }
  return(1);
  
}  #--- End moveUp_Click

#--------------------------#
sub moveDown_Click
#--------------------------#
{
  # Local variables
  my $downRow = ($winQueue->gridQueue->GetSelectedCellRange())[0];
  my $nbrRows = $winQueue->gridQueue->GetRows() - 1;
  my $upRow   = $downRow + 1;
  # Get selected row values
  if ($downRow < $winQueue->gridQueue->GetRows()) { # Not the last line
    # Values to move down
    my $downDatabase = $winQueue->gridQueue->GetCellText($downRow, 0);
    my $downFilename = $winQueue->gridQueue->GetCellText($downRow, 1);
    my $downURL			 = $winQueue->gridQueue->GetCellText($downRow, 2);
    # Values to move up
    my $upDatabase = $winQueue->gridQueue->GetCellText($upRow, 0);
    my $upFilename = $winQueue->gridQueue->GetCellText($upRow, 1);
    my $upURL			 = $winQueue->gridQueue->GetCellText($upRow, 2);
    # Move values down
    $winQueue->gridQueue->SetCellText($upRow, 0, $downDatabase);
    $winQueue->gridQueue->SetCellText($upRow, 1, $downFilename);
    $winQueue->gridQueue->SetCellText($upRow, 2, $downURL);
    # Move values up
    $winQueue->gridQueue->SetCellText($downRow, 0, $upDatabase);
    $winQueue->gridQueue->SetCellText($downRow, 1, $upFilename);
    $winQueue->gridQueue->SetCellText($downRow, 2, $upURL);
    $winQueue->gridQueue->SetSelectedCellRange($upRow, 0, $upRow, 2);
    $winQueue->gridQueue->Refresh();
  }
  return(1);
  
}  #--- End moveDown_Click

#--------------------------#
sub queueGoTo_Click
#--------------------------#
{
	# Local variables
	my $row = ($winQueue->gridQueue->GetSelectedCellRange())[0];
	my $url = $winQueue->gridQueue->GetCellText($row, 2);
  my $mech;
  eval { $mech = WWW::Mechanize::Firefox->new(tab => 'current'); };
	$mech->get($url, synchronize => 0);
	undef($mech);
	return(1);

}  #--- End queueGoTo_Click

#--------------------------#
sub queueDelete_Click
#--------------------------#
{
	# Local variables
	my $row = ($winQueue->gridQueue->GetSelectedCellRange())[0];
	my $process = $winQueue->gridQueue->GetCellText($row, 0);
	if (-e "$USERDIR\\Queue\\$process\.db") {
		unlink("$USERDIR\\Queue\\$process\.db");
		$winQueue->gridQueue->DeleteRow($row);
		$winQueue->gridQueue->Refresh();
	}
	if ($winQueue->gridQueue->GetRows() < 2) { $winQueue->btnQueueProcess->Disable(); }
	return(1);
	
}  #--- End queueDelete_Click

#--------------------------#
sub btnQueueProcess_Click
#--------------------------#
{
	# Process all jobs in queue
	&winQueue_Terminate();
	my @queue;
	for (my $i = 1; $i < $winQueue->gridQueue->GetRows(); $i++) {
		my $process = $winQueue->gridQueue->GetCellText($i, 0);
		my ($procName, $procID) = split(/\-/, $process);
		push(@queue, 'ExtractFace-process ' . "$procName $procID \"$PROGDIR\" \"$USERDIR\"");
	}
	my $i = 1;
	foreach my $command (@queue) {
    Win32::Process::Create(my $processObj, $PROGDIR .'\ExtractFace-process.exe', $command, 0, NORMAL_PRIORITY_CLASS, $PROGDIR);
    $processObj->Wait(INFINITE);
		$winQueue->gridQueue->DeleteRow($i);
	}
	
}  #--- End btnQueueProcess_Click

#--------------------------#
sub winQueue_Terminate
#--------------------------#
{
	&rememberPosWin(\$winQueue, 'WINQUEUE', \$winConfig, \%CONFIG, $CONFIG_FILE)
	if $winConfig->chRememberPos->Checked();
	$winQueue->Hide();
  return(0);

}  #--- End winQueue_Terminate

#--------------------------#
sub btnCancel_Click
#--------------------------#
{
  # Stop requests
  if ($THR) {
    $winPb->lblPbCurr1->Text("$STR{'Process'} $STR{'cancelled'}...");
    $winPb->lblCount1->Text('');
    $winPb->lblPbCurr2->Text('');
    $winPb->lblCount2->Text('');
    &winPb_Terminate;
    $THR->kill('KILL')->detach() if $THR->is_running();
    $win->ChangeCursor($ARROW);
  }
  return(1);

}  #--- End btnCancel_Click

#--------------------------#
sub btnCancel2_Click
#--------------------------#
{
  # Stop requests
  if ($THR) {
    $winPb2->lblPbCurr->Text("$STR{'Process'} $STR{'cancelled'}...");
    $winPb2->lblPbCurr->Text('');
    $winPb2->lblCount->Text('');
    &winPb2_Terminate;
    $THR->kill('KILL')->detach() if $THR->is_running();
    $win->ChangeCursor($ARROW);
  }
  return(1);

}  #--- End btnCancel2_Click

#--------------------------#
sub configTab_Change
#--------------------------#
{
  # Show General Options
  if (!$winConfig->configTab->SelectedItem()) {
    $winConfig->lblToolShadowT->Show();
    $winConfig->lblToolT->Show();
    $winConfig->btnExportLang->Show();
    $winConfig->btnCheckUpdate->Show();
    $winConfig->chAutoUpdate->Show();
    $winConfig->lblFuncShadowT->Show();
    $winConfig->lblFuncT->Show();
    $winConfig->chRememberPos->Show();
    $winConfig->chOptDynamicMenu->Show();
    $winConfig->lblTimeToWait->Show();
    $winConfig->tfTimeToWait->Show();
    $winConfig->upTimeToWait->Show();
    $winConfig->lblTimeToWait2->Show();
    $winConfig->lblCharset->Show();
    $winConfig->cbCharset->Show();
    $winConfig->lblLoggingShadowT->Show();
    $winConfig->lblLoggingT->Show();
    $winConfig->chDebugLogging->Show();
    $winConfig->btnOpenLog->Show();
		$winConfig->btnClearLog->Show();
		if ($DEBUG_FILE and -T $DEBUG_FILE) { $winConfig->btnOpenLog->Enable();	 $winConfig->btnClearLog->Enable();	 }
		else																{ $winConfig->btnOpenLog->Disable(); $winConfig->btnClearLog->Disable(); }
    $winConfig->lblScrollShadowT->Hide();
    $winConfig->lblScrollT->Hide();
    $winConfig->lblMaxScrollChat->Hide();
    $winConfig->rbMaxScrollChatByPage->Hide();
    $winConfig->tfMaxScrollChat->Hide();
    $winConfig->upMaxScrollChat->Hide();
    $winConfig->rbMaxScrollChatByDate->Hide();
    $winConfig->dtMaxScrollChatByDate->Hide();
    $winConfig->lblMaxScroll->Hide();
    $winConfig->rbMaxScrollByPage->Hide();
    $winConfig->tfMaxScroll->Hide();
    $winConfig->upMaxScroll->Hide();
    $winConfig->rbMaxScrollByDate->Hide();
    $winConfig->dtMaxScrollByDate->Hide();
    $winConfig->lblExpandShadowT->Hide();
    $winConfig->lblExpandT->Hide();
    $winConfig->chOptSeemore->Hide();
    $winConfig->chOptPosts->Hide();
    $winConfig->chOptTranslate->Hide();
    $winConfig->lblLoadingShadowT->Hide();
    $winConfig->lblLoadingT->Hide();
    $winConfig->chOptAutoLoadScroll->Hide();
    $winConfig->chOptScrollTop->Hide();
    $winConfig->lblProcessingShadowT->Hide();
    $winConfig->lblProcessingT->Hide();
    $winConfig->chSilentProgress->Hide();
    $winConfig->lblFinishingShadowT->Hide();
    $winConfig->lblFinishingT->Hide();
    $winConfig->chOptOpenReport->Hide();
    $winConfig->chOptDontOpenReport->Hide();
    $winConfig->chCloseUsedTabs->Hide();
    $winConfig->chDelTempFiles->Hide();
    $winConfig->chRememberSaveDir->Hide();
  # Show Scroll/Expand Options
  } elsif ($winConfig->configTab->SelectedItem() == 1) {
    $winConfig->lblScrollShadowT->Show();
    $winConfig->lblScrollT->Show();
    $winConfig->lblMaxScrollChat->Show();
    $winConfig->rbMaxScrollChatByPage->Show();
    $winConfig->tfMaxScrollChat->Show();
    $winConfig->upMaxScrollChat->Show();
    $winConfig->rbMaxScrollChatByDate->Show();
    $winConfig->dtMaxScrollChatByDate->Show();
    $winConfig->lblMaxScroll->Show();
    $winConfig->rbMaxScrollByPage->Show();
    $winConfig->tfMaxScroll->Show();
    $winConfig->upMaxScroll->Show();
    $winConfig->rbMaxScrollByDate->Show();
    $winConfig->dtMaxScrollByDate->Show();
    $winConfig->lblExpandShadowT->Show();
    $winConfig->lblExpandT->Show();
    $winConfig->chOptSeemore->Show();
    $winConfig->chOptPosts->Show();
    $winConfig->chOptTranslate->Show();
    $winConfig->lblToolShadowT->Hide();
    $winConfig->lblToolT->Hide();
    $winConfig->btnExportLang->Hide();
    $winConfig->btnCheckUpdate->Hide();
    $winConfig->chAutoUpdate->Hide();
    $winConfig->lblFuncShadowT->Hide();
    $winConfig->lblFuncT->Hide();
    $winConfig->chRememberPos->Hide();
    $winConfig->chOptDynamicMenu->Hide();
    $winConfig->lblTimeToWait->Hide();
    $winConfig->tfTimeToWait->Hide();
    $winConfig->upTimeToWait->Hide();
    $winConfig->lblTimeToWait2->Hide();
    $winConfig->lblCharset->Hide();
    $winConfig->cbCharset->Hide();
    $winConfig->lblLoggingShadowT->Hide();
    $winConfig->lblLoggingT->Hide();
    $winConfig->chDebugLogging->Hide();
    $winConfig->btnOpenLog->Hide();
		$winConfig->btnClearLog->Hide();
    $winConfig->lblLoadingShadowT->Hide();
    $winConfig->lblLoadingT->Hide();
    $winConfig->chOptAutoLoadScroll->Hide();
    $winConfig->chOptScrollTop->Hide();
    $winConfig->lblProcessingShadowT->Hide();
    $winConfig->lblProcessingT->Hide();
    $winConfig->chSilentProgress->Hide();
    $winConfig->lblFinishingShadowT->Hide();
    $winConfig->lblFinishingT->Hide();
    $winConfig->chOptOpenReport->Hide();
    $winConfig->chOptDontOpenReport->Hide();
    $winConfig->chCloseUsedTabs->Hide();
    $winConfig->chDelTempFiles->Hide();
    $winConfig->chRememberSaveDir->Hide();
	# Show Dump options
  } else {
    $winConfig->lblLoadingShadowT->Show();
    $winConfig->lblLoadingT->Show();
    $winConfig->chOptAutoLoadScroll->Show();
    $winConfig->chOptScrollTop->Show();
    $winConfig->lblProcessingShadowT->Show();
    $winConfig->lblProcessingT->Show();
    $winConfig->chSilentProgress->Show();
    $winConfig->lblFinishingShadowT->Show();
    $winConfig->lblFinishingT->Show();
    $winConfig->chOptOpenReport->Show();
    $winConfig->chOptDontOpenReport->Show();
    $winConfig->chCloseUsedTabs->Show();
    $winConfig->chDelTempFiles->Show();
    $winConfig->chRememberSaveDir->Show();
    $winConfig->lblToolShadowT->Hide();
    $winConfig->lblToolT->Hide();
    $winConfig->btnExportLang->Hide();
    $winConfig->btnCheckUpdate->Hide();
    $winConfig->chAutoUpdate->Hide();
    $winConfig->lblFuncShadowT->Hide();
    $winConfig->lblFuncT->Hide();
    $winConfig->chRememberPos->Hide();
    $winConfig->chOptDynamicMenu->Hide();
    $winConfig->lblTimeToWait->Hide();
    $winConfig->tfTimeToWait->Hide();
    $winConfig->upTimeToWait->Hide();
    $winConfig->lblTimeToWait2->Hide();
    $winConfig->lblCharset->Hide();
    $winConfig->cbCharset->Hide();
    $winConfig->lblLoggingShadowT->Hide();
    $winConfig->lblLoggingT->Hide();
    $winConfig->chDebugLogging->Hide();
    $winConfig->btnOpenLog->Hide();
		$winConfig->btnClearLog->Hide();
    $winConfig->lblScrollShadowT->Hide();
    $winConfig->lblScrollT->Hide();
    $winConfig->lblMaxScrollChat->Hide();
    $winConfig->rbMaxScrollChatByPage->Hide();
    $winConfig->tfMaxScrollChat->Hide();
    $winConfig->upMaxScrollChat->Hide();
    $winConfig->rbMaxScrollChatByDate->Hide();
    $winConfig->dtMaxScrollChatByDate->Hide();
    $winConfig->lblMaxScroll->Hide();
    $winConfig->rbMaxScrollByPage->Hide();
    $winConfig->tfMaxScroll->Hide();
    $winConfig->upMaxScroll->Hide();
    $winConfig->rbMaxScrollByDate->Hide();
    $winConfig->dtMaxScrollByDate->Hide();
    $winConfig->lblExpandShadowT->Hide();
    $winConfig->lblExpandT->Hide();
    $winConfig->chOptSeemore->Hide();
    $winConfig->chOptPosts->Hide();
    $winConfig->chOptTranslate->Hide();
	}

}  #--- End configTab_Change

#--------------------------#
sub winConfig_Terminate
#--------------------------#
{
	&rememberPosWin(\$winConfig, 'WINCONFIG', \$winConfig, \%CONFIG, $CONFIG_FILE) if $winConfig->chRememberPos->Checked();
	$winConfig->Hide();
  return(0);

}  #--- End winConfig_Terminate

#--------------------------#
sub btnExportLang_Click
#--------------------------#
{
  # Save strings in Lang.ini
  open(LANG, ">:encoding(UTF-8)", $LANG_FILE);
  flock(LANG, 2);
  foreach my $cle (keys %STR) { print LANG "$cle = $STR{$cle}\n"; }
  close(LANG);
  # Open the page
  $win->ShellExecute('open', $LANG_FILE,'','',1);

}  #--- End btnExportLang_Click

#--------------------------#
sub btnCheckUpdate_Click { &checkUpdate(1, $VERSION, \$win, \%STR); }
#--------------------------#

#--------------------------#
sub chAutoUpdate_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chAutoUpdate->Checked()) {
    $CONFIG{'AUTO_UPDATE'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  } else {
    $CONFIG{'AUTO_UPDATE'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chAutoUpdate_Click

#--------------------------#
sub chRememberPos_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chRememberPos->Checked()) {
    $CONFIG{'REMEMBER_POS'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  } else {
    $CONFIG{'REMEMBER_POS'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chRememberPos_Click

#--------------------------#
sub chOptDynamicMenu_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chOptDynamicMenu->Checked()) {
    $CONFIG{'DYNAMIC_MENU'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  } else {
		$trayMenu->{MenuAlbums}->Enabled(1);
		$trayMenu->{MenuFriends}->Enabled(1);
		$trayMenu->{MenuContributors}->Enabled(1);
		$trayMenu->{MenuFriends}->Enabled(1);
		$trayMenu->{MenuMutualFriends}->Enabled(1);
		$trayMenu->{MenuEvents}->Enabled(1);
		$trayMenu->{MenuGroupMembers}->Enabled(1);
		$trayMenu->{MenuMessenger}->Enabled(1);
    $CONFIG{'DYNAMIC_MENU'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chOptDynamicMenu_Click

#--------------------------#
sub tfTimeToWait_Change
#--------------------------#
{
  # Local variables
  my $timeToWait = $winConfig->tfTimeToWait->Text();
  # Remember
  if ($START == 1) {
    $CONFIG{'TIME_TO_WAIT'} = $timeToWait;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End tfTimeToWait_Change

#--------------------------#
sub cbCharset_Change
#--------------------------#
{
	# Save the choice
  $CONFIG{'CHARSET'} = $winConfig->cbCharset->GetString($winConfig->cbCharset->GetCurSel());
  &saveConfig(\%CONFIG, $CONFIG_FILE);

}  #--- End cbCharset_Change

#--------------------------#
sub chDebugLogging_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chDebugLogging->Checked()) {
    $CONFIG{'DEBUG_LOGGING'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  } else {
    $CONFIG{'DEBUG_LOGGING'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chDebugLogging_Click

#--------------------------#
sub btnOpenLog_Click
#--------------------------#
{
  # Open file with default program
  if ($DEBUG_FILE and -T $DEBUG_FILE) {
    $win->ShellExecute('open', $DEBUG_FILE,'','',1) or
    Win32::GUI::MessageBox($win, "$STR{'Error'}: ".Win32::FormatMessage(Win32::GetLastError()), $STR{'Error'}, 0x40010);
  }

}  #--- End btnOpenLog_Click

#--------------------------#
sub btnClearLog_Click
#--------------------------#
{
  # Open file with default program
  if ($DEBUG_FILE and -T $DEBUG_FILE and unlink($DEBUG_FILE)) {
    $winConfig->btnOpenLog->Disable();
		$winConfig->btnClearLog->Disable();
  }

}  #--- End btnClearLog_Click

#--------------------------#
sub tfMaxScrollChat_Change
#--------------------------#
{
  # Remember
  if ($START == 1) {
    $winConfig->rbMaxScrollChatByDate->Checked(0);
    $winConfig->rbMaxScrollChatByPage->Checked(1);
    $CONFIG{'MAX_LOADING_MSG'} = $winConfig->tfMaxScrollChat->Text();
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End tfMaxScrollChat_Change

#--------------------------#
sub dtMaxScrollChatByDate_Change
#--------------------------#
{
  $winConfig->rbMaxScrollChatByPage->Checked(0);
  $winConfig->rbMaxScrollChatByDate->Checked(1);

}  #--- End dtMaxScrollChatByDate_Change

#--------------------------#
sub tfMaxScroll_Change
#--------------------------#
{
  # Remember
  if ($START == 1) {
    $winConfig->rbMaxScrollByDate->Checked(0);
    $winConfig->rbMaxScrollByPage->Checked(1);
    $CONFIG{'MAX_SCROLL'} = $winConfig->tfMaxScroll->Text();
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End tfMaxScroll_Change

#--------------------------#
sub dtMaxScrollByDate_Change
#--------------------------#
{
  $winConfig->rbMaxScrollByPage->Checked(0);
  $winConfig->rbMaxScrollByDate->Checked(1);

}  #--- End dtMaxScrollByDate_Change

#--------------------------#
sub chOptSeemore_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chOptSeemore->Checked()) {
    $CONFIG{'EXPAND_SEE_MORE'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  } else {
    $CONFIG{'EXPAND_SEE_MORE'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chOptSeemore_Click

#--------------------------#
sub chOptPosts_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chOptPosts->Checked()) {
    $CONFIG{'EXPAND_MORE_POSTS'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  } else {
    $CONFIG{'EXPAND_MORE_POSTS'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chOptPosts_Click

#--------------------------#
sub chOptTranslate_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chOptTranslate->Checked()) {
    $CONFIG{'SEE_TRANSLATION'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  } else {
    $CONFIG{'SEE_TRANSLATION'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chOptTranslate_Click

#--------------------------#
sub chOptAutoLoadScroll_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chOptAutoLoadScroll->Checked()) {
    $CONFIG{'AUTO_LOAD_SCROLL'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  } else {
    $CONFIG{'AUTO_LOAD_SCROLL'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chOptAutoLoadScroll_Click

#--------------------------#
sub chOptScrollTop_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chOptScrollTop->Checked()) {
    $CONFIG{'OPT_SCROLL_TOP'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  } else {
    $CONFIG{'OPT_SCROLL_TOP'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chOptScrollTop_Click

#--------------------------#
sub chRememberSaveDir_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chRememberSaveDir->Checked()) {
    $CONFIG{'REMEMBER_SAVE_DIR'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  } else {
    $CONFIG{'REMEMBER_SAVE_DIR'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chRememberSaveDir_Click

#--------------------------#
sub chSilentProgress_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chSilentProgress->Checked()) {
    $CONFIG{'SILENT_PROGRESS'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  } else {
    $CONFIG{'SILENT_PROGRESS'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chSilentProgress_Click

#--------------------------#
sub chOptOpenReport_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chOptOpenReport->Checked()) {
		$winConfig->chOptDontOpenReport->Checked(1);
		$winConfig->chOptDontOpenReport->Show();
		$CONFIG{'DONT_OPEN_REPORT'} = 1;
    $CONFIG{'OPEN_REPORT'}			= 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  } else {
		$winConfig->chOptDontOpenReport->Checked(0);
		$winConfig->chOptDontOpenReport->Hide();
		$CONFIG{'DONT_OPEN_REPORT'} = 0;
    $CONFIG{'OPEN_REPORT'}			= 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chOptOpenReport_Click

#--------------------------#
sub chOptDontOpenReport_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chOptDontOpenReport->Checked()) {
    $CONFIG{'DONT_OPEN_REPORT'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  } else {
    $CONFIG{'DONT_OPEN_REPORT'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chOptDontOpenReport_Click

#--------------------------#
sub chCloseUsedTabs_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chCloseUsedTabs->Checked()) {
    $CONFIG{'CLOSE_USED_TABS'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  } else {
    $CONFIG{'CLOSE_USED_TABS'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chCloseUsedTabs_Click

#--------------------------#
sub chDelTempFiles_Click
#--------------------------#
{
  # Save the choice
  if ($winConfig->chDelTempFiles->Checked()) {
    $CONFIG{'DEL_TEMP_FILES'} = 1;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  } else {
    $CONFIG{'DEL_TEMP_FILES'} = 0;
    &saveConfig(\%CONFIG, $CONFIG_FILE);
  }

}  #--- End chDelTempFiles_Click